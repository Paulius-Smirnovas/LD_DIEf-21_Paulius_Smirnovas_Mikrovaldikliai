
Papildoma1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f58  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080080e8  080080e8  000090e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081a4  080081a4  0000a14c  2**0
                  CONTENTS
  4 .ARM          00000008  080081a4  080081a4  000091a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081ac  080081ac  0000a14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081ac  080081ac  000091ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080081b0  080081b0  000091b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  080081b4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a14c  2**0
                  CONTENTS
 10 .bss          00001d98  2000014c  2000014c  0000a14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20001ee4  20001ee4  0000a14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f09a  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e3d  00000000  00000000  00019216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  0001c058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000938  00000000  00000000  0001ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fa3  00000000  00000000  0001d608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001159b  00000000  00000000  000415ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0f77  00000000  00000000  00052b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123abd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036bc  00000000  00000000  00123b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001271bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080d0 	.word	0x080080d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	080080d0 	.word	0x080080d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <readJoystickAxis>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
uint32_t readJoystickAxis(ADC_HandleTypeDef* hadc, uint32_t channel) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
    sConfig.Channel = channel;
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 800058c:	2301      	movs	r3, #1
 800058e:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
    HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	4619      	mov	r1, r3
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f000 fd3a 	bl	8001014 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(hadc);
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f000 fbcd 	bl	8000d40 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, 100);
 80005a6:	2164      	movs	r1, #100	@ 0x64
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 fc9b 	bl	8000ee4 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(hadc);
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f000 fd23 	bl	8000ffa <HAL_ADC_GetValue>
 80005b4:	4603      	mov	r3, r0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <controlLEDs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void controlLEDs(uint32_t xValue, uint32_t yValue) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
    // Thresholds might need adjustment
    const uint32_t threshold = 1500; // Example threshold for detecting direction
 80005ca:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80005ce:	60fb      	str	r3, [r7, #12]
    const uint32_t centerValue =2048; // Assuming 12-bit ADC, adjust based on your ADC resolution
 80005d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005d4:	60bb      	str	r3, [r7, #8]

    // Turn off all LEDs initially
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80005dc:	481b      	ldr	r0, [pc, #108]	@ (800064c <controlLEDs+0x8c>)
 80005de:	f001 f9e5 	bl	80019ac <HAL_GPIO_WritePin>

    // right
    if(yValue < centerValue - threshold) {
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	683a      	ldr	r2, [r7, #0]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d205      	bcs.n	80005fa <controlLEDs+0x3a>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005f4:	4815      	ldr	r0, [pc, #84]	@ (800064c <controlLEDs+0x8c>)
 80005f6:	f001 f9d9 	bl	80019ac <HAL_GPIO_WritePin>
    }
    // left
    if(yValue > centerValue + threshold) {
 80005fa:	68ba      	ldr	r2, [r7, #8]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4413      	add	r3, r2
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	429a      	cmp	r2, r3
 8000604:	d905      	bls.n	8000612 <controlLEDs+0x52>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800060c:	480f      	ldr	r0, [pc, #60]	@ (800064c <controlLEDs+0x8c>)
 800060e:	f001 f9cd 	bl	80019ac <HAL_GPIO_WritePin>
    }
    // up
    if(xValue < centerValue - threshold) {
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	429a      	cmp	r2, r3
 800061c:	d205      	bcs.n	800062a <controlLEDs+0x6a>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000624:	4809      	ldr	r0, [pc, #36]	@ (800064c <controlLEDs+0x8c>)
 8000626:	f001 f9c1 	bl	80019ac <HAL_GPIO_WritePin>
    }
    // back
    if(xValue > centerValue + threshold) {
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4413      	add	r3, r2
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	429a      	cmp	r2, r3
 8000634:	d905      	bls.n	8000642 <controlLEDs+0x82>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <controlLEDs+0x8c>)
 800063e:	f001 f9b5 	bl	80019ac <HAL_GPIO_WritePin>
    }
    // Add more conditions here for diagonals, adjust GPIO_PIN_X accordingly
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40020c00 	.word	0x40020c00

08000650 <processJoystick>:

void processJoystick() {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
    uint32_t xValue = readJoystickAxis(&hadc1, ADC_CHANNEL_1); // PA1 for VRx
 8000656:	2101      	movs	r1, #1
 8000658:	4811      	ldr	r0, [pc, #68]	@ (80006a0 <processJoystick+0x50>)
 800065a:	f7ff ff89 	bl	8000570 <readJoystickAxis>
 800065e:	60f8      	str	r0, [r7, #12]
    uint32_t yValue = readJoystickAxis(&hadc1, ADC_CHANNEL_0); // PA0 for VRy
 8000660:	2100      	movs	r1, #0
 8000662:	480f      	ldr	r0, [pc, #60]	@ (80006a0 <processJoystick+0x50>)
 8000664:	f7ff ff84 	bl	8000570 <readJoystickAxis>
 8000668:	60b8      	str	r0, [r7, #8]
    uint32_t buttonValue = readJoystickAxis(&hadc1, ADC_CHANNEL_2); // Assuming ADC1_IN2 for the button
 800066a:	2102      	movs	r1, #2
 800066c:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <processJoystick+0x50>)
 800066e:	f7ff ff7f 	bl	8000570 <readJoystickAxis>
 8000672:	6078      	str	r0, [r7, #4]

    // Assuming the button gives low ADC value when pressed due to being grounded
    const uint32_t buttonPressedThreshold = 1000; // Example threshold, adjust based on your setup
 8000674:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000678:	603b      	str	r3, [r7, #0]

    // Process joystick axes
    controlLEDs(xValue, yValue);
 800067a:	68b9      	ldr	r1, [r7, #8]
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f7ff ff9f 	bl	80005c0 <controlLEDs>

    // Check if button is pressed
    if(buttonValue < buttonPressedThreshold) {
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	429a      	cmp	r2, r3
 8000688:	d205      	bcs.n	8000696 <processJoystick+0x46>
        // Button is pressed, light up all LEDs
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000690:	4804      	ldr	r0, [pc, #16]	@ (80006a4 <processJoystick+0x54>)
 8000692:	f001 f98b 	bl	80019ac <HAL_GPIO_WritePin>
    }
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000168 	.word	0x20000168
 80006a4:	40020c00 	.word	0x40020c00

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b0be      	sub	sp, #248	@ 0xf8
 80006ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 fa6d 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f841 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 f8f9 	bl	80008ac <MX_GPIO_Init>
  MX_ADC1_Init();
 80006ba:	f000 f8a5 	bl	8000808 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80006be:	f006 fb57 	bl	8006d70 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */
  char buffer1[32]; // Ensure this buffer is large enough for the numeric value and null-terminator
  char buffer2[32]; // Ensure this buffer is large enough for the numeric value and null-terminator
  char buffer3[32]; // Ensure this buffer is large enough for the numeric value and null-terminator
  char buffer[128]={'\0'};
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	227c      	movs	r2, #124	@ 0x7c
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f007 f87e 	bl	80077d0 <memset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Process joystick input and control LEDs
	      processJoystick();
 80006d4:	f7ff ffbc 	bl	8000650 <processJoystick>
	      uint32_t xValuePRINT = readJoystickAxis(&hadc1, ADC_CHANNEL_1); // PA1 for VRx
 80006d8:	2101      	movs	r1, #1
 80006da:	4815      	ldr	r0, [pc, #84]	@ (8000730 <main+0x88>)
 80006dc:	f7ff ff48 	bl	8000570 <readJoystickAxis>
 80006e0:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
	      uint32_t yValuePRINT = readJoystickAxis(&hadc1, ADC_CHANNEL_0); // PA0 for VRy
 80006e4:	2100      	movs	r1, #0
 80006e6:	4812      	ldr	r0, [pc, #72]	@ (8000730 <main+0x88>)
 80006e8:	f7ff ff42 	bl	8000570 <readJoystickAxis>
 80006ec:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
	      uint32_t buttonValuePRINT = readJoystickAxis(&hadc1, ADC_CHANNEL_2);
 80006f0:	2102      	movs	r1, #2
 80006f2:	480f      	ldr	r0, [pc, #60]	@ (8000730 <main+0x88>)
 80006f4:	f7ff ff3c 	bl	8000570 <readJoystickAxis>
 80006f8:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4



	      // Format the string to include labels and values for X, Y, and Button, followed by a newline
	      sprintf(buffer, "X value: %lu; Y value: %lu; Button Value: %lu\n\r", xValuePRINT, yValuePRINT, buttonValuePRINT);
 80006fc:	1d38      	adds	r0, r7, #4
 80006fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000708:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800070c:	4909      	ldr	r1, [pc, #36]	@ (8000734 <main+0x8c>)
 800070e:	f007 f83f 	bl	8007790 <siprintf>

	      // Transmit the formatted string
	      CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fd5b 	bl	80001d0 <strlen>
 800071a:	4602      	mov	r2, r0
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	4611      	mov	r1, r2
 8000720:	4618      	mov	r0, r3
 8000722:	f006 fbe9 	bl	8006ef8 <CDC_Transmit_FS>
	      // Depending on your application, you might want to introduce a small delay
	      // to avoid overwhelming the CPU, especially if not using interrupts or DMA for ADC readings.
	      HAL_Delay(100); // Delay for 10 milliseconds
 8000726:	2064      	movs	r0, #100	@ 0x64
 8000728:	f000 faa2 	bl	8000c70 <HAL_Delay>
  {
 800072c:	bf00      	nop
 800072e:	e7d1      	b.n	80006d4 <main+0x2c>
 8000730:	20000168 	.word	0x20000168
 8000734:	080080e8 	.word	0x080080e8

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	@ 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	@ 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f007 f842 	bl	80077d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b27      	ldr	r3, [pc, #156]	@ (8000800 <SystemClock_Config+0xc8>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	4a26      	ldr	r2, [pc, #152]	@ (8000800 <SystemClock_Config+0xc8>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	@ 0x40
 800076c:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <SystemClock_Config+0xc8>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <SystemClock_Config+0xcc>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a20      	ldr	r2, [pc, #128]	@ (8000804 <SystemClock_Config+0xcc>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <SystemClock_Config+0xcc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800079c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a8:	2304      	movs	r3, #4
 80007aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007ac:	2348      	movs	r3, #72	@ 0x48
 80007ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007b4:	2303      	movs	r3, #3
 80007b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 fb5f 	bl	8002e80 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c8:	f000 f8c2 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2302      	movs	r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2102      	movs	r1, #2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fdc1 	bl	8003370 <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007f4:	f000 f8ac 	bl	8000950 <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3750      	adds	r7, #80	@ 0x50
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800081a:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800081c:	4a21      	ldr	r2, [pc, #132]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 800081e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000820:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000826:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800082c:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000832:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000840:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000848:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <MX_ADC1_Init+0xa0>)
 800084a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000854:	2201      	movs	r2, #1
 8000856:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000862:	2201      	movs	r2, #1
 8000864:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000866:	480e      	ldr	r0, [pc, #56]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000868:	f000 fa26 	bl	8000cb8 <HAL_ADC_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000872:	f000 f86d 	bl	8000950 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800087a:	2301      	movs	r3, #1
 800087c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000888:	f000 fbc4 	bl	8001014 <HAL_ADC_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000892:	f000 f85d 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000168 	.word	0x20000168
 80008a4:	40012000 	.word	0x40012000
 80008a8:	0f000001 	.word	0x0f000001

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <MX_GPIO_Init+0x9c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a1f      	ldr	r2, [pc, #124]	@ (8000948 <MX_GPIO_Init+0x9c>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <MX_GPIO_Init+0x9c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <MX_GPIO_Init+0x9c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a18      	ldr	r2, [pc, #96]	@ (8000948 <MX_GPIO_Init+0x9c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <MX_GPIO_Init+0x9c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <MX_GPIO_Init+0x9c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a11      	ldr	r2, [pc, #68]	@ (8000948 <MX_GPIO_Init+0x9c>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_GPIO_Init+0x9c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800091c:	480b      	ldr	r0, [pc, #44]	@ (800094c <MX_GPIO_Init+0xa0>)
 800091e:	f001 f845 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000922:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000926:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4619      	mov	r1, r3
 800093a:	4804      	ldr	r0, [pc, #16]	@ (800094c <MX_GPIO_Init+0xa0>)
 800093c:	f000 fe9a 	bl	8001674 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000940:	bf00      	nop
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	40020c00 	.word	0x40020c00

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <Error_Handler+0x8>

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096a:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <HAL_MspInit+0x4c>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000970:	6453      	str	r3, [r2, #68]	@ 0x44
 8000972:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	4a08      	ldr	r2, [pc, #32]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	@ 0x40
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800099a:	2007      	movs	r0, #7
 800099c:	f000 fe28 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a17      	ldr	r2, [pc, #92]	@ (8000a28 <HAL_ADC_MspInit+0x7c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d127      	bne.n	8000a1e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <HAL_ADC_MspInit+0x80>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	4a15      	ldr	r2, [pc, #84]	@ (8000a2c <HAL_ADC_MspInit+0x80>)
 80009d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <HAL_ADC_MspInit+0x80>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <HAL_ADC_MspInit+0x80>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <HAL_ADC_MspInit+0x80>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <HAL_ADC_MspInit+0x80>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000a06:	2307      	movs	r3, #7
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <HAL_ADC_MspInit+0x84>)
 8000a1a:	f000 fe2b 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	@ 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40012000 	.word	0x40012000
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <NMI_Handler+0x4>

08000a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8a:	f000 f8d1 	bl	8000c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a98:	4802      	ldr	r0, [pc, #8]	@ (8000aa4 <OTG_FS_IRQHandler+0x10>)
 8000a9a:	f001 f8e4 	bl	8001c66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20001698 	.word	0x20001698

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f006 fe82 	bl	80077e0 <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20020000 	.word	0x20020000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	200001b0 	.word	0x200001b0
 8000b10:	20001ee8 	.word	0x20001ee8

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b3c:	f7ff ffea 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	@ (8000b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	@ (8000b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b66:	f006 fe41 	bl	80077ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fd9d 	bl	80006a8 <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000b7c:	080081b4 	.word	0x080081b4
  ldr r2, =_sbss
 8000b80:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000b84:	20001ee4 	.word	0x20001ee4

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <HAL_Init+0x40>)
 8000b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <HAL_Init+0x40>)
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <HAL_Init+0x40>)
 8000bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 fd1b 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f000 f808 	bl	8000bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff fecc 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023c00 	.word	0x40023c00

08000bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HAL_InitTick+0x54>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <HAL_InitTick+0x58>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fd33 	bl	800165a <HAL_SYSTICK_Config>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00e      	b.n	8000c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d80a      	bhi.n	8000c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f000 fcfb 	bl	8001606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c10:	4a06      	ldr	r2, [pc, #24]	@ (8000c2c <HAL_InitTick+0x5c>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	e000      	b.n	8000c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000004 	.word	0x20000004

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	200001b4 	.word	0x200001b4

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200001b4 	.word	0x200001b4

08000c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c78:	f7ff ffee 	bl	8000c58 <HAL_GetTick>
 8000c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c88:	d005      	beq.n	8000c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <HAL_Delay+0x44>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c96:	bf00      	nop
 8000c98:	f7ff ffde 	bl	8000c58 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d8f7      	bhi.n	8000c98 <HAL_Delay+0x28>
  {
  }
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008

08000cb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e033      	b.n	8000d36 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d109      	bne.n	8000cea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fe68 	bl	80009ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	f003 0310 	and.w	r3, r3, #16
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d118      	bne.n	8000d28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000cfe:	f023 0302 	bic.w	r3, r3, #2
 8000d02:	f043 0202 	orr.w	r2, r3, #2
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 faa4 	bl	8001258 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f023 0303 	bic.w	r3, r3, #3
 8000d1e:	f043 0201 	orr.w	r2, r3, #1
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d26:	e001      	b.n	8000d2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d101      	bne.n	8000d5a <HAL_ADC_Start+0x1a>
 8000d56:	2302      	movs	r3, #2
 8000d58:	e0b2      	b.n	8000ec0 <HAL_ADC_Start+0x180>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d018      	beq.n	8000da2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 0201 	orr.w	r2, r2, #1
 8000d7e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d80:	4b52      	ldr	r3, [pc, #328]	@ (8000ecc <HAL_ADC_Start+0x18c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a52      	ldr	r2, [pc, #328]	@ (8000ed0 <HAL_ADC_Start+0x190>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	0c9a      	lsrs	r2, r3, #18
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000d94:	e002      	b.n	8000d9c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1f9      	bne.n	8000d96 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d17a      	bne.n	8000ea6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000db8:	f023 0301 	bic.w	r3, r3, #1
 8000dbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d007      	beq.n	8000de2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000dda:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000dee:	d106      	bne.n	8000dfe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df4:	f023 0206 	bic.w	r2, r3, #6
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	645a      	str	r2, [r3, #68]	@ 0x44
 8000dfc:	e002      	b.n	8000e04 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e0c:	4b31      	ldr	r3, [pc, #196]	@ (8000ed4 <HAL_ADC_Start+0x194>)
 8000e0e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000e18:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 031f 	and.w	r3, r3, #31
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d12a      	bne.n	8000e7c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ed8 <HAL_ADC_Start+0x198>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d015      	beq.n	8000e5c <HAL_ADC_Start+0x11c>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a29      	ldr	r2, [pc, #164]	@ (8000edc <HAL_ADC_Start+0x19c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d105      	bne.n	8000e46 <HAL_ADC_Start+0x106>
 8000e3a:	4b26      	ldr	r3, [pc, #152]	@ (8000ed4 <HAL_ADC_Start+0x194>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 031f 	and.w	r3, r3, #31
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00a      	beq.n	8000e5c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a25      	ldr	r2, [pc, #148]	@ (8000ee0 <HAL_ADC_Start+0x1a0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d136      	bne.n	8000ebe <HAL_ADC_Start+0x17e>
 8000e50:	4b20      	ldr	r3, [pc, #128]	@ (8000ed4 <HAL_ADC_Start+0x194>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0310 	and.w	r3, r3, #16
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d130      	bne.n	8000ebe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d129      	bne.n	8000ebe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	e020      	b.n	8000ebe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a15      	ldr	r2, [pc, #84]	@ (8000ed8 <HAL_ADC_Start+0x198>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d11b      	bne.n	8000ebe <HAL_ADC_Start+0x17e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d114      	bne.n	8000ebe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	e00b      	b.n	8000ebe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	f043 0210 	orr.w	r2, r3, #16
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	f043 0201 	orr.w	r2, r3, #1
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	431bde83 	.word	0x431bde83
 8000ed4:	40012300 	.word	0x40012300
 8000ed8:	40012000 	.word	0x40012000
 8000edc:	40012100 	.word	0x40012100
 8000ee0:	40012200 	.word	0x40012200

08000ee4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000efc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f00:	d113      	bne.n	8000f2a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f10:	d10b      	bne.n	8000f2a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f16:	f043 0220 	orr.w	r2, r3, #32
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e063      	b.n	8000ff2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f2a:	f7ff fe95 	bl	8000c58 <HAL_GetTick>
 8000f2e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f30:	e021      	b.n	8000f76 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f38:	d01d      	beq.n	8000f76 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d007      	beq.n	8000f50 <HAL_ADC_PollForConversion+0x6c>
 8000f40:	f7ff fe8a 	bl	8000c58 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d212      	bcs.n	8000f76 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d00b      	beq.n	8000f76 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f62:	f043 0204 	orr.w	r2, r3, #4
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e03d      	b.n	8000ff2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d1d6      	bne.n	8000f32 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f06f 0212 	mvn.w	r2, #18
 8000f8c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f92:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d123      	bne.n	8000ff0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d11f      	bne.n	8000ff0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d006      	beq.n	8000fcc <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d111      	bne.n	8000ff0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d105      	bne.n	8000ff0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	f043 0201 	orr.w	r2, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001028:	2b01      	cmp	r3, #1
 800102a:	d101      	bne.n	8001030 <HAL_ADC_ConfigChannel+0x1c>
 800102c:	2302      	movs	r3, #2
 800102e:	e105      	b.n	800123c <HAL_ADC_ConfigChannel+0x228>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b09      	cmp	r3, #9
 800103e:	d925      	bls.n	800108c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68d9      	ldr	r1, [r3, #12]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	461a      	mov	r2, r3
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	3b1e      	subs	r3, #30
 8001056:	2207      	movs	r2, #7
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43da      	mvns	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	400a      	ands	r2, r1
 8001064:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68d9      	ldr	r1, [r3, #12]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	b29b      	uxth	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	4603      	mov	r3, r0
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4403      	add	r3, r0
 800107e:	3b1e      	subs	r3, #30
 8001080:	409a      	lsls	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	430a      	orrs	r2, r1
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	e022      	b.n	80010d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6919      	ldr	r1, [r3, #16]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	b29b      	uxth	r3, r3
 8001098:	461a      	mov	r2, r3
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	2207      	movs	r2, #7
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	400a      	ands	r2, r1
 80010ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6919      	ldr	r1, [r3, #16]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	4603      	mov	r3, r0
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4403      	add	r3, r0
 80010c8:	409a      	lsls	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d824      	bhi.n	8001124 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	3b05      	subs	r3, #5
 80010ec:	221f      	movs	r2, #31
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	400a      	ands	r2, r1
 80010fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	4618      	mov	r0, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	3b05      	subs	r3, #5
 8001116:	fa00 f203 	lsl.w	r2, r0, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	430a      	orrs	r2, r1
 8001120:	635a      	str	r2, [r3, #52]	@ 0x34
 8001122:	e04c      	b.n	80011be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b0c      	cmp	r3, #12
 800112a:	d824      	bhi.n	8001176 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	3b23      	subs	r3, #35	@ 0x23
 800113e:	221f      	movs	r2, #31
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43da      	mvns	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	400a      	ands	r2, r1
 800114c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	b29b      	uxth	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	3b23      	subs	r3, #35	@ 0x23
 8001168:	fa00 f203 	lsl.w	r2, r0, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	631a      	str	r2, [r3, #48]	@ 0x30
 8001174:	e023      	b.n	80011be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	3b41      	subs	r3, #65	@ 0x41
 8001188:	221f      	movs	r2, #31
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	400a      	ands	r2, r1
 8001196:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	3b41      	subs	r3, #65	@ 0x41
 80011b2:	fa00 f203 	lsl.w	r2, r0, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011be:	4b22      	ldr	r3, [pc, #136]	@ (8001248 <HAL_ADC_ConfigChannel+0x234>)
 80011c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a21      	ldr	r2, [pc, #132]	@ (800124c <HAL_ADC_ConfigChannel+0x238>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d109      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1cc>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b12      	cmp	r3, #18
 80011d2:	d105      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a19      	ldr	r2, [pc, #100]	@ (800124c <HAL_ADC_ConfigChannel+0x238>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d123      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x21e>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b10      	cmp	r3, #16
 80011f0:	d003      	beq.n	80011fa <HAL_ADC_ConfigChannel+0x1e6>
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b11      	cmp	r3, #17
 80011f8:	d11b      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b10      	cmp	r3, #16
 800120c:	d111      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <HAL_ADC_ConfigChannel+0x23c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a10      	ldr	r2, [pc, #64]	@ (8001254 <HAL_ADC_ConfigChannel+0x240>)
 8001214:	fba2 2303 	umull	r2, r3, r2, r3
 8001218:	0c9a      	lsrs	r2, r3, #18
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001224:	e002      	b.n	800122c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	3b01      	subs	r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f9      	bne.n	8001226 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	40012300 	.word	0x40012300
 800124c:	40012000 	.word	0x40012000
 8001250:	20000000 	.word	0x20000000
 8001254:	431bde83 	.word	0x431bde83

08001258 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001260:	4b79      	ldr	r3, [pc, #484]	@ (8001448 <ADC_Init+0x1f0>)
 8001262:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	431a      	orrs	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800128c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6859      	ldr	r1, [r3, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	021a      	lsls	r2, r3, #8
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80012b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6859      	ldr	r1, [r3, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6899      	ldr	r1, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ea:	4a58      	ldr	r2, [pc, #352]	@ (800144c <ADC_Init+0x1f4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d022      	beq.n	8001336 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6899      	ldr	r1, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001320:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6899      	ldr	r1, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	e00f      	b.n	8001356 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001344:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001354:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0202 	bic.w	r2, r2, #2
 8001364:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6899      	ldr	r1, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7e1b      	ldrb	r3, [r3, #24]
 8001370:	005a      	lsls	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d01b      	beq.n	80013bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001392:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80013a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6859      	ldr	r1, [r3, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ae:	3b01      	subs	r3, #1
 80013b0:	035a      	lsls	r2, r3, #13
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	e007      	b.n	80013cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013ca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80013da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	051a      	lsls	r2, r3, #20
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6899      	ldr	r1, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800140e:	025a      	lsls	r2, r3, #9
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001426:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6899      	ldr	r1, [r3, #8]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	029a      	lsls	r2, r3, #10
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	609a      	str	r2, [r3, #8]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	40012300 	.word	0x40012300
 800144c:	0f000001 	.word	0x0f000001

08001450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800146c:	4013      	ands	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001478:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800147c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001482:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	60d3      	str	r3, [r2, #12]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800149c:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <__NVIC_GetPriorityGrouping+0x18>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	f003 0307 	and.w	r3, r3, #7
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	db0b      	blt.n	80014de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 021f 	and.w	r2, r3, #31
 80014cc:	4907      	ldr	r1, [pc, #28]	@ (80014ec <__NVIC_EnableIRQ+0x38>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	2001      	movs	r0, #1
 80014d6:	fa00 f202 	lsl.w	r2, r0, r2
 80014da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000e100 	.word	0xe000e100

080014f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db0a      	blt.n	800151a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	490c      	ldr	r1, [pc, #48]	@ (800153c <__NVIC_SetPriority+0x4c>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	440b      	add	r3, r1
 8001514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001518:	e00a      	b.n	8001530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4908      	ldr	r1, [pc, #32]	@ (8001540 <__NVIC_SetPriority+0x50>)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	3b04      	subs	r3, #4
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	440b      	add	r3, r1
 800152e:	761a      	strb	r2, [r3, #24]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	@ 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2b04      	cmp	r3, #4
 8001560:	bf28      	it	cs
 8001562:	2304      	movcs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3304      	adds	r3, #4
 800156a:	2b06      	cmp	r3, #6
 800156c:	d902      	bls.n	8001574 <NVIC_EncodePriority+0x30>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3b03      	subs	r3, #3
 8001572:	e000      	b.n	8001576 <NVIC_EncodePriority+0x32>
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	f04f 32ff 	mov.w	r2, #4294967295
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43d9      	mvns	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	4313      	orrs	r3, r2
         );
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	@ 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015bc:	d301      	bcc.n	80015c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015be:	2301      	movs	r3, #1
 80015c0:	e00f      	b.n	80015e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c2:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <SysTick_Config+0x40>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ca:	210f      	movs	r1, #15
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f7ff ff8e 	bl	80014f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d4:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <SysTick_Config+0x40>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015da:	4b04      	ldr	r3, [pc, #16]	@ (80015ec <SysTick_Config+0x40>)
 80015dc:	2207      	movs	r2, #7
 80015de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	e000e010 	.word	0xe000e010

080015f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff29 	bl	8001450 <__NVIC_SetPriorityGrouping>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001618:	f7ff ff3e 	bl	8001498 <__NVIC_GetPriorityGrouping>
 800161c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff ff8e 	bl	8001544 <NVIC_EncodePriority>
 8001628:	4602      	mov	r2, r0
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff5d 	bl	80014f0 <__NVIC_SetPriority>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff31 	bl	80014b4 <__NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffa2 	bl	80015ac <SysTick_Config>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	@ 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	e16b      	b.n	8001968 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001690:	2201      	movs	r2, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	f040 815a 	bne.w	8001962 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d005      	beq.n	80016c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d130      	bne.n	8001728 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	2203      	movs	r2, #3
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 0201 	and.w	r2, r3, #1
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b03      	cmp	r3, #3
 8001732:	d017      	beq.n	8001764 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d123      	bne.n	80017b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	08da      	lsrs	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3208      	adds	r2, #8
 8001778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	220f      	movs	r2, #15
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	08da      	lsrs	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3208      	adds	r2, #8
 80017b2:	69b9      	ldr	r1, [r7, #24]
 80017b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	2203      	movs	r2, #3
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0203 	and.w	r2, r3, #3
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80b4 	beq.w	8001962 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b60      	ldr	r3, [pc, #384]	@ (8001980 <HAL_GPIO_Init+0x30c>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	4a5f      	ldr	r2, [pc, #380]	@ (8001980 <HAL_GPIO_Init+0x30c>)
 8001804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001808:	6453      	str	r3, [r2, #68]	@ 0x44
 800180a:	4b5d      	ldr	r3, [pc, #372]	@ (8001980 <HAL_GPIO_Init+0x30c>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001816:	4a5b      	ldr	r2, [pc, #364]	@ (8001984 <HAL_GPIO_Init+0x310>)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3302      	adds	r3, #2
 800181e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	220f      	movs	r2, #15
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a52      	ldr	r2, [pc, #328]	@ (8001988 <HAL_GPIO_Init+0x314>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d02b      	beq.n	800189a <HAL_GPIO_Init+0x226>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a51      	ldr	r2, [pc, #324]	@ (800198c <HAL_GPIO_Init+0x318>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d025      	beq.n	8001896 <HAL_GPIO_Init+0x222>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a50      	ldr	r2, [pc, #320]	@ (8001990 <HAL_GPIO_Init+0x31c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d01f      	beq.n	8001892 <HAL_GPIO_Init+0x21e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4f      	ldr	r2, [pc, #316]	@ (8001994 <HAL_GPIO_Init+0x320>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d019      	beq.n	800188e <HAL_GPIO_Init+0x21a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4e      	ldr	r2, [pc, #312]	@ (8001998 <HAL_GPIO_Init+0x324>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0x216>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4d      	ldr	r2, [pc, #308]	@ (800199c <HAL_GPIO_Init+0x328>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00d      	beq.n	8001886 <HAL_GPIO_Init+0x212>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4c      	ldr	r2, [pc, #304]	@ (80019a0 <HAL_GPIO_Init+0x32c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d007      	beq.n	8001882 <HAL_GPIO_Init+0x20e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4b      	ldr	r2, [pc, #300]	@ (80019a4 <HAL_GPIO_Init+0x330>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_GPIO_Init+0x20a>
 800187a:	2307      	movs	r3, #7
 800187c:	e00e      	b.n	800189c <HAL_GPIO_Init+0x228>
 800187e:	2308      	movs	r3, #8
 8001880:	e00c      	b.n	800189c <HAL_GPIO_Init+0x228>
 8001882:	2306      	movs	r3, #6
 8001884:	e00a      	b.n	800189c <HAL_GPIO_Init+0x228>
 8001886:	2305      	movs	r3, #5
 8001888:	e008      	b.n	800189c <HAL_GPIO_Init+0x228>
 800188a:	2304      	movs	r3, #4
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x228>
 800188e:	2303      	movs	r3, #3
 8001890:	e004      	b.n	800189c <HAL_GPIO_Init+0x228>
 8001892:	2302      	movs	r3, #2
 8001894:	e002      	b.n	800189c <HAL_GPIO_Init+0x228>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x228>
 800189a:	2300      	movs	r3, #0
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	f002 0203 	and.w	r2, r2, #3
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	4093      	lsls	r3, r2
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ac:	4935      	ldr	r1, [pc, #212]	@ (8001984 <HAL_GPIO_Init+0x310>)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ba:	4b3b      	ldr	r3, [pc, #236]	@ (80019a8 <HAL_GPIO_Init+0x334>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018de:	4a32      	ldr	r2, [pc, #200]	@ (80019a8 <HAL_GPIO_Init+0x334>)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e4:	4b30      	ldr	r3, [pc, #192]	@ (80019a8 <HAL_GPIO_Init+0x334>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001908:	4a27      	ldr	r2, [pc, #156]	@ (80019a8 <HAL_GPIO_Init+0x334>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800190e:	4b26      	ldr	r3, [pc, #152]	@ (80019a8 <HAL_GPIO_Init+0x334>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001932:	4a1d      	ldr	r2, [pc, #116]	@ (80019a8 <HAL_GPIO_Init+0x334>)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001938:	4b1b      	ldr	r3, [pc, #108]	@ (80019a8 <HAL_GPIO_Init+0x334>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800195c:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <HAL_GPIO_Init+0x334>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3301      	adds	r3, #1
 8001966:	61fb      	str	r3, [r7, #28]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	2b0f      	cmp	r3, #15
 800196c:	f67f ae90 	bls.w	8001690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3724      	adds	r7, #36	@ 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40013800 	.word	0x40013800
 8001988:	40020000 	.word	0x40020000
 800198c:	40020400 	.word	0x40020400
 8001990:	40020800 	.word	0x40020800
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40021000 	.word	0x40021000
 800199c:	40021400 	.word	0x40021400
 80019a0:	40021800 	.word	0x40021800
 80019a4:	40021c00 	.word	0x40021c00
 80019a8:	40013c00 	.word	0x40013c00

080019ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
 80019b8:	4613      	mov	r3, r2
 80019ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019bc:	787b      	ldrb	r3, [r7, #1]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019c8:	e003      	b.n	80019d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ca:	887b      	ldrh	r3, [r7, #2]
 80019cc:	041a      	lsls	r2, r3, #16
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	619a      	str	r2, [r3, #24]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af02      	add	r7, sp, #8
 80019e4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e101      	b.n	8001bf4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d106      	bne.n	8001a10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f005 fbac 	bl	8007168 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2203      	movs	r2, #3
 8001a14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a1e:	d102      	bne.n	8001a26 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 ffaf 	bl	800398e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7c1a      	ldrb	r2, [r3, #16]
 8001a38:	f88d 2000 	strb.w	r2, [sp]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a40:	f001 fe8e 	bl	8003760 <USB_CoreInit>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0ce      	b.n	8001bf4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 ffa7 	bl	80039b0 <USB_SetCurrentMode>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0bf      	b.n	8001bf4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	e04a      	b.n	8001b10 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	3315      	adds	r3, #21
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3314      	adds	r3, #20
 8001a9e:	7bfa      	ldrb	r2, [r7, #15]
 8001aa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001aa2:	7bfa      	ldrb	r2, [r7, #15]
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	b298      	uxth	r0, r3
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	332e      	adds	r3, #46	@ 0x2e
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3318      	adds	r3, #24
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ace:	7bfa      	ldrb	r2, [r7, #15]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	331c      	adds	r3, #28
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	3320      	adds	r3, #32
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	3324      	adds	r3, #36	@ 0x24
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	791b      	ldrb	r3, [r3, #4]
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d3af      	bcc.n	8001a7a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	e044      	b.n	8001baa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b20:	7bfa      	ldrb	r2, [r7, #15]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b36:	7bfa      	ldrb	r2, [r7, #15]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001b48:	7bfa      	ldrb	r2, [r7, #15]
 8001b4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b4c:	7bfa      	ldrb	r2, [r7, #15]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b8e:	7bfa      	ldrb	r2, [r7, #15]
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	73fb      	strb	r3, [r7, #15]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	791b      	ldrb	r3, [r3, #4]
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d3b5      	bcc.n	8001b20 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7c1a      	ldrb	r2, [r3, #16]
 8001bbc:	f88d 2000 	strb.w	r2, [sp]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bc4:	f001 ff40 	bl	8003a48 <USB_DevInit>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00c      	b.n	8001bf4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f002 ff84 	bl	8004afa <USB_DevDisconnect>

  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_PCD_Start+0x1c>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e022      	b.n	8001c5e <HAL_PCD_Start+0x62>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d009      	beq.n	8001c40 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d105      	bne.n	8001c40 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f001 fe91 	bl	800396c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 ff32 	bl	8004ab8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c66:	b590      	push	{r4, r7, lr}
 8001c68:	b08d      	sub	sp, #52	@ 0x34
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f002 fff0 	bl	8004c62 <USB_GetMode>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f040 848c 	bne.w	80025a2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 ff54 	bl	8004b3c <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8482 	beq.w	80025a0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f002 ff41 	bl	8004b3c <USB_ReadInterrupts>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d107      	bne.n	8001cd4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f002 0202 	and.w	r2, r2, #2
 8001cd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f002 ff2f 	bl	8004b3c <USB_ReadInterrupts>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2b10      	cmp	r3, #16
 8001ce6:	d161      	bne.n	8001dac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699a      	ldr	r2, [r3, #24]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0210 	bic.w	r2, r2, #16
 8001cf6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f003 020f 	and.w	r2, r3, #15
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	3304      	adds	r3, #4
 8001d16:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	0c5b      	lsrs	r3, r3, #17
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d124      	bne.n	8001d6e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d035      	beq.n	8001d9c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	091b      	lsrs	r3, r3, #4
 8001d38:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	6a38      	ldr	r0, [r7, #32]
 8001d44:	f002 fd66 	bl	8004814 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	091b      	lsrs	r3, r3, #4
 8001d50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d54:	441a      	add	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d66:	441a      	add	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	615a      	str	r2, [r3, #20]
 8001d6c:	e016      	b.n	8001d9c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	0c5b      	lsrs	r3, r3, #17
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d110      	bne.n	8001d9c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d80:	2208      	movs	r2, #8
 8001d82:	4619      	mov	r1, r3
 8001d84:	6a38      	ldr	r0, [r7, #32]
 8001d86:	f002 fd45 	bl	8004814 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d96:	441a      	add	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699a      	ldr	r2, [r3, #24]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0210 	orr.w	r2, r2, #16
 8001daa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f002 fec3 	bl	8004b3c <USB_ReadInterrupts>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dbc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001dc0:	f040 80a7 	bne.w	8001f12 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f002 fec8 	bl	8004b62 <USB_ReadDevAllOutEpInterrupt>
 8001dd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001dd4:	e099      	b.n	8001f0a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 808e 	beq.w	8001efe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f002 feec 	bl	8004bca <USB_ReadDevOutEPInterrupt>
 8001df2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00c      	beq.n	8001e18 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fea2 	bl	8002b5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00c      	beq.n	8001e3c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2308      	movs	r3, #8
 8001e32:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 ff78 	bl	8002d2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d008      	beq.n	8001e58 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e52:	461a      	mov	r2, r3
 8001e54:	2310      	movs	r3, #16
 8001e56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d030      	beq.n	8001ec4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6a:	2b80      	cmp	r3, #128	@ 0x80
 8001e6c:	d109      	bne.n	8001e82 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e80:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4413      	add	r3, r2
 8001e94:	3304      	adds	r3, #4
 8001e96:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	78db      	ldrb	r3, [r3, #3]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d108      	bne.n	8001eb2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f005 fa61 	bl	8007374 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d008      	beq.n	8001ee0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eda:	461a      	mov	r2, r3
 8001edc:	2320      	movs	r3, #32
 8001ede:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d009      	beq.n	8001efe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001efc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	3301      	adds	r3, #1
 8001f02:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f06:	085b      	lsrs	r3, r3, #1
 8001f08:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f47f af62 	bne.w	8001dd6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f002 fe10 	bl	8004b3c <USB_ReadInterrupts>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001f26:	f040 80db 	bne.w	80020e0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f002 fe31 	bl	8004b96 <USB_ReadDevAllInEpInterrupt>
 8001f34:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001f3a:	e0cd      	b.n	80020d8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 80c2 	beq.w	80020cc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 fe57 	bl	8004c06 <USB_ReadDevInEPInterrupt>
 8001f58:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d057      	beq.n	8002014 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69f9      	ldr	r1, [r7, #28]
 8001f80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001f84:	4013      	ands	r3, r2
 8001f86:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f94:	461a      	mov	r2, r3
 8001f96:	2301      	movs	r3, #1
 8001f98:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	799b      	ldrb	r3, [r3, #6]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d132      	bne.n	8002008 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	3320      	adds	r3, #32
 8001fb2:	6819      	ldr	r1, [r3, #0]
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4403      	add	r3, r0
 8001fc2:	331c      	adds	r3, #28
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4419      	add	r1, r3
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4403      	add	r3, r0
 8001fd6:	3320      	adds	r3, #32
 8001fd8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d113      	bne.n	8002008 <HAL_PCD_IRQHandler+0x3a2>
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	3324      	adds	r3, #36	@ 0x24
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d108      	bne.n	8002008 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002000:	461a      	mov	r2, r3
 8002002:	2101      	movs	r1, #1
 8002004:	f002 fe5e 	bl	8004cc4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	b2db      	uxtb	r3, r3
 800200c:	4619      	mov	r1, r3
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f005 f92b 	bl	800726a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800202a:	461a      	mov	r2, r3
 800202c:	2308      	movs	r3, #8
 800202e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	4413      	add	r3, r2
 8002042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002046:	461a      	mov	r2, r3
 8002048:	2310      	movs	r3, #16
 800204a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002052:	2b00      	cmp	r3, #0
 8002054:	d008      	beq.n	8002068 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	4413      	add	r3, r2
 800205e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002062:	461a      	mov	r2, r3
 8002064:	2340      	movs	r3, #64	@ 0x40
 8002066:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d023      	beq.n	80020ba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002072:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002074:	6a38      	ldr	r0, [r7, #32]
 8002076:	f001 fe4b 	bl	8003d10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800207a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	3310      	adds	r3, #16
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	3304      	adds	r3, #4
 800208c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	78db      	ldrb	r3, [r3, #3]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d108      	bne.n	80020a8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2200      	movs	r2, #0
 800209a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	4619      	mov	r1, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f005 f978 	bl	8007398 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020b4:	461a      	mov	r2, r3
 80020b6:	2302      	movs	r3, #2
 80020b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80020c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fcbb 	bl	8002a42 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	3301      	adds	r3, #1
 80020d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80020d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80020d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f47f af2e 	bne.w	8001f3c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 fd29 	bl	8004b3c <USB_ReadInterrupts>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80020f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020f4:	d122      	bne.n	800213c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002110:	2b01      	cmp	r3, #1
 8002112:	d108      	bne.n	8002126 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800211c:	2100      	movs	r1, #0
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fea2 	bl	8002e68 <HAL_PCDEx_LPM_Callback>
 8002124:	e002      	b.n	800212c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f005 f916 	bl	8007358 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800213a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f002 fcfb 	bl	8004b3c <USB_ReadInterrupts>
 8002146:	4603      	mov	r3, r0
 8002148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800214c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002150:	d112      	bne.n	8002178 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b01      	cmp	r3, #1
 8002160:	d102      	bne.n	8002168 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f005 f8d2 	bl	800730c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002176:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f002 fcdd 	bl	8004b3c <USB_ReadInterrupts>
 8002182:	4603      	mov	r3, r0
 8002184:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800218c:	f040 80b7 	bne.w	80022fe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2110      	movs	r1, #16
 80021aa:	4618      	mov	r0, r3
 80021ac:	f001 fdb0 	bl	8003d10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021b4:	e046      	b.n	8002244 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021c2:	461a      	mov	r2, r3
 80021c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80021c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80021ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021da:	0151      	lsls	r1, r2, #5
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	440a      	add	r2, r1
 80021e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80021e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80021e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80021ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021f6:	461a      	mov	r2, r3
 80021f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80021fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80021fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800220e:	0151      	lsls	r1, r2, #5
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	440a      	add	r2, r1
 8002214:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002218:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800221c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800221e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	4413      	add	r3, r2
 8002226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800222e:	0151      	lsls	r1, r2, #5
 8002230:	69fa      	ldr	r2, [r7, #28]
 8002232:	440a      	add	r2, r1
 8002234:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002238:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800223c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800223e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002240:	3301      	adds	r3, #1
 8002242:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	791b      	ldrb	r3, [r3, #4]
 8002248:	461a      	mov	r2, r3
 800224a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800224c:	4293      	cmp	r3, r2
 800224e:	d3b2      	bcc.n	80021b6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800225e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002262:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7bdb      	ldrb	r3, [r3, #15]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d016      	beq.n	800229a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800227c:	f043 030b 	orr.w	r3, r3, #11
 8002280:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800228a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002292:	f043 030b 	orr.w	r3, r3, #11
 8002296:	6453      	str	r3, [r2, #68]	@ 0x44
 8002298:	e015      	b.n	80022c6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022ac:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80022b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022c0:	f043 030b 	orr.w	r3, r3, #11
 80022c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022d4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80022d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022e8:	461a      	mov	r2, r3
 80022ea:	f002 fceb 	bl	8004cc4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80022fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f002 fc1a 	bl	8004b3c <USB_ReadInterrupts>
 8002308:	4603      	mov	r3, r0
 800230a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800230e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002312:	d123      	bne.n	800235c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f002 fcb0 	bl	8004c7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f001 fd6d 	bl	8003e02 <USB_GetDevSpeed>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681c      	ldr	r4, [r3, #0]
 8002334:	f001 fa08 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 8002338:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800233e:	461a      	mov	r2, r3
 8002340:	4620      	mov	r0, r4
 8002342:	f001 fa71 	bl	8003828 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f004 ffb7 	bl	80072ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800235a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f002 fbeb 	bl	8004b3c <USB_ReadInterrupts>
 8002366:	4603      	mov	r3, r0
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b08      	cmp	r3, #8
 800236e:	d10a      	bne.n	8002386 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f004 ff94 	bl	800729e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f002 0208 	and.w	r2, r2, #8
 8002384:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fbd6 	bl	8004b3c <USB_ReadInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002396:	2b80      	cmp	r3, #128	@ 0x80
 8002398:	d123      	bne.n	80023e2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023a6:	2301      	movs	r3, #1
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023aa:	e014      	b.n	80023d6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	4619      	mov	r1, r3
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fb08 	bl	80029e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d2:	3301      	adds	r3, #1
 80023d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	791b      	ldrb	r3, [r3, #4]
 80023da:	461a      	mov	r2, r3
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	4293      	cmp	r3, r2
 80023e0:	d3e4      	bcc.n	80023ac <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f002 fba8 	bl	8004b3c <USB_ReadInterrupts>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023f6:	d13c      	bne.n	8002472 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023f8:	2301      	movs	r3, #1
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80023fc:	e02b      	b.n	8002456 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	4413      	add	r3, r2
 8002406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	3318      	adds	r3, #24
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d115      	bne.n	8002450 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002424:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002426:	2b00      	cmp	r3, #0
 8002428:	da12      	bge.n	8002450 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	3317      	adds	r3, #23
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002446:	b2db      	uxtb	r3, r3
 8002448:	4619      	mov	r1, r3
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fac8 	bl	80029e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	3301      	adds	r3, #1
 8002454:	627b      	str	r3, [r7, #36]	@ 0x24
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	791b      	ldrb	r3, [r3, #4]
 800245a:	461a      	mov	r2, r3
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	4293      	cmp	r3, r2
 8002460:	d3cd      	bcc.n	80023fe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002470:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f002 fb60 	bl	8004b3c <USB_ReadInterrupts>
 800247c:	4603      	mov	r3, r0
 800247e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002482:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002486:	d156      	bne.n	8002536 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002488:	2301      	movs	r3, #1
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
 800248c:	e045      	b.n	800251a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	4413      	add	r3, r2
 8002496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d12e      	bne.n	8002514 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	da2b      	bge.n	8002514 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80024c8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d121      	bne.n	8002514 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d4:	4613      	mov	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10a      	bne.n	8002514 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800250c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002510:	6053      	str	r3, [r2, #4]
            break;
 8002512:	e008      	b.n	8002526 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	3301      	adds	r3, #1
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	791b      	ldrb	r3, [r3, #4]
 800251e:	461a      	mov	r2, r3
 8002520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002522:	4293      	cmp	r3, r2
 8002524:	d3b3      	bcc.n	800248e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002534:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f002 fafe 	bl	8004b3c <USB_ReadInterrupts>
 8002540:	4603      	mov	r3, r0
 8002542:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800254a:	d10a      	bne.n	8002562 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f004 ff35 	bl	80073bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002560:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f002 fae8 	bl	8004b3c <USB_ReadInterrupts>
 800256c:	4603      	mov	r3, r0
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b04      	cmp	r3, #4
 8002574:	d115      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f004 ff25 	bl	80073d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6859      	ldr	r1, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	e000      	b.n	80025a2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80025a0:	bf00      	nop
    }
  }
}
 80025a2:	3734      	adds	r7, #52	@ 0x34
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd90      	pop	{r4, r7, pc}

080025a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_PCD_SetAddress+0x1a>
 80025be:	2302      	movs	r3, #2
 80025c0:	e012      	b.n	80025e8 <HAL_PCD_SetAddress+0x40>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f002 fa47 	bl	8004a6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	4608      	mov	r0, r1
 80025fa:	4611      	mov	r1, r2
 80025fc:	461a      	mov	r2, r3
 80025fe:	4603      	mov	r3, r0
 8002600:	70fb      	strb	r3, [r7, #3]
 8002602:	460b      	mov	r3, r1
 8002604:	803b      	strh	r3, [r7, #0]
 8002606:	4613      	mov	r3, r2
 8002608:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800260e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002612:	2b00      	cmp	r3, #0
 8002614:	da0f      	bge.n	8002636 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	f003 020f 	and.w	r2, r3, #15
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	3310      	adds	r3, #16
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	3304      	adds	r3, #4
 800262c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	705a      	strb	r2, [r3, #1]
 8002634:	e00f      	b.n	8002656 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	f003 020f 	and.w	r2, r3, #15
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	4413      	add	r3, r2
 800264c:	3304      	adds	r3, #4
 800264e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	b2da      	uxtb	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002662:	883a      	ldrh	r2, [r7, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	78ba      	ldrb	r2, [r7, #2]
 800266c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	785b      	ldrb	r3, [r3, #1]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d004      	beq.n	8002680 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002680:	78bb      	ldrb	r3, [r7, #2]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d102      	bne.n	800268c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_PCD_EP_Open+0xaa>
 8002696:	2302      	movs	r3, #2
 8002698:	e00e      	b.n	80026b8 <HAL_PCD_EP_Open+0xc8>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68f9      	ldr	r1, [r7, #12]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 fbcf 	bl	8003e4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80026b6:	7afb      	ldrb	r3, [r7, #11]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	da0f      	bge.n	80026f4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	f003 020f 	and.w	r2, r3, #15
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	3310      	adds	r3, #16
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4413      	add	r3, r2
 80026e8:	3304      	adds	r3, #4
 80026ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	705a      	strb	r2, [r3, #1]
 80026f2:	e00f      	b.n	8002714 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	f003 020f 	and.w	r2, r3, #15
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	3304      	adds	r3, #4
 800270c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	b2da      	uxtb	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_PCD_EP_Close+0x6e>
 800272a:	2302      	movs	r3, #2
 800272c:	e00e      	b.n	800274c <HAL_PCD_EP_Close+0x8c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68f9      	ldr	r1, [r7, #12]
 800273c:	4618      	mov	r0, r3
 800273e:	f001 fc0d 	bl	8003f5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	460b      	mov	r3, r1
 8002762:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002764:	7afb      	ldrb	r3, [r7, #11]
 8002766:	f003 020f 	and.w	r2, r3, #15
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4413      	add	r3, r2
 800277a:	3304      	adds	r3, #4
 800277c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2200      	movs	r2, #0
 800278e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2200      	movs	r2, #0
 8002794:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002796:	7afb      	ldrb	r3, [r7, #11]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	b2da      	uxtb	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	799b      	ldrb	r3, [r3, #6]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d102      	bne.n	80027b0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	799b      	ldrb	r3, [r3, #6]
 80027b8:	461a      	mov	r2, r3
 80027ba:	6979      	ldr	r1, [r7, #20]
 80027bc:	f001 fcaa 	bl	8004114 <USB_EPStartXfer>

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	f003 020f 	and.w	r2, r3, #15
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80027ec:	681b      	ldr	r3, [r3, #0]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	460b      	mov	r3, r1
 8002808:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800280a:	7afb      	ldrb	r3, [r7, #11]
 800280c:	f003 020f 	and.w	r2, r3, #15
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	3310      	adds	r3, #16
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4413      	add	r3, r2
 800281e:	3304      	adds	r3, #4
 8002820:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2200      	movs	r2, #0
 8002832:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2201      	movs	r2, #1
 8002838:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800283a:	7afb      	ldrb	r3, [r7, #11]
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	b2da      	uxtb	r2, r3
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	799b      	ldrb	r3, [r3, #6]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d102      	bne.n	8002854 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	799b      	ldrb	r3, [r3, #6]
 800285c:	461a      	mov	r2, r3
 800285e:	6979      	ldr	r1, [r7, #20]
 8002860:	f001 fc58 	bl	8004114 <USB_EPStartXfer>

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	460b      	mov	r3, r1
 8002878:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	7912      	ldrb	r2, [r2, #4]
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e04f      	b.n	800292c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800288c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002890:	2b00      	cmp	r3, #0
 8002892:	da0f      	bge.n	80028b4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	f003 020f 	and.w	r2, r3, #15
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	3310      	adds	r3, #16
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	4413      	add	r3, r2
 80028a8:	3304      	adds	r3, #4
 80028aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2201      	movs	r2, #1
 80028b0:	705a      	strb	r2, [r3, #1]
 80028b2:	e00d      	b.n	80028d0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	3304      	adds	r3, #4
 80028c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2201      	movs	r2, #1
 80028d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_PCD_EP_SetStall+0x82>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e01d      	b.n	800292c <HAL_PCD_EP_SetStall+0xbe>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68f9      	ldr	r1, [r7, #12]
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 ffe0 	bl	80048c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7999      	ldrb	r1, [r3, #6]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800291c:	461a      	mov	r2, r3
 800291e:	f002 f9d1 	bl	8004cc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	7912      	ldrb	r2, [r2, #4]
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e042      	b.n	80029d8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002956:	2b00      	cmp	r3, #0
 8002958:	da0f      	bge.n	800297a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	f003 020f 	and.w	r2, r3, #15
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	3310      	adds	r3, #16
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	3304      	adds	r3, #4
 8002970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	705a      	strb	r2, [r3, #1]
 8002978:	e00f      	b.n	800299a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	f003 020f 	and.w	r2, r3, #15
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	3304      	adds	r3, #4
 8002992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_PCD_EP_ClrStall+0x86>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e00e      	b.n	80029d8 <HAL_PCD_EP_ClrStall+0xa4>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68f9      	ldr	r1, [r7, #12]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f001 ffe9 	bl	80049a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80029ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	da0c      	bge.n	8002a0e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	f003 020f 	and.w	r2, r3, #15
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	3310      	adds	r3, #16
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	4413      	add	r3, r2
 8002a08:	3304      	adds	r3, #4
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e00c      	b.n	8002a28 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	f003 020f 	and.w	r2, r3, #15
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	4413      	add	r3, r2
 8002a24:	3304      	adds	r3, #4
 8002a26:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68f9      	ldr	r1, [r7, #12]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f001 fe08 	bl	8004644 <USB_EPStopXfer>
 8002a34:	4603      	mov	r3, r0
 8002a36:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002a38:	7afb      	ldrb	r3, [r7, #11]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b08a      	sub	sp, #40	@ 0x28
 8002a46:	af02      	add	r7, sp, #8
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	3310      	adds	r3, #16
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	3304      	adds	r3, #4
 8002a68:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d901      	bls.n	8002a7a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e06b      	b.n	8002b52 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d902      	bls.n	8002a96 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3303      	adds	r3, #3
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a9e:	e02a      	b.n	8002af6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d902      	bls.n	8002abc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	3303      	adds	r3, #3
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68d9      	ldr	r1, [r3, #12]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6978      	ldr	r0, [r7, #20]
 8002ada:	f001 fe5d 	bl	8004798 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	441a      	add	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	441a      	add	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d809      	bhi.n	8002b20 <PCD_WriteEmptyTxFifo+0xde>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d203      	bcs.n	8002b20 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1bf      	bne.n	8002aa0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d811      	bhi.n	8002b50 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	2201      	movs	r2, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	6939      	ldr	r1, [r7, #16]
 8002b48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	333c      	adds	r3, #60	@ 0x3c
 8002b74:	3304      	adds	r3, #4
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	799b      	ldrb	r3, [r3, #6]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d17b      	bne.n	8002c8a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d015      	beq.n	8002bc8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	4a61      	ldr	r2, [pc, #388]	@ (8002d24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	f240 80b9 	bls.w	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80b3 	beq.w	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bc4:	6093      	str	r3, [r2, #8]
 8002bc6:	e0a7      	b.n	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bde:	461a      	mov	r2, r3
 8002be0:	2320      	movs	r3, #32
 8002be2:	6093      	str	r3, [r2, #8]
 8002be4:	e098      	b.n	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f040 8093 	bne.w	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	4a4b      	ldr	r2, [pc, #300]	@ (8002d24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d90f      	bls.n	8002c1a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c10:	461a      	mov	r2, r3
 8002c12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c16:	6093      	str	r3, [r2, #8]
 8002c18:	e07e      	b.n	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a1a      	ldr	r2, [r3, #32]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	0159      	lsls	r1, r3, #5
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c46:	1ad2      	subs	r2, r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d114      	bne.n	8002c7c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c64:	461a      	mov	r2, r3
 8002c66:	2101      	movs	r1, #1
 8002c68:	f002 f82c 	bl	8004cc4 <USB_EP0_OutStart>
 8002c6c:	e006      	b.n	8002c7c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	441a      	add	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	4619      	mov	r1, r3
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f004 fad6 	bl	8007234 <HAL_PCD_DataOutStageCallback>
 8002c88:	e046      	b.n	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	4a26      	ldr	r2, [pc, #152]	@ (8002d28 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d124      	bne.n	8002cdc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cae:	6093      	str	r3, [r2, #8]
 8002cb0:	e032      	b.n	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2320      	movs	r3, #32
 8002ccc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f004 faad 	bl	8007234 <HAL_PCD_DataOutStageCallback>
 8002cda:	e01d      	b.n	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d114      	bne.n	8002d0c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d108      	bne.n	8002d0c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d04:	461a      	mov	r2, r3
 8002d06:	2100      	movs	r1, #0
 8002d08:	f001 ffdc 	bl	8004cc4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	4619      	mov	r1, r3
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f004 fa8e 	bl	8007234 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	4f54300a 	.word	0x4f54300a
 8002d28:	4f54310a 	.word	0x4f54310a

08002d2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	333c      	adds	r3, #60	@ 0x3c
 8002d44:	3304      	adds	r3, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4a15      	ldr	r2, [pc, #84]	@ (8002db4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d90e      	bls.n	8002d80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d009      	beq.n	8002d80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f004 fa45 	bl	8007210 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4a0a      	ldr	r2, [pc, #40]	@ (8002db4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d90c      	bls.n	8002da8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	799b      	ldrb	r3, [r3, #6]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d108      	bne.n	8002da8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002da0:	461a      	mov	r2, r3
 8002da2:	2101      	movs	r1, #1
 8002da4:	f001 ff8e 	bl	8004cc4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	4f54300a 	.word	0x4f54300a

08002db8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	70fb      	strb	r3, [r7, #3]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d107      	bne.n	8002de6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002dd6:	883b      	ldrh	r3, [r7, #0]
 8002dd8:	0419      	lsls	r1, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002de4:	e028      	b.n	8002e38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	4413      	add	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]
 8002df8:	e00d      	b.n	8002e16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	3340      	adds	r3, #64	@ 0x40
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	3301      	adds	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d3ec      	bcc.n	8002dfa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e20:	883b      	ldrh	r3, [r7, #0]
 8002e22:	0418      	lsls	r0, r3, #16
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6819      	ldr	r1, [r3, #0]
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	4302      	orrs	r2, r0
 8002e30:	3340      	adds	r3, #64	@ 0x40
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e267      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d075      	beq.n	8002f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e9e:	4b88      	ldr	r3, [pc, #544]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eaa:	4b85      	ldr	r3, [pc, #532]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d112      	bne.n	8002edc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb6:	4b82      	ldr	r3, [pc, #520]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ebe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ec2:	d10b      	bne.n	8002edc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec4:	4b7e      	ldr	r3, [pc, #504]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d05b      	beq.n	8002f88 <HAL_RCC_OscConfig+0x108>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d157      	bne.n	8002f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e242      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee4:	d106      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x74>
 8002ee6:	4b76      	ldr	r3, [pc, #472]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a75      	ldr	r2, [pc, #468]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e01d      	b.n	8002f30 <HAL_RCC_OscConfig+0xb0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x98>
 8002efe:	4b70      	ldr	r3, [pc, #448]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a6f      	ldr	r2, [pc, #444]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a6c      	ldr	r2, [pc, #432]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e00b      	b.n	8002f30 <HAL_RCC_OscConfig+0xb0>
 8002f18:	4b69      	ldr	r3, [pc, #420]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a68      	ldr	r2, [pc, #416]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	4b66      	ldr	r3, [pc, #408]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a65      	ldr	r2, [pc, #404]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d013      	beq.n	8002f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fd fe8e 	bl	8000c58 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f40:	f7fd fe8a 	bl	8000c58 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	@ 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e207      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b5b      	ldr	r3, [pc, #364]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0xc0>
 8002f5e:	e014      	b.n	8002f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fd fe7a 	bl	8000c58 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fd fe76 	bl	8000c58 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	@ 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e1f3      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	4b51      	ldr	r3, [pc, #324]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0xe8>
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d063      	beq.n	800305e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f96:	4b4a      	ldr	r3, [pc, #296]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00b      	beq.n	8002fba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa2:	4b47      	ldr	r3, [pc, #284]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d11c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fae:	4b44      	ldr	r3, [pc, #272]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d116      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fba:	4b41      	ldr	r3, [pc, #260]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x152>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e1c7      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4937      	ldr	r1, [pc, #220]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	e03a      	b.n	800305e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d020      	beq.n	8003032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff0:	4b34      	ldr	r3, [pc, #208]	@ (80030c4 <HAL_RCC_OscConfig+0x244>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fd fe2f 	bl	8000c58 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7fd fe2b 	bl	8000c58 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e1a8      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003010:	4b2b      	ldr	r3, [pc, #172]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301c:	4b28      	ldr	r3, [pc, #160]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4925      	ldr	r1, [pc, #148]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]
 8003030:	e015      	b.n	800305e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003032:	4b24      	ldr	r3, [pc, #144]	@ (80030c4 <HAL_RCC_OscConfig+0x244>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fd fe0e 	bl	8000c58 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003040:	f7fd fe0a 	bl	8000c58 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e187      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d036      	beq.n	80030d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003072:	4b15      	ldr	r3, [pc, #84]	@ (80030c8 <HAL_RCC_OscConfig+0x248>)
 8003074:	2201      	movs	r2, #1
 8003076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003078:	f7fd fdee 	bl	8000c58 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003080:	f7fd fdea 	bl	8000c58 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e167      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003092:	4b0b      	ldr	r3, [pc, #44]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8003094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x200>
 800309e:	e01b      	b.n	80030d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a0:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <HAL_RCC_OscConfig+0x248>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a6:	f7fd fdd7 	bl	8000c58 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	e00e      	b.n	80030cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ae:	f7fd fdd3 	bl	8000c58 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d907      	bls.n	80030cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e150      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
 80030c0:	40023800 	.word	0x40023800
 80030c4:	42470000 	.word	0x42470000
 80030c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030cc:	4b88      	ldr	r3, [pc, #544]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 80030ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1ea      	bne.n	80030ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8097 	beq.w	8003214 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ea:	4b81      	ldr	r3, [pc, #516]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10f      	bne.n	8003116 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	4b7d      	ldr	r3, [pc, #500]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	4a7c      	ldr	r2, [pc, #496]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003104:	6413      	str	r3, [r2, #64]	@ 0x40
 8003106:	4b7a      	ldr	r3, [pc, #488]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b77      	ldr	r3, [pc, #476]	@ (80032f4 <HAL_RCC_OscConfig+0x474>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d118      	bne.n	8003154 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003122:	4b74      	ldr	r3, [pc, #464]	@ (80032f4 <HAL_RCC_OscConfig+0x474>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a73      	ldr	r2, [pc, #460]	@ (80032f4 <HAL_RCC_OscConfig+0x474>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800312c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312e:	f7fd fd93 	bl	8000c58 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fd fd8f 	bl	8000c58 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e10c      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b6a      	ldr	r3, [pc, #424]	@ (80032f4 <HAL_RCC_OscConfig+0x474>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x2ea>
 800315c:	4b64      	ldr	r3, [pc, #400]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003160:	4a63      	ldr	r2, [pc, #396]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6713      	str	r3, [r2, #112]	@ 0x70
 8003168:	e01c      	b.n	80031a4 <HAL_RCC_OscConfig+0x324>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b05      	cmp	r3, #5
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0x30c>
 8003172:	4b5f      	ldr	r3, [pc, #380]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003176:	4a5e      	ldr	r2, [pc, #376]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003178:	f043 0304 	orr.w	r3, r3, #4
 800317c:	6713      	str	r3, [r2, #112]	@ 0x70
 800317e:	4b5c      	ldr	r3, [pc, #368]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003182:	4a5b      	ldr	r2, [pc, #364]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6713      	str	r3, [r2, #112]	@ 0x70
 800318a:	e00b      	b.n	80031a4 <HAL_RCC_OscConfig+0x324>
 800318c:	4b58      	ldr	r3, [pc, #352]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003190:	4a57      	ldr	r2, [pc, #348]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	6713      	str	r3, [r2, #112]	@ 0x70
 8003198:	4b55      	ldr	r3, [pc, #340]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319c:	4a54      	ldr	r2, [pc, #336]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 800319e:	f023 0304 	bic.w	r3, r3, #4
 80031a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d015      	beq.n	80031d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fd fd54 	bl	8000c58 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fd fd50 	bl	8000c58 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0cb      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ca:	4b49      	ldr	r3, [pc, #292]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0ee      	beq.n	80031b4 <HAL_RCC_OscConfig+0x334>
 80031d6:	e014      	b.n	8003202 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d8:	f7fd fd3e 	bl	8000c58 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fd fd3a 	bl	8000c58 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e0b5      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f6:	4b3e      	ldr	r3, [pc, #248]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1ee      	bne.n	80031e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d105      	bne.n	8003214 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003208:	4b39      	ldr	r3, [pc, #228]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	4a38      	ldr	r2, [pc, #224]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 800320e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003212:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80a1 	beq.w	8003360 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800321e:	4b34      	ldr	r3, [pc, #208]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b08      	cmp	r3, #8
 8003228:	d05c      	beq.n	80032e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d141      	bne.n	80032b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003232:	4b31      	ldr	r3, [pc, #196]	@ (80032f8 <HAL_RCC_OscConfig+0x478>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fd fd0e 	bl	8000c58 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003240:	f7fd fd0a 	bl	8000c58 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e087      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003252:	4b27      	ldr	r3, [pc, #156]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	019b      	lsls	r3, r3, #6
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	3b01      	subs	r3, #1
 8003278:	041b      	lsls	r3, r3, #16
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003280:	061b      	lsls	r3, r3, #24
 8003282:	491b      	ldr	r1, [pc, #108]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003284:	4313      	orrs	r3, r2
 8003286:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003288:	4b1b      	ldr	r3, [pc, #108]	@ (80032f8 <HAL_RCC_OscConfig+0x478>)
 800328a:	2201      	movs	r2, #1
 800328c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328e:	f7fd fce3 	bl	8000c58 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003296:	f7fd fcdf 	bl	8000c58 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e05c      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a8:	4b11      	ldr	r3, [pc, #68]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x416>
 80032b4:	e054      	b.n	8003360 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b6:	4b10      	ldr	r3, [pc, #64]	@ (80032f8 <HAL_RCC_OscConfig+0x478>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fd fccc 	bl	8000c58 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fd fcc8 	bl	8000c58 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e045      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	4b06      	ldr	r3, [pc, #24]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x444>
 80032e2:	e03d      	b.n	8003360 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d107      	bne.n	80032fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e038      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40007000 	.word	0x40007000
 80032f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032fc:	4b1b      	ldr	r3, [pc, #108]	@ (800336c <HAL_RCC_OscConfig+0x4ec>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d028      	beq.n	800335c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d121      	bne.n	800335c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d11a      	bne.n	800335c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800332c:	4013      	ands	r3, r2
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003332:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003334:	4293      	cmp	r3, r2
 8003336:	d111      	bne.n	800335c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	3b01      	subs	r3, #1
 8003346:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d107      	bne.n	800335c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003356:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800

08003370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0cc      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003384:	4b68      	ldr	r3, [pc, #416]	@ (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d90c      	bls.n	80033ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b65      	ldr	r3, [pc, #404]	@ (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	4b63      	ldr	r3, [pc, #396]	@ (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0b8      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d020      	beq.n	80033fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c4:	4b59      	ldr	r3, [pc, #356]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4a58      	ldr	r2, [pc, #352]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033dc:	4b53      	ldr	r3, [pc, #332]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a52      	ldr	r2, [pc, #328]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e8:	4b50      	ldr	r3, [pc, #320]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	494d      	ldr	r1, [pc, #308]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d044      	beq.n	8003490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d107      	bne.n	800341e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	4b47      	ldr	r3, [pc, #284]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d119      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e07f      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d003      	beq.n	800342e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800342a:	2b03      	cmp	r3, #3
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342e:	4b3f      	ldr	r3, [pc, #252]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e06f      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343e:	4b3b      	ldr	r3, [pc, #236]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e067      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344e:	4b37      	ldr	r3, [pc, #220]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f023 0203 	bic.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4934      	ldr	r1, [pc, #208]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	4313      	orrs	r3, r2
 800345e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003460:	f7fd fbfa 	bl	8000c58 <HAL_GetTick>
 8003464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	e00a      	b.n	800347e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003468:	f7fd fbf6 	bl	8000c58 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e04f      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	4b2b      	ldr	r3, [pc, #172]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 020c 	and.w	r2, r3, #12
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	429a      	cmp	r2, r3
 800348e:	d1eb      	bne.n	8003468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003490:	4b25      	ldr	r3, [pc, #148]	@ (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d20c      	bcs.n	80034b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b22      	ldr	r3, [pc, #136]	@ (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b20      	ldr	r3, [pc, #128]	@ (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e032      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c4:	4b19      	ldr	r3, [pc, #100]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4916      	ldr	r1, [pc, #88]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034e2:	4b12      	ldr	r3, [pc, #72]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	490e      	ldr	r1, [pc, #56]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034f6:	f000 f821 	bl	800353c <HAL_RCC_GetSysClockFreq>
 80034fa:	4602      	mov	r2, r0
 80034fc:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	490a      	ldr	r1, [pc, #40]	@ (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 8003508:	5ccb      	ldrb	r3, [r1, r3]
 800350a:	fa22 f303 	lsr.w	r3, r2, r3
 800350e:	4a09      	ldr	r2, [pc, #36]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003512:	4b09      	ldr	r3, [pc, #36]	@ (8003538 <HAL_RCC_ClockConfig+0x1c8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd fb5a 	bl	8000bd0 <HAL_InitTick>

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023c00 	.word	0x40023c00
 800352c:	40023800 	.word	0x40023800
 8003530:	08008160 	.word	0x08008160
 8003534:	20000000 	.word	0x20000000
 8003538:	20000004 	.word	0x20000004

0800353c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800353c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003540:	b094      	sub	sp, #80	@ 0x50
 8003542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	647b      	str	r3, [r7, #68]	@ 0x44
 8003548:	2300      	movs	r3, #0
 800354a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800354c:	2300      	movs	r3, #0
 800354e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003554:	4b79      	ldr	r3, [pc, #484]	@ (800373c <HAL_RCC_GetSysClockFreq+0x200>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b08      	cmp	r3, #8
 800355e:	d00d      	beq.n	800357c <HAL_RCC_GetSysClockFreq+0x40>
 8003560:	2b08      	cmp	r3, #8
 8003562:	f200 80e1 	bhi.w	8003728 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0x34>
 800356a:	2b04      	cmp	r3, #4
 800356c:	d003      	beq.n	8003576 <HAL_RCC_GetSysClockFreq+0x3a>
 800356e:	e0db      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003570:	4b73      	ldr	r3, [pc, #460]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x204>)
 8003572:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003574:	e0db      	b.n	800372e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003576:	4b73      	ldr	r3, [pc, #460]	@ (8003744 <HAL_RCC_GetSysClockFreq+0x208>)
 8003578:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800357a:	e0d8      	b.n	800372e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800357c:	4b6f      	ldr	r3, [pc, #444]	@ (800373c <HAL_RCC_GetSysClockFreq+0x200>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003584:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003586:	4b6d      	ldr	r3, [pc, #436]	@ (800373c <HAL_RCC_GetSysClockFreq+0x200>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d063      	beq.n	800365a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003592:	4b6a      	ldr	r3, [pc, #424]	@ (800373c <HAL_RCC_GetSysClockFreq+0x200>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	099b      	lsrs	r3, r3, #6
 8003598:	2200      	movs	r2, #0
 800359a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800359c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800359e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80035a6:	2300      	movs	r3, #0
 80035a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80035aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035ae:	4622      	mov	r2, r4
 80035b0:	462b      	mov	r3, r5
 80035b2:	f04f 0000 	mov.w	r0, #0
 80035b6:	f04f 0100 	mov.w	r1, #0
 80035ba:	0159      	lsls	r1, r3, #5
 80035bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c0:	0150      	lsls	r0, r2, #5
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4621      	mov	r1, r4
 80035c8:	1a51      	subs	r1, r2, r1
 80035ca:	6139      	str	r1, [r7, #16]
 80035cc:	4629      	mov	r1, r5
 80035ce:	eb63 0301 	sbc.w	r3, r3, r1
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035e0:	4659      	mov	r1, fp
 80035e2:	018b      	lsls	r3, r1, #6
 80035e4:	4651      	mov	r1, sl
 80035e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035ea:	4651      	mov	r1, sl
 80035ec:	018a      	lsls	r2, r1, #6
 80035ee:	4651      	mov	r1, sl
 80035f0:	ebb2 0801 	subs.w	r8, r2, r1
 80035f4:	4659      	mov	r1, fp
 80035f6:	eb63 0901 	sbc.w	r9, r3, r1
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800360a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800360e:	4690      	mov	r8, r2
 8003610:	4699      	mov	r9, r3
 8003612:	4623      	mov	r3, r4
 8003614:	eb18 0303 	adds.w	r3, r8, r3
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	462b      	mov	r3, r5
 800361c:	eb49 0303 	adc.w	r3, r9, r3
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800362e:	4629      	mov	r1, r5
 8003630:	024b      	lsls	r3, r1, #9
 8003632:	4621      	mov	r1, r4
 8003634:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003638:	4621      	mov	r1, r4
 800363a:	024a      	lsls	r2, r1, #9
 800363c:	4610      	mov	r0, r2
 800363e:	4619      	mov	r1, r3
 8003640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003642:	2200      	movs	r2, #0
 8003644:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003648:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800364c:	f7fc fe18 	bl	8000280 <__aeabi_uldivmod>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4613      	mov	r3, r2
 8003656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003658:	e058      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800365a:	4b38      	ldr	r3, [pc, #224]	@ (800373c <HAL_RCC_GetSysClockFreq+0x200>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	099b      	lsrs	r3, r3, #6
 8003660:	2200      	movs	r2, #0
 8003662:	4618      	mov	r0, r3
 8003664:	4611      	mov	r1, r2
 8003666:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800366a:	623b      	str	r3, [r7, #32]
 800366c:	2300      	movs	r3, #0
 800366e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003670:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003674:	4642      	mov	r2, r8
 8003676:	464b      	mov	r3, r9
 8003678:	f04f 0000 	mov.w	r0, #0
 800367c:	f04f 0100 	mov.w	r1, #0
 8003680:	0159      	lsls	r1, r3, #5
 8003682:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003686:	0150      	lsls	r0, r2, #5
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4641      	mov	r1, r8
 800368e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003692:	4649      	mov	r1, r9
 8003694:	eb63 0b01 	sbc.w	fp, r3, r1
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036ac:	ebb2 040a 	subs.w	r4, r2, sl
 80036b0:	eb63 050b 	sbc.w	r5, r3, fp
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	00eb      	lsls	r3, r5, #3
 80036be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036c2:	00e2      	lsls	r2, r4, #3
 80036c4:	4614      	mov	r4, r2
 80036c6:	461d      	mov	r5, r3
 80036c8:	4643      	mov	r3, r8
 80036ca:	18e3      	adds	r3, r4, r3
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	464b      	mov	r3, r9
 80036d0:	eb45 0303 	adc.w	r3, r5, r3
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036e2:	4629      	mov	r1, r5
 80036e4:	028b      	lsls	r3, r1, #10
 80036e6:	4621      	mov	r1, r4
 80036e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036ec:	4621      	mov	r1, r4
 80036ee:	028a      	lsls	r2, r1, #10
 80036f0:	4610      	mov	r0, r2
 80036f2:	4619      	mov	r1, r3
 80036f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f6:	2200      	movs	r2, #0
 80036f8:	61bb      	str	r3, [r7, #24]
 80036fa:	61fa      	str	r2, [r7, #28]
 80036fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003700:	f7fc fdbe 	bl	8000280 <__aeabi_uldivmod>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4613      	mov	r3, r2
 800370a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800370c:	4b0b      	ldr	r3, [pc, #44]	@ (800373c <HAL_RCC_GetSysClockFreq+0x200>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	0c1b      	lsrs	r3, r3, #16
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	3301      	adds	r3, #1
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800371c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800371e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003720:	fbb2 f3f3 	udiv	r3, r2, r3
 8003724:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003726:	e002      	b.n	800372e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003728:	4b05      	ldr	r3, [pc, #20]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x204>)
 800372a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800372c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800372e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003730:	4618      	mov	r0, r3
 8003732:	3750      	adds	r7, #80	@ 0x50
 8003734:	46bd      	mov	sp, r7
 8003736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800373a:	bf00      	nop
 800373c:	40023800 	.word	0x40023800
 8003740:	00f42400 	.word	0x00f42400
 8003744:	007a1200 	.word	0x007a1200

08003748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800374c:	4b03      	ldr	r3, [pc, #12]	@ (800375c <HAL_RCC_GetHCLKFreq+0x14>)
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000000 	.word	0x20000000

08003760 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003760:	b084      	sub	sp, #16
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	f107 001c 	add.w	r0, r7, #28
 800376e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003772:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003776:	2b01      	cmp	r3, #1
 8003778:	d123      	bne.n	80037c2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800378e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d105      	bne.n	80037b6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f001 fae2 	bl	8004d80 <USB_CoreReset>
 80037bc:	4603      	mov	r3, r0
 80037be:	73fb      	strb	r3, [r7, #15]
 80037c0:	e01b      	b.n	80037fa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f001 fad6 	bl	8004d80 <USB_CoreReset>
 80037d4:	4603      	mov	r3, r0
 80037d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80037ec:	e005      	b.n	80037fa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80037fa:	7fbb      	ldrb	r3, [r7, #30]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d10b      	bne.n	8003818 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f043 0206 	orr.w	r2, r3, #6
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f043 0220 	orr.w	r2, r3, #32
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003818:	7bfb      	ldrb	r3, [r7, #15]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003824:	b004      	add	sp, #16
 8003826:	4770      	bx	lr

08003828 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	4613      	mov	r3, r2
 8003834:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d165      	bne.n	8003908 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4a41      	ldr	r2, [pc, #260]	@ (8003944 <USB_SetTurnaroundTime+0x11c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d906      	bls.n	8003852 <USB_SetTurnaroundTime+0x2a>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4a40      	ldr	r2, [pc, #256]	@ (8003948 <USB_SetTurnaroundTime+0x120>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d202      	bcs.n	8003852 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800384c:	230f      	movs	r3, #15
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	e062      	b.n	8003918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	4a3c      	ldr	r2, [pc, #240]	@ (8003948 <USB_SetTurnaroundTime+0x120>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d306      	bcc.n	8003868 <USB_SetTurnaroundTime+0x40>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4a3b      	ldr	r2, [pc, #236]	@ (800394c <USB_SetTurnaroundTime+0x124>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d202      	bcs.n	8003868 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003862:	230e      	movs	r3, #14
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e057      	b.n	8003918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4a38      	ldr	r2, [pc, #224]	@ (800394c <USB_SetTurnaroundTime+0x124>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d306      	bcc.n	800387e <USB_SetTurnaroundTime+0x56>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4a37      	ldr	r2, [pc, #220]	@ (8003950 <USB_SetTurnaroundTime+0x128>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d202      	bcs.n	800387e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003878:	230d      	movs	r3, #13
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e04c      	b.n	8003918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4a33      	ldr	r2, [pc, #204]	@ (8003950 <USB_SetTurnaroundTime+0x128>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d306      	bcc.n	8003894 <USB_SetTurnaroundTime+0x6c>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4a32      	ldr	r2, [pc, #200]	@ (8003954 <USB_SetTurnaroundTime+0x12c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d802      	bhi.n	8003894 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800388e:	230c      	movs	r3, #12
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	e041      	b.n	8003918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4a2f      	ldr	r2, [pc, #188]	@ (8003954 <USB_SetTurnaroundTime+0x12c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d906      	bls.n	80038aa <USB_SetTurnaroundTime+0x82>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4a2e      	ldr	r2, [pc, #184]	@ (8003958 <USB_SetTurnaroundTime+0x130>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d802      	bhi.n	80038aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80038a4:	230b      	movs	r3, #11
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	e036      	b.n	8003918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003958 <USB_SetTurnaroundTime+0x130>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d906      	bls.n	80038c0 <USB_SetTurnaroundTime+0x98>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	4a29      	ldr	r2, [pc, #164]	@ (800395c <USB_SetTurnaroundTime+0x134>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d802      	bhi.n	80038c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80038ba:	230a      	movs	r3, #10
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	e02b      	b.n	8003918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4a26      	ldr	r2, [pc, #152]	@ (800395c <USB_SetTurnaroundTime+0x134>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d906      	bls.n	80038d6 <USB_SetTurnaroundTime+0xae>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4a25      	ldr	r2, [pc, #148]	@ (8003960 <USB_SetTurnaroundTime+0x138>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d202      	bcs.n	80038d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80038d0:	2309      	movs	r3, #9
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	e020      	b.n	8003918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4a21      	ldr	r2, [pc, #132]	@ (8003960 <USB_SetTurnaroundTime+0x138>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d306      	bcc.n	80038ec <USB_SetTurnaroundTime+0xc4>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4a20      	ldr	r2, [pc, #128]	@ (8003964 <USB_SetTurnaroundTime+0x13c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d802      	bhi.n	80038ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80038e6:	2308      	movs	r3, #8
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e015      	b.n	8003918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003964 <USB_SetTurnaroundTime+0x13c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d906      	bls.n	8003902 <USB_SetTurnaroundTime+0xda>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003968 <USB_SetTurnaroundTime+0x140>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d202      	bcs.n	8003902 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80038fc:	2307      	movs	r3, #7
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	e00a      	b.n	8003918 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003902:	2306      	movs	r3, #6
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	e007      	b.n	8003918 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d102      	bne.n	8003914 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800390e:	2309      	movs	r3, #9
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	e001      	b.n	8003918 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003914:	2309      	movs	r3, #9
 8003916:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	029b      	lsls	r3, r3, #10
 800392c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003930:	431a      	orrs	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	371c      	adds	r7, #28
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	00d8acbf 	.word	0x00d8acbf
 8003948:	00e4e1c0 	.word	0x00e4e1c0
 800394c:	00f42400 	.word	0x00f42400
 8003950:	01067380 	.word	0x01067380
 8003954:	011a499f 	.word	0x011a499f
 8003958:	01312cff 	.word	0x01312cff
 800395c:	014ca43f 	.word	0x014ca43f
 8003960:	016e3600 	.word	0x016e3600
 8003964:	01a6ab1f 	.word	0x01a6ab1f
 8003968:	01e84800 	.word	0x01e84800

0800396c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f043 0201 	orr.w	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f023 0201 	bic.w	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d115      	bne.n	80039fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80039de:	200a      	movs	r0, #10
 80039e0:	f7fd f946 	bl	8000c70 <HAL_Delay>
      ms += 10U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	330a      	adds	r3, #10
 80039e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f001 f939 	bl	8004c62 <USB_GetMode>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d01e      	beq.n	8003a34 <USB_SetCurrentMode+0x84>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80039fa:	d9f0      	bls.n	80039de <USB_SetCurrentMode+0x2e>
 80039fc:	e01a      	b.n	8003a34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d115      	bne.n	8003a30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a10:	200a      	movs	r0, #10
 8003a12:	f7fd f92d 	bl	8000c70 <HAL_Delay>
      ms += 10U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	330a      	adds	r3, #10
 8003a1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f001 f920 	bl	8004c62 <USB_GetMode>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <USB_SetCurrentMode+0x84>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a2c:	d9f0      	bls.n	8003a10 <USB_SetCurrentMode+0x60>
 8003a2e:	e001      	b.n	8003a34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e005      	b.n	8003a40 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2bc8      	cmp	r3, #200	@ 0xc8
 8003a38:	d101      	bne.n	8003a3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a48:	b084      	sub	sp, #16
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b086      	sub	sp, #24
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	e009      	b.n	8003a7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	3340      	adds	r3, #64	@ 0x40
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	2200      	movs	r2, #0
 8003a74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	2b0e      	cmp	r3, #14
 8003a80:	d9f2      	bls.n	8003a68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11c      	bne.n	8003ac4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a98:	f043 0302 	orr.w	r3, r3, #2
 8003a9c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ac2:	e00b      	b.n	8003adc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ae8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d10d      	bne.n	8003b0c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003af0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d104      	bne.n	8003b02 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003af8:	2100      	movs	r1, #0
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f968 	bl	8003dd0 <USB_SetDevSpeed>
 8003b00:	e008      	b.n	8003b14 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b02:	2101      	movs	r1, #1
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f963 	bl	8003dd0 <USB_SetDevSpeed>
 8003b0a:	e003      	b.n	8003b14 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b0c:	2103      	movs	r1, #3
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f95e 	bl	8003dd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b14:	2110      	movs	r1, #16
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f8fa 	bl	8003d10 <USB_FlushTxFifo>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f924 	bl	8003d74 <USB_FlushRxFifo>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2300      	movs	r3, #0
 8003b40:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b54:	461a      	mov	r2, r3
 8003b56:	2300      	movs	r3, #0
 8003b58:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	e043      	b.n	8003be8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b76:	d118      	bne.n	8003baa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10a      	bne.n	8003b94 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e013      	b.n	8003bbc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	e008      	b.n	8003bbc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	2300      	movs	r3, #0
 8003bba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2300      	movs	r3, #0
 8003bcc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003be0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	3301      	adds	r3, #1
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003bec:	461a      	mov	r2, r3
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d3b5      	bcc.n	8003b60 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	e043      	b.n	8003c82 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c10:	d118      	bne.n	8003c44 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c24:	461a      	mov	r2, r3
 8003c26:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	e013      	b.n	8003c56 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e008      	b.n	8003c56 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c50:	461a      	mov	r2, r3
 8003c52:	2300      	movs	r3, #0
 8003c54:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c62:	461a      	mov	r2, r3
 8003c64:	2300      	movs	r3, #0
 8003c66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c74:	461a      	mov	r2, r3
 8003c76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c86:	461a      	mov	r2, r3
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d3b5      	bcc.n	8003bfa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ca0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003cae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d105      	bne.n	8003cc4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	f043 0210 	orr.w	r2, r3, #16
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699a      	ldr	r2, [r3, #24]
 8003cc8:	4b10      	ldr	r3, [pc, #64]	@ (8003d0c <USB_DevInit+0x2c4>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003cd0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	f043 0208 	orr.w	r2, r3, #8
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ce4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d107      	bne.n	8003cfc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003cf4:	f043 0304 	orr.w	r3, r3, #4
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d08:	b004      	add	sp, #16
 8003d0a:	4770      	bx	lr
 8003d0c:	803c3800 	.word	0x803c3800

08003d10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3301      	adds	r3, #1
 8003d22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d2a:	d901      	bls.n	8003d30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e01b      	b.n	8003d68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	daf2      	bge.n	8003d1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	019b      	lsls	r3, r3, #6
 8003d40:	f043 0220 	orr.w	r2, r3, #32
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d54:	d901      	bls.n	8003d5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e006      	b.n	8003d68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d0f0      	beq.n	8003d48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3301      	adds	r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d8c:	d901      	bls.n	8003d92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e018      	b.n	8003dc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	daf2      	bge.n	8003d80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2210      	movs	r2, #16
 8003da2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3301      	adds	r3, #1
 8003da8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003db0:	d901      	bls.n	8003db6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e006      	b.n	8003dc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d0f0      	beq.n	8003da4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	68f9      	ldr	r1, [r7, #12]
 8003dec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003df0:	4313      	orrs	r3, r2
 8003df2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b087      	sub	sp, #28
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0306 	and.w	r3, r3, #6
 8003e1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d102      	bne.n	8003e28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e22:	2300      	movs	r3, #0
 8003e24:	75fb      	strb	r3, [r7, #23]
 8003e26:	e00a      	b.n	8003e3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d002      	beq.n	8003e34 <USB_GetDevSpeed+0x32>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b06      	cmp	r3, #6
 8003e32:	d102      	bne.n	8003e3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e34:	2302      	movs	r3, #2
 8003e36:	75fb      	strb	r3, [r7, #23]
 8003e38:	e001      	b.n	8003e3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e3a:	230f      	movs	r3, #15
 8003e3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	371c      	adds	r7, #28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	785b      	ldrb	r3, [r3, #1]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d13a      	bne.n	8003ede <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	2101      	movs	r1, #1
 8003e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	68f9      	ldr	r1, [r7, #12]
 8003e82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d155      	bne.n	8003f4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	791b      	ldrb	r3, [r3, #4]
 8003eba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ebc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	059b      	lsls	r3, r3, #22
 8003ec2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	0151      	lsls	r1, r2, #5
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	440a      	add	r2, r1
 8003ece:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	e036      	b.n	8003f4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ee4:	69da      	ldr	r2, [r3, #28]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	2101      	movs	r1, #1
 8003ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	68f9      	ldr	r1, [r7, #12]
 8003ef8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d11a      	bne.n	8003f4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	791b      	ldrb	r3, [r3, #4]
 8003f30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f32:	430b      	orrs	r3, r1
 8003f34:	4313      	orrs	r3, r2
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	0151      	lsls	r1, r2, #5
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	440a      	add	r2, r1
 8003f3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d161      	bne.n	800403c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f8e:	d11f      	bne.n	8003fd0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	0151      	lsls	r1, r2, #5
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	440a      	add	r2, r1
 8003fa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003faa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003fae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	0151      	lsls	r1, r2, #5
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	440a      	add	r2, r1
 8003fc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	2101      	movs	r1, #1
 8004006:	fa01 f303 	lsl.w	r3, r1, r3
 800400a:	b29b      	uxth	r3, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004014:	4013      	ands	r3, r2
 8004016:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	0159      	lsls	r1, r3, #5
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	440b      	add	r3, r1
 800402e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004032:	4619      	mov	r1, r3
 8004034:	4b35      	ldr	r3, [pc, #212]	@ (800410c <USB_DeactivateEndpoint+0x1b0>)
 8004036:	4013      	ands	r3, r2
 8004038:	600b      	str	r3, [r1, #0]
 800403a:	e060      	b.n	80040fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800404e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004052:	d11f      	bne.n	8004094 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	0151      	lsls	r1, r2, #5
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	440a      	add	r2, r1
 800406a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800406e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004072:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	0151      	lsls	r1, r2, #5
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	440a      	add	r2, r1
 800408a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800408e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004092:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800409a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	2101      	movs	r1, #1
 80040a6:	fa01 f303 	lsl.w	r3, r1, r3
 80040aa:	041b      	lsls	r3, r3, #16
 80040ac:	43db      	mvns	r3, r3
 80040ae:	68f9      	ldr	r1, [r7, #12]
 80040b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040b4:	4013      	ands	r3, r2
 80040b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040be:	69da      	ldr	r2, [r3, #28]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	2101      	movs	r1, #1
 80040ca:	fa01 f303 	lsl.w	r3, r1, r3
 80040ce:	041b      	lsls	r3, r3, #16
 80040d0:	43db      	mvns	r3, r3
 80040d2:	68f9      	ldr	r1, [r7, #12]
 80040d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040d8:	4013      	ands	r3, r2
 80040da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	0159      	lsls	r1, r3, #5
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	440b      	add	r3, r1
 80040f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f6:	4619      	mov	r1, r3
 80040f8:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <USB_DeactivateEndpoint+0x1b4>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	ec337800 	.word	0xec337800
 8004110:	eff37800 	.word	0xeff37800

08004114 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08a      	sub	sp, #40	@ 0x28
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	4613      	mov	r3, r2
 8004120:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	785b      	ldrb	r3, [r3, #1]
 8004130:	2b01      	cmp	r3, #1
 8004132:	f040 817a 	bne.w	800442a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d132      	bne.n	80041a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	0151      	lsls	r1, r2, #5
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	440a      	add	r2, r1
 8004154:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004158:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800415c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004160:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	440a      	add	r2, r1
 8004178:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800417c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004180:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	0151      	lsls	r1, r2, #5
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	440a      	add	r2, r1
 8004198:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800419c:	0cdb      	lsrs	r3, r3, #19
 800419e:	04db      	lsls	r3, r3, #19
 80041a0:	6113      	str	r3, [r2, #16]
 80041a2:	e092      	b.n	80042ca <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	0151      	lsls	r1, r2, #5
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	440a      	add	r2, r1
 80041ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041be:	0cdb      	lsrs	r3, r3, #19
 80041c0:	04db      	lsls	r3, r3, #19
 80041c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	0151      	lsls	r1, r2, #5
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	440a      	add	r2, r1
 80041da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80041e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80041e6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d11a      	bne.n	8004224 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d903      	bls.n	8004202 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	0151      	lsls	r1, r2, #5
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	440a      	add	r2, r1
 8004218:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800421c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004220:	6113      	str	r3, [r2, #16]
 8004222:	e01b      	b.n	800425c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004230:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6919      	ldr	r1, [r3, #16]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	440b      	add	r3, r1
 800423c:	1e59      	subs	r1, r3, #1
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	fbb1 f3f3 	udiv	r3, r1, r3
 8004246:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004248:	4ba2      	ldr	r3, [pc, #648]	@ (80044d4 <USB_EPStartXfer+0x3c0>)
 800424a:	400b      	ands	r3, r1
 800424c:	69b9      	ldr	r1, [r7, #24]
 800424e:	0148      	lsls	r0, r1, #5
 8004250:	69f9      	ldr	r1, [r7, #28]
 8004252:	4401      	add	r1, r0
 8004254:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004258:	4313      	orrs	r3, r2
 800425a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004272:	69b9      	ldr	r1, [r7, #24]
 8004274:	0148      	lsls	r0, r1, #5
 8004276:	69f9      	ldr	r1, [r7, #28]
 8004278:	4401      	add	r1, r0
 800427a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800427e:	4313      	orrs	r3, r2
 8004280:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	791b      	ldrb	r3, [r3, #4]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d11f      	bne.n	80042ca <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	0151      	lsls	r1, r2, #5
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	440a      	add	r2, r1
 80042a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042a4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80042a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	0151      	lsls	r1, r2, #5
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	440a      	add	r2, r1
 80042c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80042c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d14b      	bne.n	8004368 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d009      	beq.n	80042ec <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042e4:	461a      	mov	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	791b      	ldrb	r3, [r3, #4]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d128      	bne.n	8004346 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004300:	2b00      	cmp	r3, #0
 8004302:	d110      	bne.n	8004326 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	0151      	lsls	r1, r2, #5
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	440a      	add	r2, r1
 800431a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800431e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	e00f      	b.n	8004346 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	0151      	lsls	r1, r2, #5
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	440a      	add	r2, r1
 800433c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004344:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	0151      	lsls	r1, r2, #5
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	440a      	add	r2, r1
 800435c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004360:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	e165      	b.n	8004634 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	0151      	lsls	r1, r2, #5
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	440a      	add	r2, r1
 800437e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004382:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004386:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	791b      	ldrb	r3, [r3, #4]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d015      	beq.n	80043bc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 814d 	beq.w	8004634 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	2101      	movs	r1, #1
 80043ac:	fa01 f303 	lsl.w	r3, r1, r3
 80043b0:	69f9      	ldr	r1, [r7, #28]
 80043b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043b6:	4313      	orrs	r3, r2
 80043b8:	634b      	str	r3, [r1, #52]	@ 0x34
 80043ba:	e13b      	b.n	8004634 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d110      	bne.n	80043ee <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	0151      	lsls	r1, r2, #5
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	440a      	add	r2, r1
 80043e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	e00f      	b.n	800440e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	0151      	lsls	r1, r2, #5
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	440a      	add	r2, r1
 8004404:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800440c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	68d9      	ldr	r1, [r3, #12]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	b298      	uxth	r0, r3
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	4603      	mov	r3, r0
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f9b8 	bl	8004798 <USB_WritePacket>
 8004428:	e104      	b.n	8004634 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	0151      	lsls	r1, r2, #5
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	440a      	add	r2, r1
 8004440:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004444:	0cdb      	lsrs	r3, r3, #19
 8004446:	04db      	lsls	r3, r3, #19
 8004448:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	0151      	lsls	r1, r2, #5
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	440a      	add	r2, r1
 8004460:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004464:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004468:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800446c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d131      	bne.n	80044d8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a2:	69b9      	ldr	r1, [r7, #24]
 80044a4:	0148      	lsls	r0, r1, #5
 80044a6:	69f9      	ldr	r1, [r7, #28]
 80044a8:	4401      	add	r1, r0
 80044aa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80044ae:	4313      	orrs	r3, r2
 80044b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	0151      	lsls	r1, r2, #5
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	440a      	add	r2, r1
 80044c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044d0:	6113      	str	r3, [r2, #16]
 80044d2:	e061      	b.n	8004598 <USB_EPStartXfer+0x484>
 80044d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d123      	bne.n	8004528 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f6:	69b9      	ldr	r1, [r7, #24]
 80044f8:	0148      	lsls	r0, r1, #5
 80044fa:	69f9      	ldr	r1, [r7, #28]
 80044fc:	4401      	add	r1, r0
 80044fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004502:	4313      	orrs	r3, r2
 8004504:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	0151      	lsls	r1, r2, #5
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	440a      	add	r2, r1
 800451c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004520:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004524:	6113      	str	r3, [r2, #16]
 8004526:	e037      	b.n	8004598 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	4413      	add	r3, r2
 8004532:	1e5a      	subs	r2, r3, #1
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	fbb2 f3f3 	udiv	r3, r2, r3
 800453c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	8afa      	ldrh	r2, [r7, #22]
 8004544:	fb03 f202 	mul.w	r2, r3, r2
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	8afb      	ldrh	r3, [r7, #22]
 800455c:	04d9      	lsls	r1, r3, #19
 800455e:	4b38      	ldr	r3, [pc, #224]	@ (8004640 <USB_EPStartXfer+0x52c>)
 8004560:	400b      	ands	r3, r1
 8004562:	69b9      	ldr	r1, [r7, #24]
 8004564:	0148      	lsls	r0, r1, #5
 8004566:	69f9      	ldr	r1, [r7, #28]
 8004568:	4401      	add	r1, r0
 800456a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800456e:	4313      	orrs	r3, r2
 8004570:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004588:	69b9      	ldr	r1, [r7, #24]
 800458a:	0148      	lsls	r0, r1, #5
 800458c:	69f9      	ldr	r1, [r7, #28]
 800458e:	4401      	add	r1, r0
 8004590:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004594:	4313      	orrs	r3, r2
 8004596:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10d      	bne.n	80045ba <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	68d9      	ldr	r1, [r3, #12]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b6:	460a      	mov	r2, r1
 80045b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	791b      	ldrb	r3, [r3, #4]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d128      	bne.n	8004614 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d110      	bne.n	80045f4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	0151      	lsls	r1, r2, #5
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	440a      	add	r2, r1
 80045e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	e00f      	b.n	8004614 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	0151      	lsls	r1, r2, #5
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	440a      	add	r2, r1
 800460a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800460e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004612:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	0151      	lsls	r1, r2, #5
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	440a      	add	r2, r1
 800462a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800462e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004632:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	1ff80000 	.word	0x1ff80000

08004644 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	785b      	ldrb	r3, [r3, #1]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d14a      	bne.n	80046f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004676:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800467a:	f040 8086 	bne.w	800478a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	7812      	ldrb	r2, [r2, #0]
 8004692:	0151      	lsls	r1, r2, #5
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	440a      	add	r2, r1
 8004698:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800469c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80046a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	7812      	ldrb	r2, [r2, #0]
 80046b6:	0151      	lsls	r1, r2, #5
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	440a      	add	r2, r1
 80046bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3301      	adds	r3, #1
 80046ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d902      	bls.n	80046dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	75fb      	strb	r3, [r7, #23]
          break;
 80046da:	e056      	b.n	800478a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046f4:	d0e7      	beq.n	80046c6 <USB_EPStopXfer+0x82>
 80046f6:	e048      	b.n	800478a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800470c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004710:	d13b      	bne.n	800478a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	7812      	ldrb	r2, [r2, #0]
 8004726:	0151      	lsls	r1, r2, #5
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	440a      	add	r2, r1
 800472c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004730:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004734:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	7812      	ldrb	r2, [r2, #0]
 800474a:	0151      	lsls	r1, r2, #5
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	440a      	add	r2, r1
 8004750:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004754:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004758:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	3301      	adds	r3, #1
 800475e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004766:	4293      	cmp	r3, r2
 8004768:	d902      	bls.n	8004770 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	75fb      	strb	r3, [r7, #23]
          break;
 800476e:	e00c      	b.n	800478a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004784:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004788:	d0e7      	beq.n	800475a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800478a:	7dfb      	ldrb	r3, [r7, #23]
}
 800478c:	4618      	mov	r0, r3
 800478e:	371c      	adds	r7, #28
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004798:	b480      	push	{r7}
 800479a:	b089      	sub	sp, #36	@ 0x24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	4611      	mov	r1, r2
 80047a4:	461a      	mov	r2, r3
 80047a6:	460b      	mov	r3, r1
 80047a8:	71fb      	strb	r3, [r7, #7]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d123      	bne.n	8004806 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047be:	88bb      	ldrh	r3, [r7, #4]
 80047c0:	3303      	adds	r3, #3
 80047c2:	089b      	lsrs	r3, r3, #2
 80047c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	e018      	b.n	80047fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047cc:	79fb      	ldrb	r3, [r7, #7]
 80047ce:	031a      	lsls	r2, r3, #12
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047d8:	461a      	mov	r2, r3
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	3301      	adds	r3, #1
 80047e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	3301      	adds	r3, #1
 80047ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	3301      	adds	r3, #1
 80047f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	3301      	adds	r3, #1
 80047f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	3301      	adds	r3, #1
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	429a      	cmp	r2, r3
 8004804:	d3e2      	bcc.n	80047cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3724      	adds	r7, #36	@ 0x24
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004814:	b480      	push	{r7}
 8004816:	b08b      	sub	sp, #44	@ 0x2c
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	4613      	mov	r3, r2
 8004820:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	089b      	lsrs	r3, r3, #2
 800482e:	b29b      	uxth	r3, r3
 8004830:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800483a:	2300      	movs	r3, #0
 800483c:	623b      	str	r3, [r7, #32]
 800483e:	e014      	b.n	800486a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484a:	601a      	str	r2, [r3, #0]
    pDest++;
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	3301      	adds	r3, #1
 8004850:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	3301      	adds	r3, #1
 8004856:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485a:	3301      	adds	r3, #1
 800485c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	3301      	adds	r3, #1
 8004862:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	3301      	adds	r3, #1
 8004868:	623b      	str	r3, [r7, #32]
 800486a:	6a3a      	ldr	r2, [r7, #32]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	429a      	cmp	r2, r3
 8004870:	d3e6      	bcc.n	8004840 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004872:	8bfb      	ldrh	r3, [r7, #30]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01e      	beq.n	80048b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004882:	461a      	mov	r2, r3
 8004884:	f107 0310 	add.w	r3, r7, #16
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
 8004898:	b2da      	uxtb	r2, r3
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	701a      	strb	r2, [r3, #0]
      i++;
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	3301      	adds	r3, #1
 80048a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80048a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a6:	3301      	adds	r3, #1
 80048a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80048aa:	8bfb      	ldrh	r3, [r7, #30]
 80048ac:	3b01      	subs	r3, #1
 80048ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048b0:	8bfb      	ldrh	r3, [r7, #30]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1ea      	bne.n	800488c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	372c      	adds	r7, #44	@ 0x2c
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	785b      	ldrb	r3, [r3, #1]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d12c      	bne.n	800493a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	db12      	blt.n	8004918 <USB_EPSetStall+0x54>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00f      	beq.n	8004918 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	440a      	add	r2, r1
 800490e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004912:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004916:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	0151      	lsls	r1, r2, #5
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	440a      	add	r2, r1
 800492e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004932:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	e02b      	b.n	8004992 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	db12      	blt.n	8004972 <USB_EPSetStall+0xae>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00f      	beq.n	8004972 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	0151      	lsls	r1, r2, #5
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	440a      	add	r2, r1
 8004968:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800496c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004970:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	0151      	lsls	r1, r2, #5
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	440a      	add	r2, r1
 8004988:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800498c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004990:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	785b      	ldrb	r3, [r3, #1]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d128      	bne.n	8004a0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80049da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	791b      	ldrb	r3, [r3, #4]
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	d003      	beq.n	80049ec <USB_EPClearStall+0x4c>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	791b      	ldrb	r3, [r3, #4]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d138      	bne.n	8004a5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	0151      	lsls	r1, r2, #5
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	440a      	add	r2, r1
 8004a02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	e027      	b.n	8004a5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	0151      	lsls	r1, r2, #5
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	440a      	add	r2, r1
 8004a24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	791b      	ldrb	r3, [r3, #4]
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d003      	beq.n	8004a3e <USB_EPClearStall+0x9e>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	791b      	ldrb	r3, [r3, #4]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d10f      	bne.n	8004a5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	0151      	lsls	r1, r2, #5
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	440a      	add	r2, r1
 8004a54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004a8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004aa0:	68f9      	ldr	r1, [r7, #12]
 8004aa2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004ad2:	f023 0303 	bic.w	r3, r3, #3
 8004ad6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ae6:	f023 0302 	bic.w	r3, r3, #2
 8004aea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004b14:	f023 0303 	bic.w	r3, r3, #3
 8004b18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b28:	f043 0302 	orr.w	r3, r3, #2
 8004b2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4013      	ands	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b54:	68fb      	ldr	r3, [r7, #12]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b085      	sub	sp, #20
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	4013      	ands	r3, r2
 8004b84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	0c1b      	lsrs	r3, r3, #16
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	b29b      	uxth	r3, r3
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b087      	sub	sp, #28
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c2a:	78fb      	ldrb	r3, [r7, #3]
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	fa22 f303 	lsr.w	r3, r2, r3
 8004c36:	01db      	lsls	r3, r3, #7
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4013      	ands	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c54:	68bb      	ldr	r3, [r7, #8]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c98:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004c9c:	f023 0307 	bic.w	r3, r3, #7
 8004ca0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	333c      	adds	r3, #60	@ 0x3c
 8004cda:	3304      	adds	r3, #4
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4a26      	ldr	r2, [pc, #152]	@ (8004d7c <USB_EP0_OutStart+0xb8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d90a      	bls.n	8004cfe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cf8:	d101      	bne.n	8004cfe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e037      	b.n	8004d6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d04:	461a      	mov	r2, r3
 8004d06:	2300      	movs	r3, #0
 8004d08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d2c:	f043 0318 	orr.w	r3, r3, #24
 8004d30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d40:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004d44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d46:	7afb      	ldrb	r3, [r7, #11]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d10f      	bne.n	8004d6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d52:	461a      	mov	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d66:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004d6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	4f54300a 	.word	0x4f54300a

08004d80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d98:	d901      	bls.n	8004d9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e01b      	b.n	8004dd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	daf2      	bge.n	8004d8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f043 0201 	orr.w	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3301      	adds	r3, #1
 8004dba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dc2:	d901      	bls.n	8004dc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e006      	b.n	8004dd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d0f0      	beq.n	8004db6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004df0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004df4:	f002 fc88 	bl	8007708 <USBD_static_malloc>
 8004df8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	32b0      	adds	r2, #176	@ 0xb0
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004e10:	2302      	movs	r3, #2
 8004e12:	e0d4      	b.n	8004fbe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004e14:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004e18:	2100      	movs	r1, #0
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f002 fcd8 	bl	80077d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	32b0      	adds	r2, #176	@ 0xb0
 8004e2a:	68f9      	ldr	r1, [r7, #12]
 8004e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	32b0      	adds	r2, #176	@ 0xb0
 8004e3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	7c1b      	ldrb	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d138      	bne.n	8004ebe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004e4c:	4b5e      	ldr	r3, [pc, #376]	@ (8004fc8 <USBD_CDC_Init+0x1e4>)
 8004e4e:	7819      	ldrb	r1, [r3, #0]
 8004e50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e54:	2202      	movs	r2, #2
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f002 fb33 	bl	80074c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004e5c:	4b5a      	ldr	r3, [pc, #360]	@ (8004fc8 <USBD_CDC_Init+0x1e4>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	f003 020f 	and.w	r2, r3, #15
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	3324      	adds	r3, #36	@ 0x24
 8004e72:	2201      	movs	r2, #1
 8004e74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004e76:	4b55      	ldr	r3, [pc, #340]	@ (8004fcc <USBD_CDC_Init+0x1e8>)
 8004e78:	7819      	ldrb	r1, [r3, #0]
 8004e7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e7e:	2202      	movs	r2, #2
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f002 fb1e 	bl	80074c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004e86:	4b51      	ldr	r3, [pc, #324]	@ (8004fcc <USBD_CDC_Init+0x1e8>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	f003 020f 	and.w	r2, r3, #15
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004ea2:	4b4b      	ldr	r3, [pc, #300]	@ (8004fd0 <USBD_CDC_Init+0x1ec>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	f003 020f 	and.w	r2, r3, #15
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	3326      	adds	r3, #38	@ 0x26
 8004eb8:	2210      	movs	r2, #16
 8004eba:	801a      	strh	r2, [r3, #0]
 8004ebc:	e035      	b.n	8004f2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ebe:	4b42      	ldr	r3, [pc, #264]	@ (8004fc8 <USBD_CDC_Init+0x1e4>)
 8004ec0:	7819      	ldrb	r1, [r3, #0]
 8004ec2:	2340      	movs	r3, #64	@ 0x40
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f002 fafb 	bl	80074c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ecc:	4b3e      	ldr	r3, [pc, #248]	@ (8004fc8 <USBD_CDC_Init+0x1e4>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	f003 020f 	and.w	r2, r3, #15
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	3324      	adds	r3, #36	@ 0x24
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004ee6:	4b39      	ldr	r3, [pc, #228]	@ (8004fcc <USBD_CDC_Init+0x1e8>)
 8004ee8:	7819      	ldrb	r1, [r3, #0]
 8004eea:	2340      	movs	r3, #64	@ 0x40
 8004eec:	2202      	movs	r2, #2
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f002 fae7 	bl	80074c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004ef4:	4b35      	ldr	r3, [pc, #212]	@ (8004fcc <USBD_CDC_Init+0x1e8>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	f003 020f 	and.w	r2, r3, #15
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f10:	4b2f      	ldr	r3, [pc, #188]	@ (8004fd0 <USBD_CDC_Init+0x1ec>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	f003 020f 	and.w	r2, r3, #15
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	3326      	adds	r3, #38	@ 0x26
 8004f26:	2210      	movs	r2, #16
 8004f28:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f2a:	4b29      	ldr	r3, [pc, #164]	@ (8004fd0 <USBD_CDC_Init+0x1ec>)
 8004f2c:	7819      	ldrb	r1, [r3, #0]
 8004f2e:	2308      	movs	r3, #8
 8004f30:	2203      	movs	r2, #3
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f002 fac5 	bl	80074c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004f38:	4b25      	ldr	r3, [pc, #148]	@ (8004fd0 <USBD_CDC_Init+0x1ec>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	f003 020f 	and.w	r2, r3, #15
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	3324      	adds	r3, #36	@ 0x24
 8004f4e:	2201      	movs	r2, #1
 8004f50:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	33b0      	adds	r3, #176	@ 0xb0
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e018      	b.n	8004fbe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	7c1b      	ldrb	r3, [r3, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10a      	bne.n	8004faa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004f94:	4b0d      	ldr	r3, [pc, #52]	@ (8004fcc <USBD_CDC_Init+0x1e8>)
 8004f96:	7819      	ldrb	r1, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004f9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f002 fb7c 	bl	80076a0 <USBD_LL_PrepareReceive>
 8004fa8:	e008      	b.n	8004fbc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004faa:	4b08      	ldr	r3, [pc, #32]	@ (8004fcc <USBD_CDC_Init+0x1e8>)
 8004fac:	7819      	ldrb	r1, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004fb4:	2340      	movs	r3, #64	@ 0x40
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f002 fb72 	bl	80076a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000093 	.word	0x20000093
 8004fcc:	20000094 	.word	0x20000094
 8004fd0:	20000095 	.word	0x20000095

08004fd4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80050cc <USBD_CDC_DeInit+0xf8>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f002 fa91 	bl	800750e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004fec:	4b37      	ldr	r3, [pc, #220]	@ (80050cc <USBD_CDC_DeInit+0xf8>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	f003 020f 	and.w	r2, r3, #15
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	3324      	adds	r3, #36	@ 0x24
 8005002:	2200      	movs	r2, #0
 8005004:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005006:	4b32      	ldr	r3, [pc, #200]	@ (80050d0 <USBD_CDC_DeInit+0xfc>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	4619      	mov	r1, r3
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f002 fa7e 	bl	800750e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005012:	4b2f      	ldr	r3, [pc, #188]	@ (80050d0 <USBD_CDC_DeInit+0xfc>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	f003 020f 	and.w	r2, r3, #15
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800502a:	2200      	movs	r2, #0
 800502c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800502e:	4b29      	ldr	r3, [pc, #164]	@ (80050d4 <USBD_CDC_DeInit+0x100>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	4619      	mov	r1, r3
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f002 fa6a 	bl	800750e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800503a:	4b26      	ldr	r3, [pc, #152]	@ (80050d4 <USBD_CDC_DeInit+0x100>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	f003 020f 	and.w	r2, r3, #15
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	3324      	adds	r3, #36	@ 0x24
 8005050:	2200      	movs	r2, #0
 8005052:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005054:	4b1f      	ldr	r3, [pc, #124]	@ (80050d4 <USBD_CDC_DeInit+0x100>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	f003 020f 	and.w	r2, r3, #15
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	3326      	adds	r3, #38	@ 0x26
 800506a:	2200      	movs	r2, #0
 800506c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	32b0      	adds	r2, #176	@ 0xb0
 8005078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01f      	beq.n	80050c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	33b0      	adds	r3, #176	@ 0xb0
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	32b0      	adds	r2, #176	@ 0xb0
 800509e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f002 fb3e 	bl	8007724 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	32b0      	adds	r2, #176	@ 0xb0
 80050b2:	2100      	movs	r1, #0
 80050b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000093 	.word	0x20000093
 80050d0:	20000094 	.word	0x20000094
 80050d4:	20000095 	.word	0x20000095

080050d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	32b0      	adds	r2, #176	@ 0xb0
 80050ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005104:	2303      	movs	r3, #3
 8005106:	e0bf      	b.n	8005288 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005110:	2b00      	cmp	r3, #0
 8005112:	d050      	beq.n	80051b6 <USBD_CDC_Setup+0xde>
 8005114:	2b20      	cmp	r3, #32
 8005116:	f040 80af 	bne.w	8005278 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	88db      	ldrh	r3, [r3, #6]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d03a      	beq.n	8005198 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	b25b      	sxtb	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	da1b      	bge.n	8005164 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	33b0      	adds	r3, #176	@ 0xb0
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005142:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	88d2      	ldrh	r2, [r2, #6]
 8005148:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	88db      	ldrh	r3, [r3, #6]
 800514e:	2b07      	cmp	r3, #7
 8005150:	bf28      	it	cs
 8005152:	2307      	movcs	r3, #7
 8005154:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	89fa      	ldrh	r2, [r7, #14]
 800515a:	4619      	mov	r1, r3
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f001 fd87 	bl	8006c70 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005162:	e090      	b.n	8005286 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	785a      	ldrb	r2, [r3, #1]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	88db      	ldrh	r3, [r3, #6]
 8005172:	2b3f      	cmp	r3, #63	@ 0x3f
 8005174:	d803      	bhi.n	800517e <USBD_CDC_Setup+0xa6>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	88db      	ldrh	r3, [r3, #6]
 800517a:	b2da      	uxtb	r2, r3
 800517c:	e000      	b.n	8005180 <USBD_CDC_Setup+0xa8>
 800517e:	2240      	movs	r2, #64	@ 0x40
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005186:	6939      	ldr	r1, [r7, #16]
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800518e:	461a      	mov	r2, r3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f001 fd99 	bl	8006cc8 <USBD_CtlPrepareRx>
      break;
 8005196:	e076      	b.n	8005286 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	33b0      	adds	r3, #176	@ 0xb0
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	7850      	ldrb	r0, [r2, #1]
 80051ae:	2200      	movs	r2, #0
 80051b0:	6839      	ldr	r1, [r7, #0]
 80051b2:	4798      	blx	r3
      break;
 80051b4:	e067      	b.n	8005286 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	785b      	ldrb	r3, [r3, #1]
 80051ba:	2b0b      	cmp	r3, #11
 80051bc:	d851      	bhi.n	8005262 <USBD_CDC_Setup+0x18a>
 80051be:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <USBD_CDC_Setup+0xec>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	080051f5 	.word	0x080051f5
 80051c8:	08005271 	.word	0x08005271
 80051cc:	08005263 	.word	0x08005263
 80051d0:	08005263 	.word	0x08005263
 80051d4:	08005263 	.word	0x08005263
 80051d8:	08005263 	.word	0x08005263
 80051dc:	08005263 	.word	0x08005263
 80051e0:	08005263 	.word	0x08005263
 80051e4:	08005263 	.word	0x08005263
 80051e8:	08005263 	.word	0x08005263
 80051ec:	0800521f 	.word	0x0800521f
 80051f0:	08005249 	.word	0x08005249
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d107      	bne.n	8005210 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005200:	f107 030a 	add.w	r3, r7, #10
 8005204:	2202      	movs	r2, #2
 8005206:	4619      	mov	r1, r3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f001 fd31 	bl	8006c70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800520e:	e032      	b.n	8005276 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005210:	6839      	ldr	r1, [r7, #0]
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f001 fcbb 	bl	8006b8e <USBD_CtlError>
            ret = USBD_FAIL;
 8005218:	2303      	movs	r3, #3
 800521a:	75fb      	strb	r3, [r7, #23]
          break;
 800521c:	e02b      	b.n	8005276 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b03      	cmp	r3, #3
 8005228:	d107      	bne.n	800523a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800522a:	f107 030d 	add.w	r3, r7, #13
 800522e:	2201      	movs	r2, #1
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f001 fd1c 	bl	8006c70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005238:	e01d      	b.n	8005276 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800523a:	6839      	ldr	r1, [r7, #0]
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f001 fca6 	bl	8006b8e <USBD_CtlError>
            ret = USBD_FAIL;
 8005242:	2303      	movs	r3, #3
 8005244:	75fb      	strb	r3, [r7, #23]
          break;
 8005246:	e016      	b.n	8005276 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b03      	cmp	r3, #3
 8005252:	d00f      	beq.n	8005274 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f001 fc99 	bl	8006b8e <USBD_CtlError>
            ret = USBD_FAIL;
 800525c:	2303      	movs	r3, #3
 800525e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005260:	e008      	b.n	8005274 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005262:	6839      	ldr	r1, [r7, #0]
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f001 fc92 	bl	8006b8e <USBD_CtlError>
          ret = USBD_FAIL;
 800526a:	2303      	movs	r3, #3
 800526c:	75fb      	strb	r3, [r7, #23]
          break;
 800526e:	e002      	b.n	8005276 <USBD_CDC_Setup+0x19e>
          break;
 8005270:	bf00      	nop
 8005272:	e008      	b.n	8005286 <USBD_CDC_Setup+0x1ae>
          break;
 8005274:	bf00      	nop
      }
      break;
 8005276:	e006      	b.n	8005286 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 fc87 	bl	8006b8e <USBD_CtlError>
      ret = USBD_FAIL;
 8005280:	2303      	movs	r3, #3
 8005282:	75fb      	strb	r3, [r7, #23]
      break;
 8005284:	bf00      	nop
  }

  return (uint8_t)ret;
 8005286:	7dfb      	ldrb	r3, [r7, #23]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80052a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	32b0      	adds	r2, #176	@ 0xb0
 80052ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e065      	b.n	8005386 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	32b0      	adds	r2, #176	@ 0xb0
 80052c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80052ca:	78fb      	ldrb	r3, [r7, #3]
 80052cc:	f003 020f 	and.w	r2, r3, #15
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	3318      	adds	r3, #24
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d02f      	beq.n	8005344 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80052e4:	78fb      	ldrb	r3, [r7, #3]
 80052e6:	f003 020f 	and.w	r2, r3, #15
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	3318      	adds	r3, #24
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	f003 010f 	and.w	r1, r3, #15
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	460b      	mov	r3, r1
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	440b      	add	r3, r1
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4403      	add	r3, r0
 800530c:	331c      	adds	r3, #28
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	fbb2 f1f3 	udiv	r1, r2, r3
 8005314:	fb01 f303 	mul.w	r3, r1, r3
 8005318:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800531a:	2b00      	cmp	r3, #0
 800531c:	d112      	bne.n	8005344 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	f003 020f 	and.w	r2, r3, #15
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	3318      	adds	r3, #24
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005336:	78f9      	ldrb	r1, [r7, #3]
 8005338:	2300      	movs	r3, #0
 800533a:	2200      	movs	r2, #0
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f002 f98e 	bl	800765e <USBD_LL_Transmit>
 8005342:	e01f      	b.n	8005384 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2200      	movs	r2, #0
 8005348:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	33b0      	adds	r3, #176	@ 0xb0
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d010      	beq.n	8005384 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	33b0      	adds	r3, #176	@ 0xb0
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005380:	78fa      	ldrb	r2, [r7, #3]
 8005382:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	460b      	mov	r3, r1
 8005398:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	32b0      	adds	r2, #176	@ 0xb0
 80053a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	32b0      	adds	r2, #176	@ 0xb0
 80053b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80053bc:	2303      	movs	r3, #3
 80053be:	e01a      	b.n	80053f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	4619      	mov	r1, r3
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f002 f98c 	bl	80076e2 <USBD_LL_GetRxDataSize>
 80053ca:	4602      	mov	r2, r0
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	33b0      	adds	r3, #176	@ 0xb0
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80053f0:	4611      	mov	r1, r2
 80053f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	32b0      	adds	r2, #176	@ 0xb0
 8005410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005414:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800541c:	2303      	movs	r3, #3
 800541e:	e024      	b.n	800546a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	33b0      	adds	r3, #176	@ 0xb0
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d019      	beq.n	8005468 <USBD_CDC_EP0_RxReady+0x6a>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800543a:	2bff      	cmp	r3, #255	@ 0xff
 800543c:	d014      	beq.n	8005468 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	33b0      	adds	r3, #176	@ 0xb0
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005456:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800545e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	22ff      	movs	r2, #255	@ 0xff
 8005464:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800547c:	2182      	movs	r1, #130	@ 0x82
 800547e:	4818      	ldr	r0, [pc, #96]	@ (80054e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005480:	f000 fd4f 	bl	8005f22 <USBD_GetEpDesc>
 8005484:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005486:	2101      	movs	r1, #1
 8005488:	4815      	ldr	r0, [pc, #84]	@ (80054e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800548a:	f000 fd4a 	bl	8005f22 <USBD_GetEpDesc>
 800548e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005490:	2181      	movs	r1, #129	@ 0x81
 8005492:	4813      	ldr	r0, [pc, #76]	@ (80054e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005494:	f000 fd45 	bl	8005f22 <USBD_GetEpDesc>
 8005498:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2210      	movs	r2, #16
 80054a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d006      	beq.n	80054ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054b4:	711a      	strb	r2, [r3, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d006      	beq.n	80054ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054c8:	711a      	strb	r2, [r3, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2243      	movs	r2, #67	@ 0x43
 80054d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80054d4:	4b02      	ldr	r3, [pc, #8]	@ (80054e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000050 	.word	0x20000050

080054e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054ec:	2182      	movs	r1, #130	@ 0x82
 80054ee:	4818      	ldr	r0, [pc, #96]	@ (8005550 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80054f0:	f000 fd17 	bl	8005f22 <USBD_GetEpDesc>
 80054f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054f6:	2101      	movs	r1, #1
 80054f8:	4815      	ldr	r0, [pc, #84]	@ (8005550 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80054fa:	f000 fd12 	bl	8005f22 <USBD_GetEpDesc>
 80054fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005500:	2181      	movs	r1, #129	@ 0x81
 8005502:	4813      	ldr	r0, [pc, #76]	@ (8005550 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005504:	f000 fd0d 	bl	8005f22 <USBD_GetEpDesc>
 8005508:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	2210      	movs	r2, #16
 8005514:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d006      	beq.n	800552a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2200      	movs	r2, #0
 8005520:	711a      	strb	r2, [r3, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f042 0202 	orr.w	r2, r2, #2
 8005528:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d006      	beq.n	800553e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	711a      	strb	r2, [r3, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f042 0202 	orr.w	r2, r2, #2
 800553c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2243      	movs	r2, #67	@ 0x43
 8005542:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005544:	4b02      	ldr	r3, [pc, #8]	@ (8005550 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20000050 	.word	0x20000050

08005554 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800555c:	2182      	movs	r1, #130	@ 0x82
 800555e:	4818      	ldr	r0, [pc, #96]	@ (80055c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005560:	f000 fcdf 	bl	8005f22 <USBD_GetEpDesc>
 8005564:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005566:	2101      	movs	r1, #1
 8005568:	4815      	ldr	r0, [pc, #84]	@ (80055c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800556a:	f000 fcda 	bl	8005f22 <USBD_GetEpDesc>
 800556e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005570:	2181      	movs	r1, #129	@ 0x81
 8005572:	4813      	ldr	r0, [pc, #76]	@ (80055c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005574:	f000 fcd5 	bl	8005f22 <USBD_GetEpDesc>
 8005578:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2210      	movs	r2, #16
 8005584:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d006      	beq.n	800559a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	2200      	movs	r2, #0
 8005590:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005594:	711a      	strb	r2, [r3, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d006      	beq.n	80055ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055a8:	711a      	strb	r2, [r3, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2243      	movs	r2, #67	@ 0x43
 80055b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80055b4:	4b02      	ldr	r3, [pc, #8]	@ (80055c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000050 	.word	0x20000050

080055c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	220a      	movs	r2, #10
 80055d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80055d2:	4b03      	ldr	r3, [pc, #12]	@ (80055e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	2000000c 	.word	0x2000000c

080055e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e009      	b.n	800560c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	33b0      	adds	r3, #176	@ 0xb0
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	32b0      	adds	r2, #176	@ 0xb0
 800562e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005632:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800563a:	2303      	movs	r3, #3
 800563c:	e008      	b.n	8005650 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	32b0      	adds	r2, #176	@ 0xb0
 8005670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005674:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800567c:	2303      	movs	r3, #3
 800567e:	e004      	b.n	800568a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	32b0      	adds	r2, #176	@ 0xb0
 80056aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ae:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e025      	b.n	800570a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d11f      	bne.n	8005708 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80056d0:	4b10      	ldr	r3, [pc, #64]	@ (8005714 <USBD_CDC_TransmitPacket+0x7c>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f003 020f 	and.w	r2, r3, #15
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4403      	add	r3, r0
 80056ea:	3318      	adds	r3, #24
 80056ec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80056ee:	4b09      	ldr	r3, [pc, #36]	@ (8005714 <USBD_CDC_TransmitPacket+0x7c>)
 80056f0:	7819      	ldrb	r1, [r3, #0]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f001 ffad 	bl	800765e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005708:	7bfb      	ldrb	r3, [r7, #15]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000093 	.word	0x20000093

08005718 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	32b0      	adds	r2, #176	@ 0xb0
 800572a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	32b0      	adds	r2, #176	@ 0xb0
 800573a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005742:	2303      	movs	r3, #3
 8005744:	e018      	b.n	8005778 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	7c1b      	ldrb	r3, [r3, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10a      	bne.n	8005764 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800574e:	4b0c      	ldr	r3, [pc, #48]	@ (8005780 <USBD_CDC_ReceivePacket+0x68>)
 8005750:	7819      	ldrb	r1, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005758:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f001 ff9f 	bl	80076a0 <USBD_LL_PrepareReceive>
 8005762:	e008      	b.n	8005776 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005764:	4b06      	ldr	r3, [pc, #24]	@ (8005780 <USBD_CDC_ReceivePacket+0x68>)
 8005766:	7819      	ldrb	r1, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800576e:	2340      	movs	r3, #64	@ 0x40
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 ff95 	bl	80076a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	20000094 	.word	0x20000094

08005784 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	4613      	mov	r3, r2
 8005790:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005798:	2303      	movs	r3, #3
 800579a:	e01f      	b.n	80057dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	79fa      	ldrb	r2, [r7, #7]
 80057ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f001 fe0f 	bl	80073f4 <USBD_LL_Init>
 80057d6:	4603      	mov	r3, r0
 80057d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80057da:	7dfb      	ldrb	r3, [r7, #23]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e025      	b.n	8005848 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	32ae      	adds	r2, #174	@ 0xae
 800580e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00f      	beq.n	8005838 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	32ae      	adds	r2, #174	@ 0xae
 8005822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005828:	f107 020e 	add.w	r2, r7, #14
 800582c:	4610      	mov	r0, r2
 800582e:	4798      	blx	r3
 8005830:	4602      	mov	r2, r0
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f001 fe17 	bl	800748c <USBD_LL_Start>
 800585e:	4603      	mov	r3, r0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005870:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b084      	sub	sp, #16
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	460b      	mov	r3, r1
 8005888:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005894:	2b00      	cmp	r3, #0
 8005896:	d009      	beq.n	80058ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	78fa      	ldrb	r2, [r7, #3]
 80058a2:	4611      	mov	r1, r2
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	4798      	blx	r3
 80058a8:	4603      	mov	r3, r0
 80058aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	460b      	mov	r3, r1
 80058c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	78fa      	ldrb	r2, [r7, #3]
 80058d0:	4611      	mov	r1, r2
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80058dc:	2303      	movs	r3, #3
 80058de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f001 f90c 	bl	8006b1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005910:	461a      	mov	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	2b02      	cmp	r3, #2
 8005924:	d01a      	beq.n	800595c <USBD_LL_SetupStage+0x72>
 8005926:	2b02      	cmp	r3, #2
 8005928:	d822      	bhi.n	8005970 <USBD_LL_SetupStage+0x86>
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <USBD_LL_SetupStage+0x4a>
 800592e:	2b01      	cmp	r3, #1
 8005930:	d00a      	beq.n	8005948 <USBD_LL_SetupStage+0x5e>
 8005932:	e01d      	b.n	8005970 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800593a:	4619      	mov	r1, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fb63 	bl	8006008 <USBD_StdDevReq>
 8005942:	4603      	mov	r3, r0
 8005944:	73fb      	strb	r3, [r7, #15]
      break;
 8005946:	e020      	b.n	800598a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fbcb 	bl	80060ec <USBD_StdItfReq>
 8005956:	4603      	mov	r3, r0
 8005958:	73fb      	strb	r3, [r7, #15]
      break;
 800595a:	e016      	b.n	800598a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fc2d 	bl	80061c4 <USBD_StdEPReq>
 800596a:	4603      	mov	r3, r0
 800596c:	73fb      	strb	r3, [r7, #15]
      break;
 800596e:	e00c      	b.n	800598a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005976:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800597a:	b2db      	uxtb	r3, r3
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 fde4 	bl	800754c <USBD_LL_StallEP>
 8005984:	4603      	mov	r3, r0
 8005986:	73fb      	strb	r3, [r7, #15]
      break;
 8005988:	bf00      	nop
  }

  return ret;
 800598a:	7bfb      	ldrb	r3, [r7, #15]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	460b      	mov	r3, r1
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80059a6:	7afb      	ldrb	r3, [r7, #11]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d16e      	bne.n	8005a8a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80059b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	f040 8098 	bne.w	8005af0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d913      	bls.n	80059f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	1ad2      	subs	r2, r2, r3
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	4293      	cmp	r3, r2
 80059e4:	bf28      	it	cs
 80059e6:	4613      	movcs	r3, r2
 80059e8:	461a      	mov	r2, r3
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f001 f988 	bl	8006d02 <USBD_CtlContinueRx>
 80059f2:	e07d      	b.n	8005af0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80059fa:	f003 031f 	and.w	r3, r3, #31
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d014      	beq.n	8005a2c <USBD_LL_DataOutStage+0x98>
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d81d      	bhi.n	8005a42 <USBD_LL_DataOutStage+0xae>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <USBD_LL_DataOutStage+0x7c>
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d003      	beq.n	8005a16 <USBD_LL_DataOutStage+0x82>
 8005a0e:	e018      	b.n	8005a42 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	75bb      	strb	r3, [r7, #22]
            break;
 8005a14:	e018      	b.n	8005a48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	4619      	mov	r1, r3
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 fa64 	bl	8005eee <USBD_CoreFindIF>
 8005a26:	4603      	mov	r3, r0
 8005a28:	75bb      	strb	r3, [r7, #22]
            break;
 8005a2a:	e00d      	b.n	8005a48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	4619      	mov	r1, r3
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 fa66 	bl	8005f08 <USBD_CoreFindEP>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	75bb      	strb	r3, [r7, #22]
            break;
 8005a40:	e002      	b.n	8005a48 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	75bb      	strb	r3, [r7, #22]
            break;
 8005a46:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005a48:	7dbb      	ldrb	r3, [r7, #22]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d119      	bne.n	8005a82 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d113      	bne.n	8005a82 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005a5a:	7dba      	ldrb	r2, [r7, #22]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	32ae      	adds	r2, #174	@ 0xae
 8005a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005a6a:	7dba      	ldrb	r2, [r7, #22]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005a72:	7dba      	ldrb	r2, [r7, #22]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	32ae      	adds	r2, #174	@ 0xae
 8005a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f001 f94e 	bl	8006d24 <USBD_CtlSendStatus>
 8005a88:	e032      	b.n	8005af0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005a8a:	7afb      	ldrb	r3, [r7, #11]
 8005a8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	4619      	mov	r1, r3
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fa37 	bl	8005f08 <USBD_CoreFindEP>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a9e:	7dbb      	ldrb	r3, [r7, #22]
 8005aa0:	2bff      	cmp	r3, #255	@ 0xff
 8005aa2:	d025      	beq.n	8005af0 <USBD_LL_DataOutStage+0x15c>
 8005aa4:	7dbb      	ldrb	r3, [r7, #22]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d122      	bne.n	8005af0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d117      	bne.n	8005ae6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005ab6:	7dba      	ldrb	r2, [r7, #22]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	32ae      	adds	r2, #174	@ 0xae
 8005abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00f      	beq.n	8005ae6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005ac6:	7dba      	ldrb	r2, [r7, #22]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005ace:	7dba      	ldrb	r2, [r7, #22]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	32ae      	adds	r2, #174	@ 0xae
 8005ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	7afa      	ldrb	r2, [r7, #11]
 8005adc:	4611      	mov	r1, r2
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	4798      	blx	r3
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
 8005aee:	e000      	b.n	8005af2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b086      	sub	sp, #24
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	460b      	mov	r3, r1
 8005b04:	607a      	str	r2, [r7, #4]
 8005b06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005b08:	7afb      	ldrb	r3, [r7, #11]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d16f      	bne.n	8005bee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3314      	adds	r3, #20
 8005b12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d15a      	bne.n	8005bd4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d914      	bls.n	8005b54 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	1ad2      	subs	r2, r2, r3
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f001 f8b0 	bl	8006ca6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b46:	2300      	movs	r3, #0
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f001 fda7 	bl	80076a0 <USBD_LL_PrepareReceive>
 8005b52:	e03f      	b.n	8005bd4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d11c      	bne.n	8005b9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d316      	bcc.n	8005b9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d20f      	bcs.n	8005b9a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f001 f891 	bl	8006ca6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2100      	movs	r1, #0
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f001 fd84 	bl	80076a0 <USBD_LL_PrepareReceive>
 8005b98:	e01c      	b.n	8005bd4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d10f      	bne.n	8005bc6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bc6:	2180      	movs	r1, #128	@ 0x80
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f001 fcbf 	bl	800754c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f001 f8bb 	bl	8006d4a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d03a      	beq.n	8005c54 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7ff fe42 	bl	8005868 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005bec:	e032      	b.n	8005c54 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005bee:	7afb      	ldrb	r3, [r7, #11]
 8005bf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f985 	bl	8005f08 <USBD_CoreFindEP>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c02:	7dfb      	ldrb	r3, [r7, #23]
 8005c04:	2bff      	cmp	r3, #255	@ 0xff
 8005c06:	d025      	beq.n	8005c54 <USBD_LL_DataInStage+0x15a>
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d122      	bne.n	8005c54 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d11c      	bne.n	8005c54 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005c1a:	7dfa      	ldrb	r2, [r7, #23]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	32ae      	adds	r2, #174	@ 0xae
 8005c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d014      	beq.n	8005c54 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005c2a:	7dfa      	ldrb	r2, [r7, #23]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005c32:	7dfa      	ldrb	r2, [r7, #23]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	32ae      	adds	r2, #174	@ 0xae
 8005c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	7afa      	ldrb	r2, [r7, #11]
 8005c40:	4611      	mov	r1, r2
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	4798      	blx	r3
 8005c46:	4603      	mov	r3, r0
 8005c48:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005c4a:	7dbb      	ldrb	r3, [r7, #22]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005c50:	7dbb      	ldrb	r3, [r7, #22]
 8005c52:	e000      	b.n	8005c56 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d014      	beq.n	8005cc4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00e      	beq.n	8005cc4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6852      	ldr	r2, [r2, #4]
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	4798      	blx	r3
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cc4:	2340      	movs	r3, #64	@ 0x40
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2100      	movs	r1, #0
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f001 fbf9 	bl	80074c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2240      	movs	r2, #64	@ 0x40
 8005cdc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ce0:	2340      	movs	r3, #64	@ 0x40
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2180      	movs	r1, #128	@ 0x80
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f001 fbeb 	bl	80074c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2240      	movs	r2, #64	@ 0x40
 8005cf6:	621a      	str	r2, [r3, #32]

  return ret;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	78fa      	ldrb	r2, [r7, #3]
 8005d12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d006      	beq.n	8005d44 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2204      	movs	r2, #4
 8005d48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d106      	bne.n	8005d7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b082      	sub	sp, #8
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d110      	bne.n	8005dc0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	32ae      	adds	r2, #174	@ 0xae
 8005de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e01c      	b.n	8005e26 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d115      	bne.n	8005e24 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	32ae      	adds	r2, #174	@ 0xae
 8005e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00b      	beq.n	8005e24 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	32ae      	adds	r2, #174	@ 0xae
 8005e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	78fa      	ldrb	r2, [r7, #3]
 8005e1e:	4611      	mov	r1, r2
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	460b      	mov	r3, r1
 8005e38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	32ae      	adds	r2, #174	@ 0xae
 8005e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e01c      	b.n	8005e8a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d115      	bne.n	8005e88 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	32ae      	adds	r2, #174	@ 0xae
 8005e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00b      	beq.n	8005e88 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	32ae      	adds	r2, #174	@ 0xae
 8005e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e80:	78fa      	ldrb	r2, [r7, #3]
 8005e82:	4611      	mov	r1, r2
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00e      	beq.n	8005ee4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6852      	ldr	r2, [r2, #4]
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	4798      	blx	r3
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005efa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b086      	sub	sp, #24
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	885b      	ldrh	r3, [r3, #2]
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	7812      	ldrb	r2, [r2, #0]
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d91f      	bls.n	8005f88 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005f4e:	e013      	b.n	8005f78 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005f50:	f107 030a 	add.w	r3, r7, #10
 8005f54:	4619      	mov	r1, r3
 8005f56:	6978      	ldr	r0, [r7, #20]
 8005f58:	f000 f81b 	bl	8005f92 <USBD_GetNextDesc>
 8005f5c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	785b      	ldrb	r3, [r3, #1]
 8005f62:	2b05      	cmp	r3, #5
 8005f64:	d108      	bne.n	8005f78 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	789b      	ldrb	r3, [r3, #2]
 8005f6e:	78fa      	ldrb	r2, [r7, #3]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d008      	beq.n	8005f86 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005f74:	2300      	movs	r3, #0
 8005f76:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	885b      	ldrh	r3, [r3, #2]
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	897b      	ldrh	r3, [r7, #10]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d8e5      	bhi.n	8005f50 <USBD_GetEpDesc+0x2e>
 8005f84:	e000      	b.n	8005f88 <USBD_GetEpDesc+0x66>
          break;
 8005f86:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005f88:	693b      	ldr	r3, [r7, #16]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b085      	sub	sp, #20
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	7812      	ldrb	r2, [r2, #0]
 8005fa8:	4413      	add	r3, r2
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4413      	add	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b087      	sub	sp, #28
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005fe8:	8a3b      	ldrh	r3, [r7, #16]
 8005fea:	021b      	lsls	r3, r3, #8
 8005fec:	b21a      	sxth	r2, r3
 8005fee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	b21b      	sxth	r3, r3
 8005ff6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005ff8:	89fb      	ldrh	r3, [r7, #14]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800601e:	2b40      	cmp	r3, #64	@ 0x40
 8006020:	d005      	beq.n	800602e <USBD_StdDevReq+0x26>
 8006022:	2b40      	cmp	r3, #64	@ 0x40
 8006024:	d857      	bhi.n	80060d6 <USBD_StdDevReq+0xce>
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00f      	beq.n	800604a <USBD_StdDevReq+0x42>
 800602a:	2b20      	cmp	r3, #32
 800602c:	d153      	bne.n	80060d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	32ae      	adds	r2, #174	@ 0xae
 8006038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	4798      	blx	r3
 8006044:	4603      	mov	r3, r0
 8006046:	73fb      	strb	r3, [r7, #15]
      break;
 8006048:	e04a      	b.n	80060e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	785b      	ldrb	r3, [r3, #1]
 800604e:	2b09      	cmp	r3, #9
 8006050:	d83b      	bhi.n	80060ca <USBD_StdDevReq+0xc2>
 8006052:	a201      	add	r2, pc, #4	@ (adr r2, 8006058 <USBD_StdDevReq+0x50>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	080060ad 	.word	0x080060ad
 800605c:	080060c1 	.word	0x080060c1
 8006060:	080060cb 	.word	0x080060cb
 8006064:	080060b7 	.word	0x080060b7
 8006068:	080060cb 	.word	0x080060cb
 800606c:	0800608b 	.word	0x0800608b
 8006070:	08006081 	.word	0x08006081
 8006074:	080060cb 	.word	0x080060cb
 8006078:	080060a3 	.word	0x080060a3
 800607c:	08006095 	.word	0x08006095
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006080:	6839      	ldr	r1, [r7, #0]
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fa3c 	bl	8006500 <USBD_GetDescriptor>
          break;
 8006088:	e024      	b.n	80060d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fba1 	bl	80067d4 <USBD_SetAddress>
          break;
 8006092:	e01f      	b.n	80060d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006094:	6839      	ldr	r1, [r7, #0]
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fbe0 	bl	800685c <USBD_SetConfig>
 800609c:	4603      	mov	r3, r0
 800609e:	73fb      	strb	r3, [r7, #15]
          break;
 80060a0:	e018      	b.n	80060d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fc83 	bl	80069b0 <USBD_GetConfig>
          break;
 80060aa:	e013      	b.n	80060d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fcb4 	bl	8006a1c <USBD_GetStatus>
          break;
 80060b4:	e00e      	b.n	80060d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80060b6:	6839      	ldr	r1, [r7, #0]
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fce3 	bl	8006a84 <USBD_SetFeature>
          break;
 80060be:	e009      	b.n	80060d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fd07 	bl	8006ad6 <USBD_ClrFeature>
          break;
 80060c8:	e004      	b.n	80060d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fd5e 	bl	8006b8e <USBD_CtlError>
          break;
 80060d2:	bf00      	nop
      }
      break;
 80060d4:	e004      	b.n	80060e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fd58 	bl	8006b8e <USBD_CtlError>
      break;
 80060de:	bf00      	nop
  }

  return ret;
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop

080060ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006102:	2b40      	cmp	r3, #64	@ 0x40
 8006104:	d005      	beq.n	8006112 <USBD_StdItfReq+0x26>
 8006106:	2b40      	cmp	r3, #64	@ 0x40
 8006108:	d852      	bhi.n	80061b0 <USBD_StdItfReq+0xc4>
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <USBD_StdItfReq+0x26>
 800610e:	2b20      	cmp	r3, #32
 8006110:	d14e      	bne.n	80061b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006118:	b2db      	uxtb	r3, r3
 800611a:	3b01      	subs	r3, #1
 800611c:	2b02      	cmp	r3, #2
 800611e:	d840      	bhi.n	80061a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	889b      	ldrh	r3, [r3, #4]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b01      	cmp	r3, #1
 8006128:	d836      	bhi.n	8006198 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	889b      	ldrh	r3, [r3, #4]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff fedb 	bl	8005eee <USBD_CoreFindIF>
 8006138:	4603      	mov	r3, r0
 800613a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800613c:	7bbb      	ldrb	r3, [r7, #14]
 800613e:	2bff      	cmp	r3, #255	@ 0xff
 8006140:	d01d      	beq.n	800617e <USBD_StdItfReq+0x92>
 8006142:	7bbb      	ldrb	r3, [r7, #14]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d11a      	bne.n	800617e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006148:	7bba      	ldrb	r2, [r7, #14]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	32ae      	adds	r2, #174	@ 0xae
 800614e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00f      	beq.n	8006178 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006158:	7bba      	ldrb	r2, [r7, #14]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006160:	7bba      	ldrb	r2, [r7, #14]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	32ae      	adds	r2, #174	@ 0xae
 8006166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
 8006172:	4603      	mov	r3, r0
 8006174:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006176:	e004      	b.n	8006182 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006178:	2303      	movs	r3, #3
 800617a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800617c:	e001      	b.n	8006182 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800617e:	2303      	movs	r3, #3
 8006180:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	88db      	ldrh	r3, [r3, #6]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d110      	bne.n	80061ac <USBD_StdItfReq+0xc0>
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10d      	bne.n	80061ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fdc7 	bl	8006d24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006196:	e009      	b.n	80061ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006198:	6839      	ldr	r1, [r7, #0]
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fcf7 	bl	8006b8e <USBD_CtlError>
          break;
 80061a0:	e004      	b.n	80061ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80061a2:	6839      	ldr	r1, [r7, #0]
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fcf2 	bl	8006b8e <USBD_CtlError>
          break;
 80061aa:	e000      	b.n	80061ae <USBD_StdItfReq+0xc2>
          break;
 80061ac:	bf00      	nop
      }
      break;
 80061ae:	e004      	b.n	80061ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fceb 	bl	8006b8e <USBD_CtlError>
      break;
 80061b8:	bf00      	nop
  }

  return ret;
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	889b      	ldrh	r3, [r3, #4]
 80061d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80061e0:	2b40      	cmp	r3, #64	@ 0x40
 80061e2:	d007      	beq.n	80061f4 <USBD_StdEPReq+0x30>
 80061e4:	2b40      	cmp	r3, #64	@ 0x40
 80061e6:	f200 817f 	bhi.w	80064e8 <USBD_StdEPReq+0x324>
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d02a      	beq.n	8006244 <USBD_StdEPReq+0x80>
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	f040 817a 	bne.w	80064e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80061f4:	7bbb      	ldrb	r3, [r7, #14]
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff fe85 	bl	8005f08 <USBD_CoreFindEP>
 80061fe:	4603      	mov	r3, r0
 8006200:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006202:	7b7b      	ldrb	r3, [r7, #13]
 8006204:	2bff      	cmp	r3, #255	@ 0xff
 8006206:	f000 8174 	beq.w	80064f2 <USBD_StdEPReq+0x32e>
 800620a:	7b7b      	ldrb	r3, [r7, #13]
 800620c:	2b00      	cmp	r3, #0
 800620e:	f040 8170 	bne.w	80064f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006212:	7b7a      	ldrb	r2, [r7, #13]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800621a:	7b7a      	ldrb	r2, [r7, #13]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	32ae      	adds	r2, #174	@ 0xae
 8006220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 8163 	beq.w	80064f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800622c:	7b7a      	ldrb	r2, [r7, #13]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	32ae      	adds	r2, #174	@ 0xae
 8006232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	4798      	blx	r3
 800623e:	4603      	mov	r3, r0
 8006240:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006242:	e156      	b.n	80064f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	785b      	ldrb	r3, [r3, #1]
 8006248:	2b03      	cmp	r3, #3
 800624a:	d008      	beq.n	800625e <USBD_StdEPReq+0x9a>
 800624c:	2b03      	cmp	r3, #3
 800624e:	f300 8145 	bgt.w	80064dc <USBD_StdEPReq+0x318>
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 809b 	beq.w	800638e <USBD_StdEPReq+0x1ca>
 8006258:	2b01      	cmp	r3, #1
 800625a:	d03c      	beq.n	80062d6 <USBD_StdEPReq+0x112>
 800625c:	e13e      	b.n	80064dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d002      	beq.n	8006270 <USBD_StdEPReq+0xac>
 800626a:	2b03      	cmp	r3, #3
 800626c:	d016      	beq.n	800629c <USBD_StdEPReq+0xd8>
 800626e:	e02c      	b.n	80062ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006270:	7bbb      	ldrb	r3, [r7, #14]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00d      	beq.n	8006292 <USBD_StdEPReq+0xce>
 8006276:	7bbb      	ldrb	r3, [r7, #14]
 8006278:	2b80      	cmp	r3, #128	@ 0x80
 800627a:	d00a      	beq.n	8006292 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f001 f963 	bl	800754c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006286:	2180      	movs	r1, #128	@ 0x80
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f001 f95f 	bl	800754c <USBD_LL_StallEP>
 800628e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006290:	e020      	b.n	80062d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fc7a 	bl	8006b8e <USBD_CtlError>
              break;
 800629a:	e01b      	b.n	80062d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	885b      	ldrh	r3, [r3, #2]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10e      	bne.n	80062c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062a4:	7bbb      	ldrb	r3, [r7, #14]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00b      	beq.n	80062c2 <USBD_StdEPReq+0xfe>
 80062aa:	7bbb      	ldrb	r3, [r7, #14]
 80062ac:	2b80      	cmp	r3, #128	@ 0x80
 80062ae:	d008      	beq.n	80062c2 <USBD_StdEPReq+0xfe>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	88db      	ldrh	r3, [r3, #6]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d104      	bne.n	80062c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80062b8:	7bbb      	ldrb	r3, [r7, #14]
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 f945 	bl	800754c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fd2e 	bl	8006d24 <USBD_CtlSendStatus>

              break;
 80062c8:	e004      	b.n	80062d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fc5e 	bl	8006b8e <USBD_CtlError>
              break;
 80062d2:	bf00      	nop
          }
          break;
 80062d4:	e107      	b.n	80064e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d002      	beq.n	80062e8 <USBD_StdEPReq+0x124>
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d016      	beq.n	8006314 <USBD_StdEPReq+0x150>
 80062e6:	e04b      	b.n	8006380 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062e8:	7bbb      	ldrb	r3, [r7, #14]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00d      	beq.n	800630a <USBD_StdEPReq+0x146>
 80062ee:	7bbb      	ldrb	r3, [r7, #14]
 80062f0:	2b80      	cmp	r3, #128	@ 0x80
 80062f2:	d00a      	beq.n	800630a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062f4:	7bbb      	ldrb	r3, [r7, #14]
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 f927 	bl	800754c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062fe:	2180      	movs	r1, #128	@ 0x80
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f001 f923 	bl	800754c <USBD_LL_StallEP>
 8006306:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006308:	e040      	b.n	800638c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fc3e 	bl	8006b8e <USBD_CtlError>
              break;
 8006312:	e03b      	b.n	800638c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	885b      	ldrh	r3, [r3, #2]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d136      	bne.n	800638a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800631c:	7bbb      	ldrb	r3, [r7, #14]
 800631e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006322:	2b00      	cmp	r3, #0
 8006324:	d004      	beq.n	8006330 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006326:	7bbb      	ldrb	r3, [r7, #14]
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 f92d 	bl	800758a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fcf7 	bl	8006d24 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff fde4 	bl	8005f08 <USBD_CoreFindEP>
 8006340:	4603      	mov	r3, r0
 8006342:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006344:	7b7b      	ldrb	r3, [r7, #13]
 8006346:	2bff      	cmp	r3, #255	@ 0xff
 8006348:	d01f      	beq.n	800638a <USBD_StdEPReq+0x1c6>
 800634a:	7b7b      	ldrb	r3, [r7, #13]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d11c      	bne.n	800638a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006350:	7b7a      	ldrb	r2, [r7, #13]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006358:	7b7a      	ldrb	r2, [r7, #13]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	32ae      	adds	r2, #174	@ 0xae
 800635e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d010      	beq.n	800638a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006368:	7b7a      	ldrb	r2, [r7, #13]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	32ae      	adds	r2, #174	@ 0xae
 800636e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	6839      	ldr	r1, [r7, #0]
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	4798      	blx	r3
 800637a:	4603      	mov	r3, r0
 800637c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800637e:	e004      	b.n	800638a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fc03 	bl	8006b8e <USBD_CtlError>
              break;
 8006388:	e000      	b.n	800638c <USBD_StdEPReq+0x1c8>
              break;
 800638a:	bf00      	nop
          }
          break;
 800638c:	e0ab      	b.n	80064e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d002      	beq.n	80063a0 <USBD_StdEPReq+0x1dc>
 800639a:	2b03      	cmp	r3, #3
 800639c:	d032      	beq.n	8006404 <USBD_StdEPReq+0x240>
 800639e:	e097      	b.n	80064d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <USBD_StdEPReq+0x1f2>
 80063a6:	7bbb      	ldrb	r3, [r7, #14]
 80063a8:	2b80      	cmp	r3, #128	@ 0x80
 80063aa:	d004      	beq.n	80063b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fbed 	bl	8006b8e <USBD_CtlError>
                break;
 80063b4:	e091      	b.n	80064da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	da0b      	bge.n	80063d6 <USBD_StdEPReq+0x212>
 80063be:	7bbb      	ldrb	r3, [r7, #14]
 80063c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80063c4:	4613      	mov	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	3310      	adds	r3, #16
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	4413      	add	r3, r2
 80063d2:	3304      	adds	r3, #4
 80063d4:	e00b      	b.n	80063ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	4413      	add	r3, r2
 80063ec:	3304      	adds	r3, #4
 80063ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2202      	movs	r2, #2
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fc37 	bl	8006c70 <USBD_CtlSendData>
              break;
 8006402:	e06a      	b.n	80064da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006404:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006408:	2b00      	cmp	r3, #0
 800640a:	da11      	bge.n	8006430 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800640c:	7bbb      	ldrb	r3, [r7, #14]
 800640e:	f003 020f 	and.w	r2, r3, #15
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	3324      	adds	r3, #36	@ 0x24
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d117      	bne.n	8006456 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fbb0 	bl	8006b8e <USBD_CtlError>
                  break;
 800642e:	e054      	b.n	80064da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	f003 020f 	and.w	r2, r3, #15
 8006436:	6879      	ldr	r1, [r7, #4]
 8006438:	4613      	mov	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	440b      	add	r3, r1
 8006442:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d104      	bne.n	8006456 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fb9d 	bl	8006b8e <USBD_CtlError>
                  break;
 8006454:	e041      	b.n	80064da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006456:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800645a:	2b00      	cmp	r3, #0
 800645c:	da0b      	bge.n	8006476 <USBD_StdEPReq+0x2b2>
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006464:	4613      	mov	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	3310      	adds	r3, #16
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	4413      	add	r3, r2
 8006472:	3304      	adds	r3, #4
 8006474:	e00b      	b.n	800648e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	4413      	add	r3, r2
 800648c:	3304      	adds	r3, #4
 800648e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006490:	7bbb      	ldrb	r3, [r7, #14]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <USBD_StdEPReq+0x2d8>
 8006496:	7bbb      	ldrb	r3, [r7, #14]
 8006498:	2b80      	cmp	r3, #128	@ 0x80
 800649a:	d103      	bne.n	80064a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	e00e      	b.n	80064c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80064a4:	7bbb      	ldrb	r3, [r7, #14]
 80064a6:	4619      	mov	r1, r3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 f88d 	bl	80075c8 <USBD_LL_IsStallEP>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2201      	movs	r2, #1
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e002      	b.n	80064c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2202      	movs	r2, #2
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fbd1 	bl	8006c70 <USBD_CtlSendData>
              break;
 80064ce:	e004      	b.n	80064da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fb5b 	bl	8006b8e <USBD_CtlError>
              break;
 80064d8:	bf00      	nop
          }
          break;
 80064da:	e004      	b.n	80064e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fb55 	bl	8006b8e <USBD_CtlError>
          break;
 80064e4:	bf00      	nop
      }
      break;
 80064e6:	e005      	b.n	80064f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fb4f 	bl	8006b8e <USBD_CtlError>
      break;
 80064f0:	e000      	b.n	80064f4 <USBD_StdEPReq+0x330>
      break;
 80064f2:	bf00      	nop
  }

  return ret;
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	885b      	ldrh	r3, [r3, #2]
 800651a:	0a1b      	lsrs	r3, r3, #8
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	2b06      	cmp	r3, #6
 8006522:	f200 8128 	bhi.w	8006776 <USBD_GetDescriptor+0x276>
 8006526:	a201      	add	r2, pc, #4	@ (adr r2, 800652c <USBD_GetDescriptor+0x2c>)
 8006528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652c:	08006549 	.word	0x08006549
 8006530:	08006561 	.word	0x08006561
 8006534:	080065a1 	.word	0x080065a1
 8006538:	08006777 	.word	0x08006777
 800653c:	08006777 	.word	0x08006777
 8006540:	08006717 	.word	0x08006717
 8006544:	08006743 	.word	0x08006743
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	7c12      	ldrb	r2, [r2, #16]
 8006554:	f107 0108 	add.w	r1, r7, #8
 8006558:	4610      	mov	r0, r2
 800655a:	4798      	blx	r3
 800655c:	60f8      	str	r0, [r7, #12]
      break;
 800655e:	e112      	b.n	8006786 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	7c1b      	ldrb	r3, [r3, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10d      	bne.n	8006584 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800656e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006570:	f107 0208 	add.w	r2, r7, #8
 8006574:	4610      	mov	r0, r2
 8006576:	4798      	blx	r3
 8006578:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3301      	adds	r3, #1
 800657e:	2202      	movs	r2, #2
 8006580:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006582:	e100      	b.n	8006786 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800658a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658c:	f107 0208 	add.w	r2, r7, #8
 8006590:	4610      	mov	r0, r2
 8006592:	4798      	blx	r3
 8006594:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3301      	adds	r3, #1
 800659a:	2202      	movs	r2, #2
 800659c:	701a      	strb	r2, [r3, #0]
      break;
 800659e:	e0f2      	b.n	8006786 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	885b      	ldrh	r3, [r3, #2]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b05      	cmp	r3, #5
 80065a8:	f200 80ac 	bhi.w	8006704 <USBD_GetDescriptor+0x204>
 80065ac:	a201      	add	r2, pc, #4	@ (adr r2, 80065b4 <USBD_GetDescriptor+0xb4>)
 80065ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b2:	bf00      	nop
 80065b4:	080065cd 	.word	0x080065cd
 80065b8:	08006601 	.word	0x08006601
 80065bc:	08006635 	.word	0x08006635
 80065c0:	08006669 	.word	0x08006669
 80065c4:	0800669d 	.word	0x0800669d
 80065c8:	080066d1 	.word	0x080066d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00b      	beq.n	80065f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	7c12      	ldrb	r2, [r2, #16]
 80065e4:	f107 0108 	add.w	r1, r7, #8
 80065e8:	4610      	mov	r0, r2
 80065ea:	4798      	blx	r3
 80065ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065ee:	e091      	b.n	8006714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 facb 	bl	8006b8e <USBD_CtlError>
            err++;
 80065f8:	7afb      	ldrb	r3, [r7, #11]
 80065fa:	3301      	adds	r3, #1
 80065fc:	72fb      	strb	r3, [r7, #11]
          break;
 80065fe:	e089      	b.n	8006714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00b      	beq.n	8006624 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	7c12      	ldrb	r2, [r2, #16]
 8006618:	f107 0108 	add.w	r1, r7, #8
 800661c:	4610      	mov	r0, r2
 800661e:	4798      	blx	r3
 8006620:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006622:	e077      	b.n	8006714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006624:	6839      	ldr	r1, [r7, #0]
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fab1 	bl	8006b8e <USBD_CtlError>
            err++;
 800662c:	7afb      	ldrb	r3, [r7, #11]
 800662e:	3301      	adds	r3, #1
 8006630:	72fb      	strb	r3, [r7, #11]
          break;
 8006632:	e06f      	b.n	8006714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00b      	beq.n	8006658 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	7c12      	ldrb	r2, [r2, #16]
 800664c:	f107 0108 	add.w	r1, r7, #8
 8006650:	4610      	mov	r0, r2
 8006652:	4798      	blx	r3
 8006654:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006656:	e05d      	b.n	8006714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fa97 	bl	8006b8e <USBD_CtlError>
            err++;
 8006660:	7afb      	ldrb	r3, [r7, #11]
 8006662:	3301      	adds	r3, #1
 8006664:	72fb      	strb	r3, [r7, #11]
          break;
 8006666:	e055      	b.n	8006714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	7c12      	ldrb	r2, [r2, #16]
 8006680:	f107 0108 	add.w	r1, r7, #8
 8006684:	4610      	mov	r0, r2
 8006686:	4798      	blx	r3
 8006688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800668a:	e043      	b.n	8006714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fa7d 	bl	8006b8e <USBD_CtlError>
            err++;
 8006694:	7afb      	ldrb	r3, [r7, #11]
 8006696:	3301      	adds	r3, #1
 8006698:	72fb      	strb	r3, [r7, #11]
          break;
 800669a:	e03b      	b.n	8006714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00b      	beq.n	80066c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	7c12      	ldrb	r2, [r2, #16]
 80066b4:	f107 0108 	add.w	r1, r7, #8
 80066b8:	4610      	mov	r0, r2
 80066ba:	4798      	blx	r3
 80066bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066be:	e029      	b.n	8006714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fa63 	bl	8006b8e <USBD_CtlError>
            err++;
 80066c8:	7afb      	ldrb	r3, [r7, #11]
 80066ca:	3301      	adds	r3, #1
 80066cc:	72fb      	strb	r3, [r7, #11]
          break;
 80066ce:	e021      	b.n	8006714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00b      	beq.n	80066f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	7c12      	ldrb	r2, [r2, #16]
 80066e8:	f107 0108 	add.w	r1, r7, #8
 80066ec:	4610      	mov	r0, r2
 80066ee:	4798      	blx	r3
 80066f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066f2:	e00f      	b.n	8006714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fa49 	bl	8006b8e <USBD_CtlError>
            err++;
 80066fc:	7afb      	ldrb	r3, [r7, #11]
 80066fe:	3301      	adds	r3, #1
 8006700:	72fb      	strb	r3, [r7, #11]
          break;
 8006702:	e007      	b.n	8006714 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fa41 	bl	8006b8e <USBD_CtlError>
          err++;
 800670c:	7afb      	ldrb	r3, [r7, #11]
 800670e:	3301      	adds	r3, #1
 8006710:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006712:	bf00      	nop
      }
      break;
 8006714:	e037      	b.n	8006786 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	7c1b      	ldrb	r3, [r3, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006726:	f107 0208 	add.w	r2, r7, #8
 800672a:	4610      	mov	r0, r2
 800672c:	4798      	blx	r3
 800672e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006730:	e029      	b.n	8006786 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fa2a 	bl	8006b8e <USBD_CtlError>
        err++;
 800673a:	7afb      	ldrb	r3, [r7, #11]
 800673c:	3301      	adds	r3, #1
 800673e:	72fb      	strb	r3, [r7, #11]
      break;
 8006740:	e021      	b.n	8006786 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	7c1b      	ldrb	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10d      	bne.n	8006766 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006752:	f107 0208 	add.w	r2, r7, #8
 8006756:	4610      	mov	r0, r2
 8006758:	4798      	blx	r3
 800675a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3301      	adds	r3, #1
 8006760:	2207      	movs	r2, #7
 8006762:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006764:	e00f      	b.n	8006786 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fa10 	bl	8006b8e <USBD_CtlError>
        err++;
 800676e:	7afb      	ldrb	r3, [r7, #11]
 8006770:	3301      	adds	r3, #1
 8006772:	72fb      	strb	r3, [r7, #11]
      break;
 8006774:	e007      	b.n	8006786 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fa08 	bl	8006b8e <USBD_CtlError>
      err++;
 800677e:	7afb      	ldrb	r3, [r7, #11]
 8006780:	3301      	adds	r3, #1
 8006782:	72fb      	strb	r3, [r7, #11]
      break;
 8006784:	bf00      	nop
  }

  if (err != 0U)
 8006786:	7afb      	ldrb	r3, [r7, #11]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d11e      	bne.n	80067ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	88db      	ldrh	r3, [r3, #6]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d016      	beq.n	80067c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006794:	893b      	ldrh	r3, [r7, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00e      	beq.n	80067b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	88da      	ldrh	r2, [r3, #6]
 800679e:	893b      	ldrh	r3, [r7, #8]
 80067a0:	4293      	cmp	r3, r2
 80067a2:	bf28      	it	cs
 80067a4:	4613      	movcs	r3, r2
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80067aa:	893b      	ldrh	r3, [r7, #8]
 80067ac:	461a      	mov	r2, r3
 80067ae:	68f9      	ldr	r1, [r7, #12]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fa5d 	bl	8006c70 <USBD_CtlSendData>
 80067b6:	e009      	b.n	80067cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f9e7 	bl	8006b8e <USBD_CtlError>
 80067c0:	e004      	b.n	80067cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 faae 	bl	8006d24 <USBD_CtlSendStatus>
 80067c8:	e000      	b.n	80067cc <USBD_GetDescriptor+0x2cc>
    return;
 80067ca:	bf00      	nop
  }
}
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop

080067d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	889b      	ldrh	r3, [r3, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d131      	bne.n	800684a <USBD_SetAddress+0x76>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	88db      	ldrh	r3, [r3, #6]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d12d      	bne.n	800684a <USBD_SetAddress+0x76>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	885b      	ldrh	r3, [r3, #2]
 80067f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80067f4:	d829      	bhi.n	800684a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	885b      	ldrh	r3, [r3, #2]
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006800:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b03      	cmp	r3, #3
 800680c:	d104      	bne.n	8006818 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f9bc 	bl	8006b8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006816:	e01d      	b.n	8006854 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	7bfa      	ldrb	r2, [r7, #15]
 800681c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fefb 	bl	8007620 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fa7a 	bl	8006d24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d004      	beq.n	8006840 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2202      	movs	r2, #2
 800683a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800683e:	e009      	b.n	8006854 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006848:	e004      	b.n	8006854 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f99e 	bl	8006b8e <USBD_CtlError>
  }
}
 8006852:	bf00      	nop
 8006854:	bf00      	nop
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	885b      	ldrh	r3, [r3, #2]
 800686e:	b2da      	uxtb	r2, r3
 8006870:	4b4e      	ldr	r3, [pc, #312]	@ (80069ac <USBD_SetConfig+0x150>)
 8006872:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006874:	4b4d      	ldr	r3, [pc, #308]	@ (80069ac <USBD_SetConfig+0x150>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d905      	bls.n	8006888 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f985 	bl	8006b8e <USBD_CtlError>
    return USBD_FAIL;
 8006884:	2303      	movs	r3, #3
 8006886:	e08c      	b.n	80069a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d002      	beq.n	800689a <USBD_SetConfig+0x3e>
 8006894:	2b03      	cmp	r3, #3
 8006896:	d029      	beq.n	80068ec <USBD_SetConfig+0x90>
 8006898:	e075      	b.n	8006986 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800689a:	4b44      	ldr	r3, [pc, #272]	@ (80069ac <USBD_SetConfig+0x150>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d020      	beq.n	80068e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80068a2:	4b42      	ldr	r3, [pc, #264]	@ (80069ac <USBD_SetConfig+0x150>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068ac:	4b3f      	ldr	r3, [pc, #252]	@ (80069ac <USBD_SetConfig+0x150>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	4619      	mov	r1, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fe ffe3 	bl	800587e <USBD_SetClassConfig>
 80068b8:	4603      	mov	r3, r0
 80068ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d008      	beq.n	80068d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f962 	bl	8006b8e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2202      	movs	r2, #2
 80068ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80068d2:	e065      	b.n	80069a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fa25 	bl	8006d24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2203      	movs	r2, #3
 80068de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80068e2:	e05d      	b.n	80069a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fa1d 	bl	8006d24 <USBD_CtlSendStatus>
      break;
 80068ea:	e059      	b.n	80069a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80068ec:	4b2f      	ldr	r3, [pc, #188]	@ (80069ac <USBD_SetConfig+0x150>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d112      	bne.n	800691a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80068fc:	4b2b      	ldr	r3, [pc, #172]	@ (80069ac <USBD_SetConfig+0x150>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	461a      	mov	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006906:	4b29      	ldr	r3, [pc, #164]	@ (80069ac <USBD_SetConfig+0x150>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7fe ffd2 	bl	80058b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fa06 	bl	8006d24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006918:	e042      	b.n	80069a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800691a:	4b24      	ldr	r3, [pc, #144]	@ (80069ac <USBD_SetConfig+0x150>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	429a      	cmp	r2, r3
 8006926:	d02a      	beq.n	800697e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	b2db      	uxtb	r3, r3
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7fe ffc0 	bl	80058b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006936:	4b1d      	ldr	r3, [pc, #116]	@ (80069ac <USBD_SetConfig+0x150>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006940:	4b1a      	ldr	r3, [pc, #104]	@ (80069ac <USBD_SetConfig+0x150>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7fe ff99 	bl	800587e <USBD_SetClassConfig>
 800694c:	4603      	mov	r3, r0
 800694e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006950:	7bfb      	ldrb	r3, [r7, #15]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00f      	beq.n	8006976 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f918 	bl	8006b8e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7fe ffa5 	bl	80058b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006974:	e014      	b.n	80069a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f9d4 	bl	8006d24 <USBD_CtlSendStatus>
      break;
 800697c:	e010      	b.n	80069a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f9d0 	bl	8006d24 <USBD_CtlSendStatus>
      break;
 8006984:	e00c      	b.n	80069a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f900 	bl	8006b8e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800698e:	4b07      	ldr	r3, [pc, #28]	@ (80069ac <USBD_SetConfig+0x150>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7fe ff8e 	bl	80058b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800699a:	2303      	movs	r3, #3
 800699c:	73fb      	strb	r3, [r7, #15]
      break;
 800699e:	bf00      	nop
  }

  return ret;
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	200001b8 	.word	0x200001b8

080069b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	88db      	ldrh	r3, [r3, #6]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d004      	beq.n	80069cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f8e2 	bl	8006b8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80069ca:	e023      	b.n	8006a14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	dc02      	bgt.n	80069de <USBD_GetConfig+0x2e>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	dc03      	bgt.n	80069e4 <USBD_GetConfig+0x34>
 80069dc:	e015      	b.n	8006a0a <USBD_GetConfig+0x5a>
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d00b      	beq.n	80069fa <USBD_GetConfig+0x4a>
 80069e2:	e012      	b.n	8006a0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3308      	adds	r3, #8
 80069ee:	2201      	movs	r2, #1
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f93c 	bl	8006c70 <USBD_CtlSendData>
        break;
 80069f8:	e00c      	b.n	8006a14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3304      	adds	r3, #4
 80069fe:	2201      	movs	r2, #1
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f934 	bl	8006c70 <USBD_CtlSendData>
        break;
 8006a08:	e004      	b.n	8006a14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f8be 	bl	8006b8e <USBD_CtlError>
        break;
 8006a12:	bf00      	nop
}
 8006a14:	bf00      	nop
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d81e      	bhi.n	8006a72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	88db      	ldrh	r3, [r3, #6]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d004      	beq.n	8006a46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f8a5 	bl	8006b8e <USBD_CtlError>
        break;
 8006a44:	e01a      	b.n	8006a7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d005      	beq.n	8006a62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f043 0202 	orr.w	r2, r3, #2
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	330c      	adds	r3, #12
 8006a66:	2202      	movs	r2, #2
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f900 	bl	8006c70 <USBD_CtlSendData>
      break;
 8006a70:	e004      	b.n	8006a7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f88a 	bl	8006b8e <USBD_CtlError>
      break;
 8006a7a:	bf00      	nop
  }
}
 8006a7c:	bf00      	nop
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	885b      	ldrh	r3, [r3, #2]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d107      	bne.n	8006aa6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f940 	bl	8006d24 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006aa4:	e013      	b.n	8006ace <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	885b      	ldrh	r3, [r3, #2]
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d10b      	bne.n	8006ac6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	889b      	ldrh	r3, [r3, #4]
 8006ab2:	0a1b      	lsrs	r3, r3, #8
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f930 	bl	8006d24 <USBD_CtlSendStatus>
}
 8006ac4:	e003      	b.n	8006ace <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f860 	bl	8006b8e <USBD_CtlError>
}
 8006ace:	bf00      	nop
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d80b      	bhi.n	8006b06 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	885b      	ldrh	r3, [r3, #2]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d10c      	bne.n	8006b10 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f910 	bl	8006d24 <USBD_CtlSendStatus>
      }
      break;
 8006b04:	e004      	b.n	8006b10 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f840 	bl	8006b8e <USBD_CtlError>
      break;
 8006b0e:	e000      	b.n	8006b12 <USBD_ClrFeature+0x3c>
      break;
 8006b10:	bf00      	nop
  }
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	781a      	ldrb	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3301      	adds	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	781a      	ldrb	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	3301      	adds	r3, #1
 8006b42:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f7ff fa40 	bl	8005fca <SWAPBYTE>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3301      	adds	r3, #1
 8006b56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f7ff fa33 	bl	8005fca <SWAPBYTE>
 8006b64:	4603      	mov	r3, r0
 8006b66:	461a      	mov	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	3301      	adds	r3, #1
 8006b76:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f7ff fa26 	bl	8005fca <SWAPBYTE>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	461a      	mov	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	80da      	strh	r2, [r3, #6]
}
 8006b86:	bf00      	nop
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b98:	2180      	movs	r1, #128	@ 0x80
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fcd6 	bl	800754c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fcd2 	bl	800754c <USBD_LL_StallEP>
}
 8006ba8:	bf00      	nop
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d036      	beq.n	8006c34 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006bca:	6938      	ldr	r0, [r7, #16]
 8006bcc:	f000 f836 	bl	8006c3c <USBD_GetLen>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	4413      	add	r3, r2
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	7812      	ldrb	r2, [r2, #0]
 8006be8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
 8006bec:	3301      	adds	r3, #1
 8006bee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006bf0:	7dfb      	ldrb	r3, [r7, #23]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	2203      	movs	r2, #3
 8006bf8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006bfa:	7dfb      	ldrb	r3, [r7, #23]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c00:	e013      	b.n	8006c2a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	4413      	add	r3, r2
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	7812      	ldrb	r2, [r2, #0]
 8006c0c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	3301      	adds	r3, #1
 8006c12:	613b      	str	r3, [r7, #16]
    idx++;
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
 8006c16:	3301      	adds	r3, #1
 8006c18:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	4413      	add	r3, r2
 8006c20:	2200      	movs	r2, #0
 8006c22:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c24:	7dfb      	ldrb	r3, [r7, #23]
 8006c26:	3301      	adds	r3, #1
 8006c28:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e7      	bne.n	8006c02 <USBD_GetString+0x52>
 8006c32:	e000      	b.n	8006c36 <USBD_GetString+0x86>
    return;
 8006c34:	bf00      	nop
  }
}
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006c4c:	e005      	b.n	8006c5a <USBD_GetLen+0x1e>
  {
    len++;
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	3301      	adds	r3, #1
 8006c52:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	3301      	adds	r3, #1
 8006c58:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1f5      	bne.n	8006c4e <USBD_GetLen+0x12>
  }

  return len;
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	2100      	movs	r1, #0
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 fce1 	bl	800765e <USBD_LL_Transmit>

  return USBD_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 fcd0 	bl	800765e <USBD_LL_Transmit>

  return USBD_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2203      	movs	r2, #3
 8006cd8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 fcd4 	bl	80076a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	2100      	movs	r1, #0
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fcc3 	bl	80076a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2204      	movs	r2, #4
 8006d30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d34:	2300      	movs	r3, #0
 8006d36:	2200      	movs	r2, #0
 8006d38:	2100      	movs	r1, #0
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fc8f 	bl	800765e <USBD_LL_Transmit>

  return USBD_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2205      	movs	r2, #5
 8006d56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2100      	movs	r1, #0
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fc9d 	bl	80076a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d74:	2200      	movs	r2, #0
 8006d76:	4912      	ldr	r1, [pc, #72]	@ (8006dc0 <MX_USB_DEVICE_Init+0x50>)
 8006d78:	4812      	ldr	r0, [pc, #72]	@ (8006dc4 <MX_USB_DEVICE_Init+0x54>)
 8006d7a:	f7fe fd03 	bl	8005784 <USBD_Init>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d84:	f7f9 fde4 	bl	8000950 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d88:	490f      	ldr	r1, [pc, #60]	@ (8006dc8 <MX_USB_DEVICE_Init+0x58>)
 8006d8a:	480e      	ldr	r0, [pc, #56]	@ (8006dc4 <MX_USB_DEVICE_Init+0x54>)
 8006d8c:	f7fe fd2a 	bl	80057e4 <USBD_RegisterClass>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d96:	f7f9 fddb 	bl	8000950 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d9a:	490c      	ldr	r1, [pc, #48]	@ (8006dcc <MX_USB_DEVICE_Init+0x5c>)
 8006d9c:	4809      	ldr	r0, [pc, #36]	@ (8006dc4 <MX_USB_DEVICE_Init+0x54>)
 8006d9e:	f7fe fc21 	bl	80055e4 <USBD_CDC_RegisterInterface>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006da8:	f7f9 fdd2 	bl	8000950 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006dac:	4805      	ldr	r0, [pc, #20]	@ (8006dc4 <MX_USB_DEVICE_Init+0x54>)
 8006dae:	f7fe fd4f 	bl	8005850 <USBD_Start>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006db8:	f7f9 fdca 	bl	8000950 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006dbc:	bf00      	nop
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	200000ac 	.word	0x200000ac
 8006dc4:	200001bc 	.word	0x200001bc
 8006dc8:	20000018 	.word	0x20000018
 8006dcc:	20000098 	.word	0x20000098

08006dd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	4905      	ldr	r1, [pc, #20]	@ (8006dec <CDC_Init_FS+0x1c>)
 8006dd8:	4805      	ldr	r0, [pc, #20]	@ (8006df0 <CDC_Init_FS+0x20>)
 8006dda:	f7fe fc1d 	bl	8005618 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006dde:	4905      	ldr	r1, [pc, #20]	@ (8006df4 <CDC_Init_FS+0x24>)
 8006de0:	4803      	ldr	r0, [pc, #12]	@ (8006df0 <CDC_Init_FS+0x20>)
 8006de2:	f7fe fc3b 	bl	800565c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006de6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	20000c98 	.word	0x20000c98
 8006df0:	200001bc 	.word	0x200001bc
 8006df4:	20000498 	.word	0x20000498

08006df8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006dfc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	4603      	mov	r3, r0
 8006e10:	6039      	str	r1, [r7, #0]
 8006e12:	71fb      	strb	r3, [r7, #7]
 8006e14:	4613      	mov	r3, r2
 8006e16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	2b23      	cmp	r3, #35	@ 0x23
 8006e1c:	d84a      	bhi.n	8006eb4 <CDC_Control_FS+0xac>
 8006e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e24 <CDC_Control_FS+0x1c>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006eb5 	.word	0x08006eb5
 8006e28:	08006eb5 	.word	0x08006eb5
 8006e2c:	08006eb5 	.word	0x08006eb5
 8006e30:	08006eb5 	.word	0x08006eb5
 8006e34:	08006eb5 	.word	0x08006eb5
 8006e38:	08006eb5 	.word	0x08006eb5
 8006e3c:	08006eb5 	.word	0x08006eb5
 8006e40:	08006eb5 	.word	0x08006eb5
 8006e44:	08006eb5 	.word	0x08006eb5
 8006e48:	08006eb5 	.word	0x08006eb5
 8006e4c:	08006eb5 	.word	0x08006eb5
 8006e50:	08006eb5 	.word	0x08006eb5
 8006e54:	08006eb5 	.word	0x08006eb5
 8006e58:	08006eb5 	.word	0x08006eb5
 8006e5c:	08006eb5 	.word	0x08006eb5
 8006e60:	08006eb5 	.word	0x08006eb5
 8006e64:	08006eb5 	.word	0x08006eb5
 8006e68:	08006eb5 	.word	0x08006eb5
 8006e6c:	08006eb5 	.word	0x08006eb5
 8006e70:	08006eb5 	.word	0x08006eb5
 8006e74:	08006eb5 	.word	0x08006eb5
 8006e78:	08006eb5 	.word	0x08006eb5
 8006e7c:	08006eb5 	.word	0x08006eb5
 8006e80:	08006eb5 	.word	0x08006eb5
 8006e84:	08006eb5 	.word	0x08006eb5
 8006e88:	08006eb5 	.word	0x08006eb5
 8006e8c:	08006eb5 	.word	0x08006eb5
 8006e90:	08006eb5 	.word	0x08006eb5
 8006e94:	08006eb5 	.word	0x08006eb5
 8006e98:	08006eb5 	.word	0x08006eb5
 8006e9c:	08006eb5 	.word	0x08006eb5
 8006ea0:	08006eb5 	.word	0x08006eb5
 8006ea4:	08006eb5 	.word	0x08006eb5
 8006ea8:	08006eb5 	.word	0x08006eb5
 8006eac:	08006eb5 	.word	0x08006eb5
 8006eb0:	08006eb5 	.word	0x08006eb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006eb4:	bf00      	nop
  }

  return (USBD_OK);
 8006eb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	4808      	ldr	r0, [pc, #32]	@ (8006ef4 <CDC_Receive_FS+0x30>)
 8006ed2:	f7fe fbc3 	bl	800565c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006ed6:	4807      	ldr	r0, [pc, #28]	@ (8006ef4 <CDC_Receive_FS+0x30>)
 8006ed8:	f7fe fc1e 	bl	8005718 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f807 	bl	8006ef8 <CDC_Transmit_FS>
  return (USBD_OK);
 8006eea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	200001bc 	.word	0x200001bc

08006ef8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	460b      	mov	r3, r1
 8006f02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f08:	4b0d      	ldr	r3, [pc, #52]	@ (8006f40 <CDC_Transmit_FS+0x48>)
 8006f0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e00b      	b.n	8006f36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006f1e:	887b      	ldrh	r3, [r7, #2]
 8006f20:	461a      	mov	r2, r3
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	4806      	ldr	r0, [pc, #24]	@ (8006f40 <CDC_Transmit_FS+0x48>)
 8006f26:	f7fe fb77 	bl	8005618 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006f2a:	4805      	ldr	r0, [pc, #20]	@ (8006f40 <CDC_Transmit_FS+0x48>)
 8006f2c:	f7fe fbb4 	bl	8005698 <USBD_CDC_TransmitPacket>
 8006f30:	4603      	mov	r3, r0
 8006f32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	200001bc 	.word	0x200001bc

08006f44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2212      	movs	r2, #18
 8006f78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f7a:	4b03      	ldr	r3, [pc, #12]	@ (8006f88 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	200000c8 	.word	0x200000c8

08006f8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	6039      	str	r1, [r7, #0]
 8006f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2204      	movs	r2, #4
 8006f9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f9e:	4b03      	ldr	r3, [pc, #12]	@ (8006fac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	200000dc 	.word	0x200000dc

08006fb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	6039      	str	r1, [r7, #0]
 8006fba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d105      	bne.n	8006fce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	4907      	ldr	r1, [pc, #28]	@ (8006fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fc6:	4808      	ldr	r0, [pc, #32]	@ (8006fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fc8:	f7ff fdf2 	bl	8006bb0 <USBD_GetString>
 8006fcc:	e004      	b.n	8006fd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	4904      	ldr	r1, [pc, #16]	@ (8006fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fd2:	4805      	ldr	r0, [pc, #20]	@ (8006fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fd4:	f7ff fdec 	bl	8006bb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fd8:	4b02      	ldr	r3, [pc, #8]	@ (8006fe4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20001498 	.word	0x20001498
 8006fe8:	08008118 	.word	0x08008118

08006fec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	4904      	ldr	r1, [pc, #16]	@ (800700c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006ffc:	4804      	ldr	r0, [pc, #16]	@ (8007010 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ffe:	f7ff fdd7 	bl	8006bb0 <USBD_GetString>
  return USBD_StrDesc;
 8007002:	4b02      	ldr	r3, [pc, #8]	@ (800700c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007004:	4618      	mov	r0, r3
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20001498 	.word	0x20001498
 8007010:	08008130 	.word	0x08008130

08007014 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	6039      	str	r1, [r7, #0]
 800701e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	221a      	movs	r2, #26
 8007024:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007026:	f000 f843 	bl	80070b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800702a:	4b02      	ldr	r3, [pc, #8]	@ (8007034 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	200000e0 	.word	0x200000e0

08007038 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	6039      	str	r1, [r7, #0]
 8007042:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d105      	bne.n	8007056 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	4907      	ldr	r1, [pc, #28]	@ (800706c <USBD_FS_ConfigStrDescriptor+0x34>)
 800704e:	4808      	ldr	r0, [pc, #32]	@ (8007070 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007050:	f7ff fdae 	bl	8006bb0 <USBD_GetString>
 8007054:	e004      	b.n	8007060 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	4904      	ldr	r1, [pc, #16]	@ (800706c <USBD_FS_ConfigStrDescriptor+0x34>)
 800705a:	4805      	ldr	r0, [pc, #20]	@ (8007070 <USBD_FS_ConfigStrDescriptor+0x38>)
 800705c:	f7ff fda8 	bl	8006bb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007060:	4b02      	ldr	r3, [pc, #8]	@ (800706c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20001498 	.word	0x20001498
 8007070:	08008144 	.word	0x08008144

08007074 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	4603      	mov	r3, r0
 800707c:	6039      	str	r1, [r7, #0]
 800707e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d105      	bne.n	8007092 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	4907      	ldr	r1, [pc, #28]	@ (80070a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800708a:	4808      	ldr	r0, [pc, #32]	@ (80070ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800708c:	f7ff fd90 	bl	8006bb0 <USBD_GetString>
 8007090:	e004      	b.n	800709c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	4904      	ldr	r1, [pc, #16]	@ (80070a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007096:	4805      	ldr	r0, [pc, #20]	@ (80070ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007098:	f7ff fd8a 	bl	8006bb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800709c:	4b02      	ldr	r3, [pc, #8]	@ (80070a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20001498 	.word	0x20001498
 80070ac:	08008150 	.word	0x08008150

080070b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4413      	add	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d009      	beq.n	80070d8 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80070c4:	2208      	movs	r2, #8
 80070c6:	4906      	ldr	r1, [pc, #24]	@ (80070e0 <Get_SerialNum+0x30>)
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f80d 	bl	80070e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80070ce:	2204      	movs	r2, #4
 80070d0:	4904      	ldr	r1, [pc, #16]	@ (80070e4 <Get_SerialNum+0x34>)
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f808 	bl	80070e8 <IntToUnicode>
  }
}
 80070d8:	bf00      	nop
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	200000e2 	.word	0x200000e2
 80070e4:	200000f2 	.word	0x200000f2

080070e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	4613      	mov	r3, r2
 80070f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80070fa:	2300      	movs	r3, #0
 80070fc:	75fb      	strb	r3, [r7, #23]
 80070fe:	e027      	b.n	8007150 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	0f1b      	lsrs	r3, r3, #28
 8007104:	2b09      	cmp	r3, #9
 8007106:	d80b      	bhi.n	8007120 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	0f1b      	lsrs	r3, r3, #28
 800710c:	b2da      	uxtb	r2, r3
 800710e:	7dfb      	ldrb	r3, [r7, #23]
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	4619      	mov	r1, r3
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	440b      	add	r3, r1
 8007118:	3230      	adds	r2, #48	@ 0x30
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	e00a      	b.n	8007136 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	0f1b      	lsrs	r3, r3, #28
 8007124:	b2da      	uxtb	r2, r3
 8007126:	7dfb      	ldrb	r3, [r7, #23]
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	4619      	mov	r1, r3
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	440b      	add	r3, r1
 8007130:	3237      	adds	r2, #55	@ 0x37
 8007132:	b2d2      	uxtb	r2, r2
 8007134:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	3301      	adds	r3, #1
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	4413      	add	r3, r2
 8007146:	2200      	movs	r2, #0
 8007148:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	3301      	adds	r3, #1
 800714e:	75fb      	strb	r3, [r7, #23]
 8007150:	7dfa      	ldrb	r2, [r7, #23]
 8007152:	79fb      	ldrb	r3, [r7, #7]
 8007154:	429a      	cmp	r2, r3
 8007156:	d3d3      	bcc.n	8007100 <IntToUnicode+0x18>
  }
}
 8007158:	bf00      	nop
 800715a:	bf00      	nop
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
	...

08007168 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08a      	sub	sp, #40	@ 0x28
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007170:	f107 0314 	add.w	r3, r7, #20
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	605a      	str	r2, [r3, #4]
 800717a:	609a      	str	r2, [r3, #8]
 800717c:	60da      	str	r2, [r3, #12]
 800717e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007188:	d13a      	bne.n	8007200 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800718a:	2300      	movs	r3, #0
 800718c:	613b      	str	r3, [r7, #16]
 800718e:	4b1e      	ldr	r3, [pc, #120]	@ (8007208 <HAL_PCD_MspInit+0xa0>)
 8007190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007192:	4a1d      	ldr	r2, [pc, #116]	@ (8007208 <HAL_PCD_MspInit+0xa0>)
 8007194:	f043 0301 	orr.w	r3, r3, #1
 8007198:	6313      	str	r3, [r2, #48]	@ 0x30
 800719a:	4b1b      	ldr	r3, [pc, #108]	@ (8007208 <HAL_PCD_MspInit+0xa0>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	613b      	str	r3, [r7, #16]
 80071a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80071a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80071aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ac:	2302      	movs	r3, #2
 80071ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071b4:	2303      	movs	r3, #3
 80071b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80071b8:	230a      	movs	r3, #10
 80071ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071bc:	f107 0314 	add.w	r3, r7, #20
 80071c0:	4619      	mov	r1, r3
 80071c2:	4812      	ldr	r0, [pc, #72]	@ (800720c <HAL_PCD_MspInit+0xa4>)
 80071c4:	f7fa fa56 	bl	8001674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80071c8:	4b0f      	ldr	r3, [pc, #60]	@ (8007208 <HAL_PCD_MspInit+0xa0>)
 80071ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071cc:	4a0e      	ldr	r2, [pc, #56]	@ (8007208 <HAL_PCD_MspInit+0xa0>)
 80071ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80071d4:	2300      	movs	r3, #0
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007208 <HAL_PCD_MspInit+0xa0>)
 80071da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071dc:	4a0a      	ldr	r2, [pc, #40]	@ (8007208 <HAL_PCD_MspInit+0xa0>)
 80071de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80071e4:	4b08      	ldr	r3, [pc, #32]	@ (8007208 <HAL_PCD_MspInit+0xa0>)
 80071e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80071f0:	2200      	movs	r2, #0
 80071f2:	2100      	movs	r1, #0
 80071f4:	2043      	movs	r0, #67	@ 0x43
 80071f6:	f7fa fa06 	bl	8001606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80071fa:	2043      	movs	r0, #67	@ 0x43
 80071fc:	f7fa fa1f 	bl	800163e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007200:	bf00      	nop
 8007202:	3728      	adds	r7, #40	@ 0x28
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	40023800 	.word	0x40023800
 800720c:	40020000 	.word	0x40020000

08007210 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007224:	4619      	mov	r1, r3
 8007226:	4610      	mov	r0, r2
 8007228:	f7fe fb5f 	bl	80058ea <USBD_LL_SetupStage>
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007246:	78fa      	ldrb	r2, [r7, #3]
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	4613      	mov	r3, r2
 800724c:	00db      	lsls	r3, r3, #3
 800724e:	4413      	add	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	440b      	add	r3, r1
 8007254:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	78fb      	ldrb	r3, [r7, #3]
 800725c:	4619      	mov	r1, r3
 800725e:	f7fe fb99 	bl	8005994 <USBD_LL_DataOutStage>
}
 8007262:	bf00      	nop
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	460b      	mov	r3, r1
 8007274:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800727c:	78fa      	ldrb	r2, [r7, #3]
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	4613      	mov	r3, r2
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	440b      	add	r3, r1
 800728a:	3320      	adds	r3, #32
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	4619      	mov	r1, r3
 8007292:	f7fe fc32 	bl	8005afa <USBD_LL_DataInStage>
}
 8007296:	bf00      	nop
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b082      	sub	sp, #8
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fe fd6c 	bl	8005d8a <USBD_LL_SOF>
}
 80072b2:	bf00      	nop
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80072c2:	2301      	movs	r3, #1
 80072c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	79db      	ldrb	r3, [r3, #7]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d102      	bne.n	80072d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]
 80072d2:	e008      	b.n	80072e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	79db      	ldrb	r3, [r3, #7]
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d102      	bne.n	80072e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80072dc:	2301      	movs	r3, #1
 80072de:	73fb      	strb	r3, [r7, #15]
 80072e0:	e001      	b.n	80072e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80072e2:	f7f9 fb35 	bl	8000950 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072ec:	7bfa      	ldrb	r2, [r7, #15]
 80072ee:	4611      	mov	r1, r2
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fe fd06 	bl	8005d02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fe fcae 	bl	8005c5e <USBD_LL_Reset>
}
 8007302:	bf00      	nop
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800731a:	4618      	mov	r0, r3
 800731c:	f7fe fd01 	bl	8005d22 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	6812      	ldr	r2, [r2, #0]
 800732e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007332:	f043 0301 	orr.w	r3, r3, #1
 8007336:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	7adb      	ldrb	r3, [r3, #11]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d005      	beq.n	800734c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007340:	4b04      	ldr	r3, [pc, #16]	@ (8007354 <HAL_PCD_SuspendCallback+0x48>)
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	4a03      	ldr	r2, [pc, #12]	@ (8007354 <HAL_PCD_SuspendCallback+0x48>)
 8007346:	f043 0306 	orr.w	r3, r3, #6
 800734a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800734c:	bf00      	nop
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	e000ed00 	.word	0xe000ed00

08007358 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007366:	4618      	mov	r0, r3
 8007368:	f7fe fcf7 	bl	8005d5a <USBD_LL_Resume>
}
 800736c:	bf00      	nop
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007386:	78fa      	ldrb	r2, [r7, #3]
 8007388:	4611      	mov	r1, r2
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe fd4f 	bl	8005e2e <USBD_LL_IsoOUTIncomplete>
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80073aa:	78fa      	ldrb	r2, [r7, #3]
 80073ac:	4611      	mov	r1, r2
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fe fd0b 	bl	8005dca <USBD_LL_IsoINIncomplete>
}
 80073b4:	bf00      	nop
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fe fd61 	bl	8005e92 <USBD_LL_DevConnected>
}
 80073d0:	bf00      	nop
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe fd5e 	bl	8005ea8 <USBD_LL_DevDisconnected>
}
 80073ec:	bf00      	nop
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d13c      	bne.n	800747e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007404:	4a20      	ldr	r2, [pc, #128]	@ (8007488 <USBD_LL_Init+0x94>)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a1e      	ldr	r2, [pc, #120]	@ (8007488 <USBD_LL_Init+0x94>)
 8007410:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007414:	4b1c      	ldr	r3, [pc, #112]	@ (8007488 <USBD_LL_Init+0x94>)
 8007416:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800741a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800741c:	4b1a      	ldr	r3, [pc, #104]	@ (8007488 <USBD_LL_Init+0x94>)
 800741e:	2204      	movs	r2, #4
 8007420:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007422:	4b19      	ldr	r3, [pc, #100]	@ (8007488 <USBD_LL_Init+0x94>)
 8007424:	2202      	movs	r2, #2
 8007426:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007428:	4b17      	ldr	r3, [pc, #92]	@ (8007488 <USBD_LL_Init+0x94>)
 800742a:	2200      	movs	r2, #0
 800742c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800742e:	4b16      	ldr	r3, [pc, #88]	@ (8007488 <USBD_LL_Init+0x94>)
 8007430:	2202      	movs	r2, #2
 8007432:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007434:	4b14      	ldr	r3, [pc, #80]	@ (8007488 <USBD_LL_Init+0x94>)
 8007436:	2200      	movs	r2, #0
 8007438:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800743a:	4b13      	ldr	r3, [pc, #76]	@ (8007488 <USBD_LL_Init+0x94>)
 800743c:	2200      	movs	r2, #0
 800743e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007440:	4b11      	ldr	r3, [pc, #68]	@ (8007488 <USBD_LL_Init+0x94>)
 8007442:	2200      	movs	r2, #0
 8007444:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007446:	4b10      	ldr	r3, [pc, #64]	@ (8007488 <USBD_LL_Init+0x94>)
 8007448:	2200      	movs	r2, #0
 800744a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800744c:	4b0e      	ldr	r3, [pc, #56]	@ (8007488 <USBD_LL_Init+0x94>)
 800744e:	2200      	movs	r2, #0
 8007450:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007452:	480d      	ldr	r0, [pc, #52]	@ (8007488 <USBD_LL_Init+0x94>)
 8007454:	f7fa fac3 	bl	80019de <HAL_PCD_Init>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800745e:	f7f9 fa77 	bl	8000950 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007462:	2180      	movs	r1, #128	@ 0x80
 8007464:	4808      	ldr	r0, [pc, #32]	@ (8007488 <USBD_LL_Init+0x94>)
 8007466:	f7fb fcee 	bl	8002e46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800746a:	2240      	movs	r2, #64	@ 0x40
 800746c:	2100      	movs	r1, #0
 800746e:	4806      	ldr	r0, [pc, #24]	@ (8007488 <USBD_LL_Init+0x94>)
 8007470:	f7fb fca2 	bl	8002db8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007474:	2280      	movs	r2, #128	@ 0x80
 8007476:	2101      	movs	r1, #1
 8007478:	4803      	ldr	r0, [pc, #12]	@ (8007488 <USBD_LL_Init+0x94>)
 800747a:	f7fb fc9d 	bl	8002db8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20001698 	.word	0x20001698

0800748c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fa fbaa 	bl	8001bfc <HAL_PCD_Start>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 f942 	bl	8007738 <USBD_Get_USB_Status>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	4608      	mov	r0, r1
 80074cc:	4611      	mov	r1, r2
 80074ce:	461a      	mov	r2, r3
 80074d0:	4603      	mov	r3, r0
 80074d2:	70fb      	strb	r3, [r7, #3]
 80074d4:	460b      	mov	r3, r1
 80074d6:	70bb      	strb	r3, [r7, #2]
 80074d8:	4613      	mov	r3, r2
 80074da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074dc:	2300      	movs	r3, #0
 80074de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80074ea:	78bb      	ldrb	r3, [r7, #2]
 80074ec:	883a      	ldrh	r2, [r7, #0]
 80074ee:	78f9      	ldrb	r1, [r7, #3]
 80074f0:	f7fb f87e 	bl	80025f0 <HAL_PCD_EP_Open>
 80074f4:	4603      	mov	r3, r0
 80074f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 f91c 	bl	8007738 <USBD_Get_USB_Status>
 8007500:	4603      	mov	r3, r0
 8007502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007504:	7bbb      	ldrb	r3, [r7, #14]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b084      	sub	sp, #16
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	460b      	mov	r3, r1
 8007518:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007528:	78fa      	ldrb	r2, [r7, #3]
 800752a:	4611      	mov	r1, r2
 800752c:	4618      	mov	r0, r3
 800752e:	f7fb f8c7 	bl	80026c0 <HAL_PCD_EP_Close>
 8007532:	4603      	mov	r3, r0
 8007534:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	4618      	mov	r0, r3
 800753a:	f000 f8fd 	bl	8007738 <USBD_Get_USB_Status>
 800753e:	4603      	mov	r3, r0
 8007540:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007542:	7bbb      	ldrb	r3, [r7, #14]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007566:	78fa      	ldrb	r2, [r7, #3]
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f7fb f97f 	bl	800286e <HAL_PCD_EP_SetStall>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	4618      	mov	r0, r3
 8007578:	f000 f8de 	bl	8007738 <USBD_Get_USB_Status>
 800757c:	4603      	mov	r3, r0
 800757e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007580:	7bbb      	ldrb	r3, [r7, #14]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80075a4:	78fa      	ldrb	r2, [r7, #3]
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fb f9c3 	bl	8002934 <HAL_PCD_EP_ClrStall>
 80075ae:	4603      	mov	r3, r0
 80075b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 f8bf 	bl	8007738 <USBD_Get_USB_Status>
 80075ba:	4603      	mov	r3, r0
 80075bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075be:	7bbb      	ldrb	r3, [r7, #14]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80075da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80075dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	da0b      	bge.n	80075fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80075e4:	78fb      	ldrb	r3, [r7, #3]
 80075e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075ea:	68f9      	ldr	r1, [r7, #12]
 80075ec:	4613      	mov	r3, r2
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	440b      	add	r3, r1
 80075f6:	3316      	adds	r3, #22
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	e00b      	b.n	8007614 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007602:	68f9      	ldr	r1, [r7, #12]
 8007604:	4613      	mov	r3, r2
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	440b      	add	r3, r1
 800760e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007612:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007614:	4618      	mov	r0, r3
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	460b      	mov	r3, r1
 800762a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800763a:	78fa      	ldrb	r2, [r7, #3]
 800763c:	4611      	mov	r1, r2
 800763e:	4618      	mov	r0, r3
 8007640:	f7fa ffb2 	bl	80025a8 <HAL_PCD_SetAddress>
 8007644:	4603      	mov	r3, r0
 8007646:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	4618      	mov	r0, r3
 800764c:	f000 f874 	bl	8007738 <USBD_Get_USB_Status>
 8007650:	4603      	mov	r3, r0
 8007652:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007654:	7bbb      	ldrb	r3, [r7, #14]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b086      	sub	sp, #24
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	607a      	str	r2, [r7, #4]
 8007668:	603b      	str	r3, [r7, #0]
 800766a:	460b      	mov	r3, r1
 800766c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800767c:	7af9      	ldrb	r1, [r7, #11]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	f7fb f8ba 	bl	80027fa <HAL_PCD_EP_Transmit>
 8007686:	4603      	mov	r3, r0
 8007688:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800768a:	7dfb      	ldrb	r3, [r7, #23]
 800768c:	4618      	mov	r0, r3
 800768e:	f000 f853 	bl	8007738 <USBD_Get_USB_Status>
 8007692:	4603      	mov	r3, r0
 8007694:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007696:	7dbb      	ldrb	r3, [r7, #22]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	607a      	str	r2, [r7, #4]
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	460b      	mov	r3, r1
 80076ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80076be:	7af9      	ldrb	r1, [r7, #11]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	f7fb f846 	bl	8002754 <HAL_PCD_EP_Receive>
 80076c8:	4603      	mov	r3, r0
 80076ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 f832 	bl	8007738 <USBD_Get_USB_Status>
 80076d4:	4603      	mov	r3, r0
 80076d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80076d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b082      	sub	sp, #8
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	460b      	mov	r3, r1
 80076ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	4611      	mov	r1, r2
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fb f866 	bl	80027ca <HAL_PCD_EP_GetRxCount>
 80076fe:	4603      	mov	r3, r0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007710:	4b03      	ldr	r3, [pc, #12]	@ (8007720 <USBD_static_malloc+0x18>)
}
 8007712:	4618      	mov	r0, r3
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	20001b7c 	.word	0x20001b7c

08007724 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]

}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	4603      	mov	r3, r0
 8007740:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	2b03      	cmp	r3, #3
 800774a:	d817      	bhi.n	800777c <USBD_Get_USB_Status+0x44>
 800774c:	a201      	add	r2, pc, #4	@ (adr r2, 8007754 <USBD_Get_USB_Status+0x1c>)
 800774e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007752:	bf00      	nop
 8007754:	08007765 	.word	0x08007765
 8007758:	0800776b 	.word	0x0800776b
 800775c:	08007771 	.word	0x08007771
 8007760:	08007777 	.word	0x08007777
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	73fb      	strb	r3, [r7, #15]
    break;
 8007768:	e00b      	b.n	8007782 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800776a:	2303      	movs	r3, #3
 800776c:	73fb      	strb	r3, [r7, #15]
    break;
 800776e:	e008      	b.n	8007782 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007770:	2301      	movs	r3, #1
 8007772:	73fb      	strb	r3, [r7, #15]
    break;
 8007774:	e005      	b.n	8007782 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007776:	2303      	movs	r3, #3
 8007778:	73fb      	strb	r3, [r7, #15]
    break;
 800777a:	e002      	b.n	8007782 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800777c:	2303      	movs	r3, #3
 800777e:	73fb      	strb	r3, [r7, #15]
    break;
 8007780:	bf00      	nop
  }
  return usb_status;
 8007782:	7bfb      	ldrb	r3, [r7, #15]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <siprintf>:
 8007790:	b40e      	push	{r1, r2, r3}
 8007792:	b500      	push	{lr}
 8007794:	b09c      	sub	sp, #112	@ 0x70
 8007796:	ab1d      	add	r3, sp, #116	@ 0x74
 8007798:	9002      	str	r0, [sp, #8]
 800779a:	9006      	str	r0, [sp, #24]
 800779c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80077a0:	4809      	ldr	r0, [pc, #36]	@ (80077c8 <siprintf+0x38>)
 80077a2:	9107      	str	r1, [sp, #28]
 80077a4:	9104      	str	r1, [sp, #16]
 80077a6:	4909      	ldr	r1, [pc, #36]	@ (80077cc <siprintf+0x3c>)
 80077a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ac:	9105      	str	r1, [sp, #20]
 80077ae:	6800      	ldr	r0, [r0, #0]
 80077b0:	9301      	str	r3, [sp, #4]
 80077b2:	a902      	add	r1, sp, #8
 80077b4:	f000 f994 	bl	8007ae0 <_svfiprintf_r>
 80077b8:	9b02      	ldr	r3, [sp, #8]
 80077ba:	2200      	movs	r2, #0
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	b01c      	add	sp, #112	@ 0x70
 80077c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077c4:	b003      	add	sp, #12
 80077c6:	4770      	bx	lr
 80077c8:	200000fc 	.word	0x200000fc
 80077cc:	ffff0208 	.word	0xffff0208

080077d0 <memset>:
 80077d0:	4402      	add	r2, r0
 80077d2:	4603      	mov	r3, r0
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d100      	bne.n	80077da <memset+0xa>
 80077d8:	4770      	bx	lr
 80077da:	f803 1b01 	strb.w	r1, [r3], #1
 80077de:	e7f9      	b.n	80077d4 <memset+0x4>

080077e0 <__errno>:
 80077e0:	4b01      	ldr	r3, [pc, #4]	@ (80077e8 <__errno+0x8>)
 80077e2:	6818      	ldr	r0, [r3, #0]
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	200000fc 	.word	0x200000fc

080077ec <__libc_init_array>:
 80077ec:	b570      	push	{r4, r5, r6, lr}
 80077ee:	4d0d      	ldr	r5, [pc, #52]	@ (8007824 <__libc_init_array+0x38>)
 80077f0:	4c0d      	ldr	r4, [pc, #52]	@ (8007828 <__libc_init_array+0x3c>)
 80077f2:	1b64      	subs	r4, r4, r5
 80077f4:	10a4      	asrs	r4, r4, #2
 80077f6:	2600      	movs	r6, #0
 80077f8:	42a6      	cmp	r6, r4
 80077fa:	d109      	bne.n	8007810 <__libc_init_array+0x24>
 80077fc:	4d0b      	ldr	r5, [pc, #44]	@ (800782c <__libc_init_array+0x40>)
 80077fe:	4c0c      	ldr	r4, [pc, #48]	@ (8007830 <__libc_init_array+0x44>)
 8007800:	f000 fc66 	bl	80080d0 <_init>
 8007804:	1b64      	subs	r4, r4, r5
 8007806:	10a4      	asrs	r4, r4, #2
 8007808:	2600      	movs	r6, #0
 800780a:	42a6      	cmp	r6, r4
 800780c:	d105      	bne.n	800781a <__libc_init_array+0x2e>
 800780e:	bd70      	pop	{r4, r5, r6, pc}
 8007810:	f855 3b04 	ldr.w	r3, [r5], #4
 8007814:	4798      	blx	r3
 8007816:	3601      	adds	r6, #1
 8007818:	e7ee      	b.n	80077f8 <__libc_init_array+0xc>
 800781a:	f855 3b04 	ldr.w	r3, [r5], #4
 800781e:	4798      	blx	r3
 8007820:	3601      	adds	r6, #1
 8007822:	e7f2      	b.n	800780a <__libc_init_array+0x1e>
 8007824:	080081ac 	.word	0x080081ac
 8007828:	080081ac 	.word	0x080081ac
 800782c:	080081ac 	.word	0x080081ac
 8007830:	080081b0 	.word	0x080081b0

08007834 <__retarget_lock_acquire_recursive>:
 8007834:	4770      	bx	lr

08007836 <__retarget_lock_release_recursive>:
 8007836:	4770      	bx	lr

08007838 <_free_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	4605      	mov	r5, r0
 800783c:	2900      	cmp	r1, #0
 800783e:	d041      	beq.n	80078c4 <_free_r+0x8c>
 8007840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007844:	1f0c      	subs	r4, r1, #4
 8007846:	2b00      	cmp	r3, #0
 8007848:	bfb8      	it	lt
 800784a:	18e4      	addlt	r4, r4, r3
 800784c:	f000 f8e0 	bl	8007a10 <__malloc_lock>
 8007850:	4a1d      	ldr	r2, [pc, #116]	@ (80078c8 <_free_r+0x90>)
 8007852:	6813      	ldr	r3, [r2, #0]
 8007854:	b933      	cbnz	r3, 8007864 <_free_r+0x2c>
 8007856:	6063      	str	r3, [r4, #4]
 8007858:	6014      	str	r4, [r2, #0]
 800785a:	4628      	mov	r0, r5
 800785c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007860:	f000 b8dc 	b.w	8007a1c <__malloc_unlock>
 8007864:	42a3      	cmp	r3, r4
 8007866:	d908      	bls.n	800787a <_free_r+0x42>
 8007868:	6820      	ldr	r0, [r4, #0]
 800786a:	1821      	adds	r1, r4, r0
 800786c:	428b      	cmp	r3, r1
 800786e:	bf01      	itttt	eq
 8007870:	6819      	ldreq	r1, [r3, #0]
 8007872:	685b      	ldreq	r3, [r3, #4]
 8007874:	1809      	addeq	r1, r1, r0
 8007876:	6021      	streq	r1, [r4, #0]
 8007878:	e7ed      	b.n	8007856 <_free_r+0x1e>
 800787a:	461a      	mov	r2, r3
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	b10b      	cbz	r3, 8007884 <_free_r+0x4c>
 8007880:	42a3      	cmp	r3, r4
 8007882:	d9fa      	bls.n	800787a <_free_r+0x42>
 8007884:	6811      	ldr	r1, [r2, #0]
 8007886:	1850      	adds	r0, r2, r1
 8007888:	42a0      	cmp	r0, r4
 800788a:	d10b      	bne.n	80078a4 <_free_r+0x6c>
 800788c:	6820      	ldr	r0, [r4, #0]
 800788e:	4401      	add	r1, r0
 8007890:	1850      	adds	r0, r2, r1
 8007892:	4283      	cmp	r3, r0
 8007894:	6011      	str	r1, [r2, #0]
 8007896:	d1e0      	bne.n	800785a <_free_r+0x22>
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	6053      	str	r3, [r2, #4]
 800789e:	4408      	add	r0, r1
 80078a0:	6010      	str	r0, [r2, #0]
 80078a2:	e7da      	b.n	800785a <_free_r+0x22>
 80078a4:	d902      	bls.n	80078ac <_free_r+0x74>
 80078a6:	230c      	movs	r3, #12
 80078a8:	602b      	str	r3, [r5, #0]
 80078aa:	e7d6      	b.n	800785a <_free_r+0x22>
 80078ac:	6820      	ldr	r0, [r4, #0]
 80078ae:	1821      	adds	r1, r4, r0
 80078b0:	428b      	cmp	r3, r1
 80078b2:	bf04      	itt	eq
 80078b4:	6819      	ldreq	r1, [r3, #0]
 80078b6:	685b      	ldreq	r3, [r3, #4]
 80078b8:	6063      	str	r3, [r4, #4]
 80078ba:	bf04      	itt	eq
 80078bc:	1809      	addeq	r1, r1, r0
 80078be:	6021      	streq	r1, [r4, #0]
 80078c0:	6054      	str	r4, [r2, #4]
 80078c2:	e7ca      	b.n	800785a <_free_r+0x22>
 80078c4:	bd38      	pop	{r3, r4, r5, pc}
 80078c6:	bf00      	nop
 80078c8:	20001ee0 	.word	0x20001ee0

080078cc <sbrk_aligned>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	4e0f      	ldr	r6, [pc, #60]	@ (800790c <sbrk_aligned+0x40>)
 80078d0:	460c      	mov	r4, r1
 80078d2:	6831      	ldr	r1, [r6, #0]
 80078d4:	4605      	mov	r5, r0
 80078d6:	b911      	cbnz	r1, 80078de <sbrk_aligned+0x12>
 80078d8:	f000 fba6 	bl	8008028 <_sbrk_r>
 80078dc:	6030      	str	r0, [r6, #0]
 80078de:	4621      	mov	r1, r4
 80078e0:	4628      	mov	r0, r5
 80078e2:	f000 fba1 	bl	8008028 <_sbrk_r>
 80078e6:	1c43      	adds	r3, r0, #1
 80078e8:	d103      	bne.n	80078f2 <sbrk_aligned+0x26>
 80078ea:	f04f 34ff 	mov.w	r4, #4294967295
 80078ee:	4620      	mov	r0, r4
 80078f0:	bd70      	pop	{r4, r5, r6, pc}
 80078f2:	1cc4      	adds	r4, r0, #3
 80078f4:	f024 0403 	bic.w	r4, r4, #3
 80078f8:	42a0      	cmp	r0, r4
 80078fa:	d0f8      	beq.n	80078ee <sbrk_aligned+0x22>
 80078fc:	1a21      	subs	r1, r4, r0
 80078fe:	4628      	mov	r0, r5
 8007900:	f000 fb92 	bl	8008028 <_sbrk_r>
 8007904:	3001      	adds	r0, #1
 8007906:	d1f2      	bne.n	80078ee <sbrk_aligned+0x22>
 8007908:	e7ef      	b.n	80078ea <sbrk_aligned+0x1e>
 800790a:	bf00      	nop
 800790c:	20001edc 	.word	0x20001edc

08007910 <_malloc_r>:
 8007910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007914:	1ccd      	adds	r5, r1, #3
 8007916:	f025 0503 	bic.w	r5, r5, #3
 800791a:	3508      	adds	r5, #8
 800791c:	2d0c      	cmp	r5, #12
 800791e:	bf38      	it	cc
 8007920:	250c      	movcc	r5, #12
 8007922:	2d00      	cmp	r5, #0
 8007924:	4606      	mov	r6, r0
 8007926:	db01      	blt.n	800792c <_malloc_r+0x1c>
 8007928:	42a9      	cmp	r1, r5
 800792a:	d904      	bls.n	8007936 <_malloc_r+0x26>
 800792c:	230c      	movs	r3, #12
 800792e:	6033      	str	r3, [r6, #0]
 8007930:	2000      	movs	r0, #0
 8007932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007936:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a0c <_malloc_r+0xfc>
 800793a:	f000 f869 	bl	8007a10 <__malloc_lock>
 800793e:	f8d8 3000 	ldr.w	r3, [r8]
 8007942:	461c      	mov	r4, r3
 8007944:	bb44      	cbnz	r4, 8007998 <_malloc_r+0x88>
 8007946:	4629      	mov	r1, r5
 8007948:	4630      	mov	r0, r6
 800794a:	f7ff ffbf 	bl	80078cc <sbrk_aligned>
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	4604      	mov	r4, r0
 8007952:	d158      	bne.n	8007a06 <_malloc_r+0xf6>
 8007954:	f8d8 4000 	ldr.w	r4, [r8]
 8007958:	4627      	mov	r7, r4
 800795a:	2f00      	cmp	r7, #0
 800795c:	d143      	bne.n	80079e6 <_malloc_r+0xd6>
 800795e:	2c00      	cmp	r4, #0
 8007960:	d04b      	beq.n	80079fa <_malloc_r+0xea>
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	4639      	mov	r1, r7
 8007966:	4630      	mov	r0, r6
 8007968:	eb04 0903 	add.w	r9, r4, r3
 800796c:	f000 fb5c 	bl	8008028 <_sbrk_r>
 8007970:	4581      	cmp	r9, r0
 8007972:	d142      	bne.n	80079fa <_malloc_r+0xea>
 8007974:	6821      	ldr	r1, [r4, #0]
 8007976:	1a6d      	subs	r5, r5, r1
 8007978:	4629      	mov	r1, r5
 800797a:	4630      	mov	r0, r6
 800797c:	f7ff ffa6 	bl	80078cc <sbrk_aligned>
 8007980:	3001      	adds	r0, #1
 8007982:	d03a      	beq.n	80079fa <_malloc_r+0xea>
 8007984:	6823      	ldr	r3, [r4, #0]
 8007986:	442b      	add	r3, r5
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	f8d8 3000 	ldr.w	r3, [r8]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	bb62      	cbnz	r2, 80079ec <_malloc_r+0xdc>
 8007992:	f8c8 7000 	str.w	r7, [r8]
 8007996:	e00f      	b.n	80079b8 <_malloc_r+0xa8>
 8007998:	6822      	ldr	r2, [r4, #0]
 800799a:	1b52      	subs	r2, r2, r5
 800799c:	d420      	bmi.n	80079e0 <_malloc_r+0xd0>
 800799e:	2a0b      	cmp	r2, #11
 80079a0:	d917      	bls.n	80079d2 <_malloc_r+0xc2>
 80079a2:	1961      	adds	r1, r4, r5
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	6025      	str	r5, [r4, #0]
 80079a8:	bf18      	it	ne
 80079aa:	6059      	strne	r1, [r3, #4]
 80079ac:	6863      	ldr	r3, [r4, #4]
 80079ae:	bf08      	it	eq
 80079b0:	f8c8 1000 	streq.w	r1, [r8]
 80079b4:	5162      	str	r2, [r4, r5]
 80079b6:	604b      	str	r3, [r1, #4]
 80079b8:	4630      	mov	r0, r6
 80079ba:	f000 f82f 	bl	8007a1c <__malloc_unlock>
 80079be:	f104 000b 	add.w	r0, r4, #11
 80079c2:	1d23      	adds	r3, r4, #4
 80079c4:	f020 0007 	bic.w	r0, r0, #7
 80079c8:	1ac2      	subs	r2, r0, r3
 80079ca:	bf1c      	itt	ne
 80079cc:	1a1b      	subne	r3, r3, r0
 80079ce:	50a3      	strne	r3, [r4, r2]
 80079d0:	e7af      	b.n	8007932 <_malloc_r+0x22>
 80079d2:	6862      	ldr	r2, [r4, #4]
 80079d4:	42a3      	cmp	r3, r4
 80079d6:	bf0c      	ite	eq
 80079d8:	f8c8 2000 	streq.w	r2, [r8]
 80079dc:	605a      	strne	r2, [r3, #4]
 80079de:	e7eb      	b.n	80079b8 <_malloc_r+0xa8>
 80079e0:	4623      	mov	r3, r4
 80079e2:	6864      	ldr	r4, [r4, #4]
 80079e4:	e7ae      	b.n	8007944 <_malloc_r+0x34>
 80079e6:	463c      	mov	r4, r7
 80079e8:	687f      	ldr	r7, [r7, #4]
 80079ea:	e7b6      	b.n	800795a <_malloc_r+0x4a>
 80079ec:	461a      	mov	r2, r3
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	42a3      	cmp	r3, r4
 80079f2:	d1fb      	bne.n	80079ec <_malloc_r+0xdc>
 80079f4:	2300      	movs	r3, #0
 80079f6:	6053      	str	r3, [r2, #4]
 80079f8:	e7de      	b.n	80079b8 <_malloc_r+0xa8>
 80079fa:	230c      	movs	r3, #12
 80079fc:	6033      	str	r3, [r6, #0]
 80079fe:	4630      	mov	r0, r6
 8007a00:	f000 f80c 	bl	8007a1c <__malloc_unlock>
 8007a04:	e794      	b.n	8007930 <_malloc_r+0x20>
 8007a06:	6005      	str	r5, [r0, #0]
 8007a08:	e7d6      	b.n	80079b8 <_malloc_r+0xa8>
 8007a0a:	bf00      	nop
 8007a0c:	20001ee0 	.word	0x20001ee0

08007a10 <__malloc_lock>:
 8007a10:	4801      	ldr	r0, [pc, #4]	@ (8007a18 <__malloc_lock+0x8>)
 8007a12:	f7ff bf0f 	b.w	8007834 <__retarget_lock_acquire_recursive>
 8007a16:	bf00      	nop
 8007a18:	20001ed8 	.word	0x20001ed8

08007a1c <__malloc_unlock>:
 8007a1c:	4801      	ldr	r0, [pc, #4]	@ (8007a24 <__malloc_unlock+0x8>)
 8007a1e:	f7ff bf0a 	b.w	8007836 <__retarget_lock_release_recursive>
 8007a22:	bf00      	nop
 8007a24:	20001ed8 	.word	0x20001ed8

08007a28 <__ssputs_r>:
 8007a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a2c:	688e      	ldr	r6, [r1, #8]
 8007a2e:	461f      	mov	r7, r3
 8007a30:	42be      	cmp	r6, r7
 8007a32:	680b      	ldr	r3, [r1, #0]
 8007a34:	4682      	mov	sl, r0
 8007a36:	460c      	mov	r4, r1
 8007a38:	4690      	mov	r8, r2
 8007a3a:	d82d      	bhi.n	8007a98 <__ssputs_r+0x70>
 8007a3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a44:	d026      	beq.n	8007a94 <__ssputs_r+0x6c>
 8007a46:	6965      	ldr	r5, [r4, #20]
 8007a48:	6909      	ldr	r1, [r1, #16]
 8007a4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a4e:	eba3 0901 	sub.w	r9, r3, r1
 8007a52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a56:	1c7b      	adds	r3, r7, #1
 8007a58:	444b      	add	r3, r9
 8007a5a:	106d      	asrs	r5, r5, #1
 8007a5c:	429d      	cmp	r5, r3
 8007a5e:	bf38      	it	cc
 8007a60:	461d      	movcc	r5, r3
 8007a62:	0553      	lsls	r3, r2, #21
 8007a64:	d527      	bpl.n	8007ab6 <__ssputs_r+0x8e>
 8007a66:	4629      	mov	r1, r5
 8007a68:	f7ff ff52 	bl	8007910 <_malloc_r>
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	b360      	cbz	r0, 8007aca <__ssputs_r+0xa2>
 8007a70:	6921      	ldr	r1, [r4, #16]
 8007a72:	464a      	mov	r2, r9
 8007a74:	f000 fae8 	bl	8008048 <memcpy>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a82:	81a3      	strh	r3, [r4, #12]
 8007a84:	6126      	str	r6, [r4, #16]
 8007a86:	6165      	str	r5, [r4, #20]
 8007a88:	444e      	add	r6, r9
 8007a8a:	eba5 0509 	sub.w	r5, r5, r9
 8007a8e:	6026      	str	r6, [r4, #0]
 8007a90:	60a5      	str	r5, [r4, #8]
 8007a92:	463e      	mov	r6, r7
 8007a94:	42be      	cmp	r6, r7
 8007a96:	d900      	bls.n	8007a9a <__ssputs_r+0x72>
 8007a98:	463e      	mov	r6, r7
 8007a9a:	6820      	ldr	r0, [r4, #0]
 8007a9c:	4632      	mov	r2, r6
 8007a9e:	4641      	mov	r1, r8
 8007aa0:	f000 faa8 	bl	8007ff4 <memmove>
 8007aa4:	68a3      	ldr	r3, [r4, #8]
 8007aa6:	1b9b      	subs	r3, r3, r6
 8007aa8:	60a3      	str	r3, [r4, #8]
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	4433      	add	r3, r6
 8007aae:	6023      	str	r3, [r4, #0]
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab6:	462a      	mov	r2, r5
 8007ab8:	f000 fad4 	bl	8008064 <_realloc_r>
 8007abc:	4606      	mov	r6, r0
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d1e0      	bne.n	8007a84 <__ssputs_r+0x5c>
 8007ac2:	6921      	ldr	r1, [r4, #16]
 8007ac4:	4650      	mov	r0, sl
 8007ac6:	f7ff feb7 	bl	8007838 <_free_r>
 8007aca:	230c      	movs	r3, #12
 8007acc:	f8ca 3000 	str.w	r3, [sl]
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ad6:	81a3      	strh	r3, [r4, #12]
 8007ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8007adc:	e7e9      	b.n	8007ab2 <__ssputs_r+0x8a>
	...

08007ae0 <_svfiprintf_r>:
 8007ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	4698      	mov	r8, r3
 8007ae6:	898b      	ldrh	r3, [r1, #12]
 8007ae8:	061b      	lsls	r3, r3, #24
 8007aea:	b09d      	sub	sp, #116	@ 0x74
 8007aec:	4607      	mov	r7, r0
 8007aee:	460d      	mov	r5, r1
 8007af0:	4614      	mov	r4, r2
 8007af2:	d510      	bpl.n	8007b16 <_svfiprintf_r+0x36>
 8007af4:	690b      	ldr	r3, [r1, #16]
 8007af6:	b973      	cbnz	r3, 8007b16 <_svfiprintf_r+0x36>
 8007af8:	2140      	movs	r1, #64	@ 0x40
 8007afa:	f7ff ff09 	bl	8007910 <_malloc_r>
 8007afe:	6028      	str	r0, [r5, #0]
 8007b00:	6128      	str	r0, [r5, #16]
 8007b02:	b930      	cbnz	r0, 8007b12 <_svfiprintf_r+0x32>
 8007b04:	230c      	movs	r3, #12
 8007b06:	603b      	str	r3, [r7, #0]
 8007b08:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0c:	b01d      	add	sp, #116	@ 0x74
 8007b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b12:	2340      	movs	r3, #64	@ 0x40
 8007b14:	616b      	str	r3, [r5, #20]
 8007b16:	2300      	movs	r3, #0
 8007b18:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b1a:	2320      	movs	r3, #32
 8007b1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b24:	2330      	movs	r3, #48	@ 0x30
 8007b26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007cc4 <_svfiprintf_r+0x1e4>
 8007b2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b2e:	f04f 0901 	mov.w	r9, #1
 8007b32:	4623      	mov	r3, r4
 8007b34:	469a      	mov	sl, r3
 8007b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b3a:	b10a      	cbz	r2, 8007b40 <_svfiprintf_r+0x60>
 8007b3c:	2a25      	cmp	r2, #37	@ 0x25
 8007b3e:	d1f9      	bne.n	8007b34 <_svfiprintf_r+0x54>
 8007b40:	ebba 0b04 	subs.w	fp, sl, r4
 8007b44:	d00b      	beq.n	8007b5e <_svfiprintf_r+0x7e>
 8007b46:	465b      	mov	r3, fp
 8007b48:	4622      	mov	r2, r4
 8007b4a:	4629      	mov	r1, r5
 8007b4c:	4638      	mov	r0, r7
 8007b4e:	f7ff ff6b 	bl	8007a28 <__ssputs_r>
 8007b52:	3001      	adds	r0, #1
 8007b54:	f000 80a7 	beq.w	8007ca6 <_svfiprintf_r+0x1c6>
 8007b58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b5a:	445a      	add	r2, fp
 8007b5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 809f 	beq.w	8007ca6 <_svfiprintf_r+0x1c6>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b72:	f10a 0a01 	add.w	sl, sl, #1
 8007b76:	9304      	str	r3, [sp, #16]
 8007b78:	9307      	str	r3, [sp, #28]
 8007b7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b80:	4654      	mov	r4, sl
 8007b82:	2205      	movs	r2, #5
 8007b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b88:	484e      	ldr	r0, [pc, #312]	@ (8007cc4 <_svfiprintf_r+0x1e4>)
 8007b8a:	f7f8 fb29 	bl	80001e0 <memchr>
 8007b8e:	9a04      	ldr	r2, [sp, #16]
 8007b90:	b9d8      	cbnz	r0, 8007bca <_svfiprintf_r+0xea>
 8007b92:	06d0      	lsls	r0, r2, #27
 8007b94:	bf44      	itt	mi
 8007b96:	2320      	movmi	r3, #32
 8007b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b9c:	0711      	lsls	r1, r2, #28
 8007b9e:	bf44      	itt	mi
 8007ba0:	232b      	movmi	r3, #43	@ 0x2b
 8007ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8007baa:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bac:	d015      	beq.n	8007bda <_svfiprintf_r+0xfa>
 8007bae:	9a07      	ldr	r2, [sp, #28]
 8007bb0:	4654      	mov	r4, sl
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	f04f 0c0a 	mov.w	ip, #10
 8007bb8:	4621      	mov	r1, r4
 8007bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bbe:	3b30      	subs	r3, #48	@ 0x30
 8007bc0:	2b09      	cmp	r3, #9
 8007bc2:	d94b      	bls.n	8007c5c <_svfiprintf_r+0x17c>
 8007bc4:	b1b0      	cbz	r0, 8007bf4 <_svfiprintf_r+0x114>
 8007bc6:	9207      	str	r2, [sp, #28]
 8007bc8:	e014      	b.n	8007bf4 <_svfiprintf_r+0x114>
 8007bca:	eba0 0308 	sub.w	r3, r0, r8
 8007bce:	fa09 f303 	lsl.w	r3, r9, r3
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	9304      	str	r3, [sp, #16]
 8007bd6:	46a2      	mov	sl, r4
 8007bd8:	e7d2      	b.n	8007b80 <_svfiprintf_r+0xa0>
 8007bda:	9b03      	ldr	r3, [sp, #12]
 8007bdc:	1d19      	adds	r1, r3, #4
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	9103      	str	r1, [sp, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bfbb      	ittet	lt
 8007be6:	425b      	neglt	r3, r3
 8007be8:	f042 0202 	orrlt.w	r2, r2, #2
 8007bec:	9307      	strge	r3, [sp, #28]
 8007bee:	9307      	strlt	r3, [sp, #28]
 8007bf0:	bfb8      	it	lt
 8007bf2:	9204      	strlt	r2, [sp, #16]
 8007bf4:	7823      	ldrb	r3, [r4, #0]
 8007bf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bf8:	d10a      	bne.n	8007c10 <_svfiprintf_r+0x130>
 8007bfa:	7863      	ldrb	r3, [r4, #1]
 8007bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bfe:	d132      	bne.n	8007c66 <_svfiprintf_r+0x186>
 8007c00:	9b03      	ldr	r3, [sp, #12]
 8007c02:	1d1a      	adds	r2, r3, #4
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	9203      	str	r2, [sp, #12]
 8007c08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c0c:	3402      	adds	r4, #2
 8007c0e:	9305      	str	r3, [sp, #20]
 8007c10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007cd4 <_svfiprintf_r+0x1f4>
 8007c14:	7821      	ldrb	r1, [r4, #0]
 8007c16:	2203      	movs	r2, #3
 8007c18:	4650      	mov	r0, sl
 8007c1a:	f7f8 fae1 	bl	80001e0 <memchr>
 8007c1e:	b138      	cbz	r0, 8007c30 <_svfiprintf_r+0x150>
 8007c20:	9b04      	ldr	r3, [sp, #16]
 8007c22:	eba0 000a 	sub.w	r0, r0, sl
 8007c26:	2240      	movs	r2, #64	@ 0x40
 8007c28:	4082      	lsls	r2, r0
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	3401      	adds	r4, #1
 8007c2e:	9304      	str	r3, [sp, #16]
 8007c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c34:	4824      	ldr	r0, [pc, #144]	@ (8007cc8 <_svfiprintf_r+0x1e8>)
 8007c36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c3a:	2206      	movs	r2, #6
 8007c3c:	f7f8 fad0 	bl	80001e0 <memchr>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	d036      	beq.n	8007cb2 <_svfiprintf_r+0x1d2>
 8007c44:	4b21      	ldr	r3, [pc, #132]	@ (8007ccc <_svfiprintf_r+0x1ec>)
 8007c46:	bb1b      	cbnz	r3, 8007c90 <_svfiprintf_r+0x1b0>
 8007c48:	9b03      	ldr	r3, [sp, #12]
 8007c4a:	3307      	adds	r3, #7
 8007c4c:	f023 0307 	bic.w	r3, r3, #7
 8007c50:	3308      	adds	r3, #8
 8007c52:	9303      	str	r3, [sp, #12]
 8007c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c56:	4433      	add	r3, r6
 8007c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c5a:	e76a      	b.n	8007b32 <_svfiprintf_r+0x52>
 8007c5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c60:	460c      	mov	r4, r1
 8007c62:	2001      	movs	r0, #1
 8007c64:	e7a8      	b.n	8007bb8 <_svfiprintf_r+0xd8>
 8007c66:	2300      	movs	r3, #0
 8007c68:	3401      	adds	r4, #1
 8007c6a:	9305      	str	r3, [sp, #20]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	f04f 0c0a 	mov.w	ip, #10
 8007c72:	4620      	mov	r0, r4
 8007c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c78:	3a30      	subs	r2, #48	@ 0x30
 8007c7a:	2a09      	cmp	r2, #9
 8007c7c:	d903      	bls.n	8007c86 <_svfiprintf_r+0x1a6>
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d0c6      	beq.n	8007c10 <_svfiprintf_r+0x130>
 8007c82:	9105      	str	r1, [sp, #20]
 8007c84:	e7c4      	b.n	8007c10 <_svfiprintf_r+0x130>
 8007c86:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e7f0      	b.n	8007c72 <_svfiprintf_r+0x192>
 8007c90:	ab03      	add	r3, sp, #12
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	462a      	mov	r2, r5
 8007c96:	4b0e      	ldr	r3, [pc, #56]	@ (8007cd0 <_svfiprintf_r+0x1f0>)
 8007c98:	a904      	add	r1, sp, #16
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	f3af 8000 	nop.w
 8007ca0:	1c42      	adds	r2, r0, #1
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	d1d6      	bne.n	8007c54 <_svfiprintf_r+0x174>
 8007ca6:	89ab      	ldrh	r3, [r5, #12]
 8007ca8:	065b      	lsls	r3, r3, #25
 8007caa:	f53f af2d 	bmi.w	8007b08 <_svfiprintf_r+0x28>
 8007cae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cb0:	e72c      	b.n	8007b0c <_svfiprintf_r+0x2c>
 8007cb2:	ab03      	add	r3, sp, #12
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	462a      	mov	r2, r5
 8007cb8:	4b05      	ldr	r3, [pc, #20]	@ (8007cd0 <_svfiprintf_r+0x1f0>)
 8007cba:	a904      	add	r1, sp, #16
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	f000 f879 	bl	8007db4 <_printf_i>
 8007cc2:	e7ed      	b.n	8007ca0 <_svfiprintf_r+0x1c0>
 8007cc4:	08008170 	.word	0x08008170
 8007cc8:	0800817a 	.word	0x0800817a
 8007ccc:	00000000 	.word	0x00000000
 8007cd0:	08007a29 	.word	0x08007a29
 8007cd4:	08008176 	.word	0x08008176

08007cd8 <_printf_common>:
 8007cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cdc:	4616      	mov	r6, r2
 8007cde:	4698      	mov	r8, r3
 8007ce0:	688a      	ldr	r2, [r1, #8]
 8007ce2:	690b      	ldr	r3, [r1, #16]
 8007ce4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	bfb8      	it	lt
 8007cec:	4613      	movlt	r3, r2
 8007cee:	6033      	str	r3, [r6, #0]
 8007cf0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cf4:	4607      	mov	r7, r0
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	b10a      	cbz	r2, 8007cfe <_printf_common+0x26>
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	6033      	str	r3, [r6, #0]
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	0699      	lsls	r1, r3, #26
 8007d02:	bf42      	ittt	mi
 8007d04:	6833      	ldrmi	r3, [r6, #0]
 8007d06:	3302      	addmi	r3, #2
 8007d08:	6033      	strmi	r3, [r6, #0]
 8007d0a:	6825      	ldr	r5, [r4, #0]
 8007d0c:	f015 0506 	ands.w	r5, r5, #6
 8007d10:	d106      	bne.n	8007d20 <_printf_common+0x48>
 8007d12:	f104 0a19 	add.w	sl, r4, #25
 8007d16:	68e3      	ldr	r3, [r4, #12]
 8007d18:	6832      	ldr	r2, [r6, #0]
 8007d1a:	1a9b      	subs	r3, r3, r2
 8007d1c:	42ab      	cmp	r3, r5
 8007d1e:	dc26      	bgt.n	8007d6e <_printf_common+0x96>
 8007d20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d24:	6822      	ldr	r2, [r4, #0]
 8007d26:	3b00      	subs	r3, #0
 8007d28:	bf18      	it	ne
 8007d2a:	2301      	movne	r3, #1
 8007d2c:	0692      	lsls	r2, r2, #26
 8007d2e:	d42b      	bmi.n	8007d88 <_printf_common+0xb0>
 8007d30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d34:	4641      	mov	r1, r8
 8007d36:	4638      	mov	r0, r7
 8007d38:	47c8      	blx	r9
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	d01e      	beq.n	8007d7c <_printf_common+0xa4>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	6922      	ldr	r2, [r4, #16]
 8007d42:	f003 0306 	and.w	r3, r3, #6
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	bf02      	ittt	eq
 8007d4a:	68e5      	ldreq	r5, [r4, #12]
 8007d4c:	6833      	ldreq	r3, [r6, #0]
 8007d4e:	1aed      	subeq	r5, r5, r3
 8007d50:	68a3      	ldr	r3, [r4, #8]
 8007d52:	bf0c      	ite	eq
 8007d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d58:	2500      	movne	r5, #0
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	bfc4      	itt	gt
 8007d5e:	1a9b      	subgt	r3, r3, r2
 8007d60:	18ed      	addgt	r5, r5, r3
 8007d62:	2600      	movs	r6, #0
 8007d64:	341a      	adds	r4, #26
 8007d66:	42b5      	cmp	r5, r6
 8007d68:	d11a      	bne.n	8007da0 <_printf_common+0xc8>
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	e008      	b.n	8007d80 <_printf_common+0xa8>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	4652      	mov	r2, sl
 8007d72:	4641      	mov	r1, r8
 8007d74:	4638      	mov	r0, r7
 8007d76:	47c8      	blx	r9
 8007d78:	3001      	adds	r0, #1
 8007d7a:	d103      	bne.n	8007d84 <_printf_common+0xac>
 8007d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d84:	3501      	adds	r5, #1
 8007d86:	e7c6      	b.n	8007d16 <_printf_common+0x3e>
 8007d88:	18e1      	adds	r1, r4, r3
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	2030      	movs	r0, #48	@ 0x30
 8007d8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d92:	4422      	add	r2, r4
 8007d94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d9c:	3302      	adds	r3, #2
 8007d9e:	e7c7      	b.n	8007d30 <_printf_common+0x58>
 8007da0:	2301      	movs	r3, #1
 8007da2:	4622      	mov	r2, r4
 8007da4:	4641      	mov	r1, r8
 8007da6:	4638      	mov	r0, r7
 8007da8:	47c8      	blx	r9
 8007daa:	3001      	adds	r0, #1
 8007dac:	d0e6      	beq.n	8007d7c <_printf_common+0xa4>
 8007dae:	3601      	adds	r6, #1
 8007db0:	e7d9      	b.n	8007d66 <_printf_common+0x8e>
	...

08007db4 <_printf_i>:
 8007db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007db8:	7e0f      	ldrb	r7, [r1, #24]
 8007dba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007dbc:	2f78      	cmp	r7, #120	@ 0x78
 8007dbe:	4691      	mov	r9, r2
 8007dc0:	4680      	mov	r8, r0
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	469a      	mov	sl, r3
 8007dc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007dca:	d807      	bhi.n	8007ddc <_printf_i+0x28>
 8007dcc:	2f62      	cmp	r7, #98	@ 0x62
 8007dce:	d80a      	bhi.n	8007de6 <_printf_i+0x32>
 8007dd0:	2f00      	cmp	r7, #0
 8007dd2:	f000 80d2 	beq.w	8007f7a <_printf_i+0x1c6>
 8007dd6:	2f58      	cmp	r7, #88	@ 0x58
 8007dd8:	f000 80b9 	beq.w	8007f4e <_printf_i+0x19a>
 8007ddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007de0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007de4:	e03a      	b.n	8007e5c <_printf_i+0xa8>
 8007de6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007dea:	2b15      	cmp	r3, #21
 8007dec:	d8f6      	bhi.n	8007ddc <_printf_i+0x28>
 8007dee:	a101      	add	r1, pc, #4	@ (adr r1, 8007df4 <_printf_i+0x40>)
 8007df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007df4:	08007e4d 	.word	0x08007e4d
 8007df8:	08007e61 	.word	0x08007e61
 8007dfc:	08007ddd 	.word	0x08007ddd
 8007e00:	08007ddd 	.word	0x08007ddd
 8007e04:	08007ddd 	.word	0x08007ddd
 8007e08:	08007ddd 	.word	0x08007ddd
 8007e0c:	08007e61 	.word	0x08007e61
 8007e10:	08007ddd 	.word	0x08007ddd
 8007e14:	08007ddd 	.word	0x08007ddd
 8007e18:	08007ddd 	.word	0x08007ddd
 8007e1c:	08007ddd 	.word	0x08007ddd
 8007e20:	08007f61 	.word	0x08007f61
 8007e24:	08007e8b 	.word	0x08007e8b
 8007e28:	08007f1b 	.word	0x08007f1b
 8007e2c:	08007ddd 	.word	0x08007ddd
 8007e30:	08007ddd 	.word	0x08007ddd
 8007e34:	08007f83 	.word	0x08007f83
 8007e38:	08007ddd 	.word	0x08007ddd
 8007e3c:	08007e8b 	.word	0x08007e8b
 8007e40:	08007ddd 	.word	0x08007ddd
 8007e44:	08007ddd 	.word	0x08007ddd
 8007e48:	08007f23 	.word	0x08007f23
 8007e4c:	6833      	ldr	r3, [r6, #0]
 8007e4e:	1d1a      	adds	r2, r3, #4
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6032      	str	r2, [r6, #0]
 8007e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e09d      	b.n	8007f9c <_printf_i+0x1e8>
 8007e60:	6833      	ldr	r3, [r6, #0]
 8007e62:	6820      	ldr	r0, [r4, #0]
 8007e64:	1d19      	adds	r1, r3, #4
 8007e66:	6031      	str	r1, [r6, #0]
 8007e68:	0606      	lsls	r6, r0, #24
 8007e6a:	d501      	bpl.n	8007e70 <_printf_i+0xbc>
 8007e6c:	681d      	ldr	r5, [r3, #0]
 8007e6e:	e003      	b.n	8007e78 <_printf_i+0xc4>
 8007e70:	0645      	lsls	r5, r0, #25
 8007e72:	d5fb      	bpl.n	8007e6c <_printf_i+0xb8>
 8007e74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e78:	2d00      	cmp	r5, #0
 8007e7a:	da03      	bge.n	8007e84 <_printf_i+0xd0>
 8007e7c:	232d      	movs	r3, #45	@ 0x2d
 8007e7e:	426d      	negs	r5, r5
 8007e80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e84:	4859      	ldr	r0, [pc, #356]	@ (8007fec <_printf_i+0x238>)
 8007e86:	230a      	movs	r3, #10
 8007e88:	e011      	b.n	8007eae <_printf_i+0xfa>
 8007e8a:	6821      	ldr	r1, [r4, #0]
 8007e8c:	6833      	ldr	r3, [r6, #0]
 8007e8e:	0608      	lsls	r0, r1, #24
 8007e90:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e94:	d402      	bmi.n	8007e9c <_printf_i+0xe8>
 8007e96:	0649      	lsls	r1, r1, #25
 8007e98:	bf48      	it	mi
 8007e9a:	b2ad      	uxthmi	r5, r5
 8007e9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e9e:	4853      	ldr	r0, [pc, #332]	@ (8007fec <_printf_i+0x238>)
 8007ea0:	6033      	str	r3, [r6, #0]
 8007ea2:	bf14      	ite	ne
 8007ea4:	230a      	movne	r3, #10
 8007ea6:	2308      	moveq	r3, #8
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007eae:	6866      	ldr	r6, [r4, #4]
 8007eb0:	60a6      	str	r6, [r4, #8]
 8007eb2:	2e00      	cmp	r6, #0
 8007eb4:	bfa2      	ittt	ge
 8007eb6:	6821      	ldrge	r1, [r4, #0]
 8007eb8:	f021 0104 	bicge.w	r1, r1, #4
 8007ebc:	6021      	strge	r1, [r4, #0]
 8007ebe:	b90d      	cbnz	r5, 8007ec4 <_printf_i+0x110>
 8007ec0:	2e00      	cmp	r6, #0
 8007ec2:	d04b      	beq.n	8007f5c <_printf_i+0x1a8>
 8007ec4:	4616      	mov	r6, r2
 8007ec6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007eca:	fb03 5711 	mls	r7, r3, r1, r5
 8007ece:	5dc7      	ldrb	r7, [r0, r7]
 8007ed0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ed4:	462f      	mov	r7, r5
 8007ed6:	42bb      	cmp	r3, r7
 8007ed8:	460d      	mov	r5, r1
 8007eda:	d9f4      	bls.n	8007ec6 <_printf_i+0x112>
 8007edc:	2b08      	cmp	r3, #8
 8007ede:	d10b      	bne.n	8007ef8 <_printf_i+0x144>
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	07df      	lsls	r7, r3, #31
 8007ee4:	d508      	bpl.n	8007ef8 <_printf_i+0x144>
 8007ee6:	6923      	ldr	r3, [r4, #16]
 8007ee8:	6861      	ldr	r1, [r4, #4]
 8007eea:	4299      	cmp	r1, r3
 8007eec:	bfde      	ittt	le
 8007eee:	2330      	movle	r3, #48	@ 0x30
 8007ef0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ef4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ef8:	1b92      	subs	r2, r2, r6
 8007efa:	6122      	str	r2, [r4, #16]
 8007efc:	f8cd a000 	str.w	sl, [sp]
 8007f00:	464b      	mov	r3, r9
 8007f02:	aa03      	add	r2, sp, #12
 8007f04:	4621      	mov	r1, r4
 8007f06:	4640      	mov	r0, r8
 8007f08:	f7ff fee6 	bl	8007cd8 <_printf_common>
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d14a      	bne.n	8007fa6 <_printf_i+0x1f2>
 8007f10:	f04f 30ff 	mov.w	r0, #4294967295
 8007f14:	b004      	add	sp, #16
 8007f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	f043 0320 	orr.w	r3, r3, #32
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	4833      	ldr	r0, [pc, #204]	@ (8007ff0 <_printf_i+0x23c>)
 8007f24:	2778      	movs	r7, #120	@ 0x78
 8007f26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	6831      	ldr	r1, [r6, #0]
 8007f2e:	061f      	lsls	r7, r3, #24
 8007f30:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f34:	d402      	bmi.n	8007f3c <_printf_i+0x188>
 8007f36:	065f      	lsls	r7, r3, #25
 8007f38:	bf48      	it	mi
 8007f3a:	b2ad      	uxthmi	r5, r5
 8007f3c:	6031      	str	r1, [r6, #0]
 8007f3e:	07d9      	lsls	r1, r3, #31
 8007f40:	bf44      	itt	mi
 8007f42:	f043 0320 	orrmi.w	r3, r3, #32
 8007f46:	6023      	strmi	r3, [r4, #0]
 8007f48:	b11d      	cbz	r5, 8007f52 <_printf_i+0x19e>
 8007f4a:	2310      	movs	r3, #16
 8007f4c:	e7ac      	b.n	8007ea8 <_printf_i+0xf4>
 8007f4e:	4827      	ldr	r0, [pc, #156]	@ (8007fec <_printf_i+0x238>)
 8007f50:	e7e9      	b.n	8007f26 <_printf_i+0x172>
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	f023 0320 	bic.w	r3, r3, #32
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	e7f6      	b.n	8007f4a <_printf_i+0x196>
 8007f5c:	4616      	mov	r6, r2
 8007f5e:	e7bd      	b.n	8007edc <_printf_i+0x128>
 8007f60:	6833      	ldr	r3, [r6, #0]
 8007f62:	6825      	ldr	r5, [r4, #0]
 8007f64:	6961      	ldr	r1, [r4, #20]
 8007f66:	1d18      	adds	r0, r3, #4
 8007f68:	6030      	str	r0, [r6, #0]
 8007f6a:	062e      	lsls	r6, r5, #24
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	d501      	bpl.n	8007f74 <_printf_i+0x1c0>
 8007f70:	6019      	str	r1, [r3, #0]
 8007f72:	e002      	b.n	8007f7a <_printf_i+0x1c6>
 8007f74:	0668      	lsls	r0, r5, #25
 8007f76:	d5fb      	bpl.n	8007f70 <_printf_i+0x1bc>
 8007f78:	8019      	strh	r1, [r3, #0]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	6123      	str	r3, [r4, #16]
 8007f7e:	4616      	mov	r6, r2
 8007f80:	e7bc      	b.n	8007efc <_printf_i+0x148>
 8007f82:	6833      	ldr	r3, [r6, #0]
 8007f84:	1d1a      	adds	r2, r3, #4
 8007f86:	6032      	str	r2, [r6, #0]
 8007f88:	681e      	ldr	r6, [r3, #0]
 8007f8a:	6862      	ldr	r2, [r4, #4]
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f7f8 f926 	bl	80001e0 <memchr>
 8007f94:	b108      	cbz	r0, 8007f9a <_printf_i+0x1e6>
 8007f96:	1b80      	subs	r0, r0, r6
 8007f98:	6060      	str	r0, [r4, #4]
 8007f9a:	6863      	ldr	r3, [r4, #4]
 8007f9c:	6123      	str	r3, [r4, #16]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fa4:	e7aa      	b.n	8007efc <_printf_i+0x148>
 8007fa6:	6923      	ldr	r3, [r4, #16]
 8007fa8:	4632      	mov	r2, r6
 8007faa:	4649      	mov	r1, r9
 8007fac:	4640      	mov	r0, r8
 8007fae:	47d0      	blx	sl
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	d0ad      	beq.n	8007f10 <_printf_i+0x15c>
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	079b      	lsls	r3, r3, #30
 8007fb8:	d413      	bmi.n	8007fe2 <_printf_i+0x22e>
 8007fba:	68e0      	ldr	r0, [r4, #12]
 8007fbc:	9b03      	ldr	r3, [sp, #12]
 8007fbe:	4298      	cmp	r0, r3
 8007fc0:	bfb8      	it	lt
 8007fc2:	4618      	movlt	r0, r3
 8007fc4:	e7a6      	b.n	8007f14 <_printf_i+0x160>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4632      	mov	r2, r6
 8007fca:	4649      	mov	r1, r9
 8007fcc:	4640      	mov	r0, r8
 8007fce:	47d0      	blx	sl
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d09d      	beq.n	8007f10 <_printf_i+0x15c>
 8007fd4:	3501      	adds	r5, #1
 8007fd6:	68e3      	ldr	r3, [r4, #12]
 8007fd8:	9903      	ldr	r1, [sp, #12]
 8007fda:	1a5b      	subs	r3, r3, r1
 8007fdc:	42ab      	cmp	r3, r5
 8007fde:	dcf2      	bgt.n	8007fc6 <_printf_i+0x212>
 8007fe0:	e7eb      	b.n	8007fba <_printf_i+0x206>
 8007fe2:	2500      	movs	r5, #0
 8007fe4:	f104 0619 	add.w	r6, r4, #25
 8007fe8:	e7f5      	b.n	8007fd6 <_printf_i+0x222>
 8007fea:	bf00      	nop
 8007fec:	08008181 	.word	0x08008181
 8007ff0:	08008192 	.word	0x08008192

08007ff4 <memmove>:
 8007ff4:	4288      	cmp	r0, r1
 8007ff6:	b510      	push	{r4, lr}
 8007ff8:	eb01 0402 	add.w	r4, r1, r2
 8007ffc:	d902      	bls.n	8008004 <memmove+0x10>
 8007ffe:	4284      	cmp	r4, r0
 8008000:	4623      	mov	r3, r4
 8008002:	d807      	bhi.n	8008014 <memmove+0x20>
 8008004:	1e43      	subs	r3, r0, #1
 8008006:	42a1      	cmp	r1, r4
 8008008:	d008      	beq.n	800801c <memmove+0x28>
 800800a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800800e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008012:	e7f8      	b.n	8008006 <memmove+0x12>
 8008014:	4402      	add	r2, r0
 8008016:	4601      	mov	r1, r0
 8008018:	428a      	cmp	r2, r1
 800801a:	d100      	bne.n	800801e <memmove+0x2a>
 800801c:	bd10      	pop	{r4, pc}
 800801e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008026:	e7f7      	b.n	8008018 <memmove+0x24>

08008028 <_sbrk_r>:
 8008028:	b538      	push	{r3, r4, r5, lr}
 800802a:	4d06      	ldr	r5, [pc, #24]	@ (8008044 <_sbrk_r+0x1c>)
 800802c:	2300      	movs	r3, #0
 800802e:	4604      	mov	r4, r0
 8008030:	4608      	mov	r0, r1
 8008032:	602b      	str	r3, [r5, #0]
 8008034:	f7f8 fd38 	bl	8000aa8 <_sbrk>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d102      	bne.n	8008042 <_sbrk_r+0x1a>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	b103      	cbz	r3, 8008042 <_sbrk_r+0x1a>
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	20001ed4 	.word	0x20001ed4

08008048 <memcpy>:
 8008048:	440a      	add	r2, r1
 800804a:	4291      	cmp	r1, r2
 800804c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008050:	d100      	bne.n	8008054 <memcpy+0xc>
 8008052:	4770      	bx	lr
 8008054:	b510      	push	{r4, lr}
 8008056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800805a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800805e:	4291      	cmp	r1, r2
 8008060:	d1f9      	bne.n	8008056 <memcpy+0xe>
 8008062:	bd10      	pop	{r4, pc}

08008064 <_realloc_r>:
 8008064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008068:	4680      	mov	r8, r0
 800806a:	4615      	mov	r5, r2
 800806c:	460c      	mov	r4, r1
 800806e:	b921      	cbnz	r1, 800807a <_realloc_r+0x16>
 8008070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008074:	4611      	mov	r1, r2
 8008076:	f7ff bc4b 	b.w	8007910 <_malloc_r>
 800807a:	b92a      	cbnz	r2, 8008088 <_realloc_r+0x24>
 800807c:	f7ff fbdc 	bl	8007838 <_free_r>
 8008080:	2400      	movs	r4, #0
 8008082:	4620      	mov	r0, r4
 8008084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008088:	f000 f81a 	bl	80080c0 <_malloc_usable_size_r>
 800808c:	4285      	cmp	r5, r0
 800808e:	4606      	mov	r6, r0
 8008090:	d802      	bhi.n	8008098 <_realloc_r+0x34>
 8008092:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008096:	d8f4      	bhi.n	8008082 <_realloc_r+0x1e>
 8008098:	4629      	mov	r1, r5
 800809a:	4640      	mov	r0, r8
 800809c:	f7ff fc38 	bl	8007910 <_malloc_r>
 80080a0:	4607      	mov	r7, r0
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d0ec      	beq.n	8008080 <_realloc_r+0x1c>
 80080a6:	42b5      	cmp	r5, r6
 80080a8:	462a      	mov	r2, r5
 80080aa:	4621      	mov	r1, r4
 80080ac:	bf28      	it	cs
 80080ae:	4632      	movcs	r2, r6
 80080b0:	f7ff ffca 	bl	8008048 <memcpy>
 80080b4:	4621      	mov	r1, r4
 80080b6:	4640      	mov	r0, r8
 80080b8:	f7ff fbbe 	bl	8007838 <_free_r>
 80080bc:	463c      	mov	r4, r7
 80080be:	e7e0      	b.n	8008082 <_realloc_r+0x1e>

080080c0 <_malloc_usable_size_r>:
 80080c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080c4:	1f18      	subs	r0, r3, #4
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	bfbc      	itt	lt
 80080ca:	580b      	ldrlt	r3, [r1, r0]
 80080cc:	18c0      	addlt	r0, r0, r3
 80080ce:	4770      	bx	lr

080080d0 <_init>:
 80080d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d2:	bf00      	nop
 80080d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d6:	bc08      	pop	{r3}
 80080d8:	469e      	mov	lr, r3
 80080da:	4770      	bx	lr

080080dc <_fini>:
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	bf00      	nop
 80080e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e2:	bc08      	pop	{r3}
 80080e4:	469e      	mov	lr, r3
 80080e6:	4770      	bx	lr
