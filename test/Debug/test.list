
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a700  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  0800a890  0800a890  0000b890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac90  0800ac90  0000c2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac90  0800ac90  0000bc90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac98  0800ac98  0000c2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac98  0800ac98  0000bc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac9c  0800ac9c  0000bc9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800aca0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c2c4  2**0
                  CONTENTS
 10 .bss          00001d54  200002c4  200002c4  0000c2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002018  20002018  0000c2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e21b  00000000  00000000  0000c2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e44  00000000  00000000  0001a50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  0001d358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f4  00000000  00000000  0001df90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237e2  00000000  00000000  0001e884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ebe  00000000  00000000  00042066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c60b2  00000000  00000000  00052f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118fd6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004140  00000000  00000000  0011901c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0011d15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a878 	.word	0x0800a878

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800a878 	.word	0x0800a878

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]

  //По умолчанию на линии высокий уровень
  lineUp();
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	889b      	ldrh	r3, [r3, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f000 ffaa 	bl	8001e14 <HAL_GPIO_WritePin>

  //Настройка порта на выход
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	889b      	ldrh	r3, [r3, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 8000ec6:	2311      	movs	r3, #17
 8000ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	79db      	ldrb	r3, [r3, #7]
 8000ece:	617b      	str	r3, [r7, #20]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f107 020c 	add.w	r2, r7, #12
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fde4 	bl	8001aac <HAL_GPIO_Init>
}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]

  //Настройка порта на вход
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	889b      	ldrh	r3, [r3, #4]
 8000f08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	79db      	ldrb	r3, [r3, #7]
 8000f12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f107 020c 	add.w	r2, r7, #12
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fdc4 	bl	8001aac <HAL_GPIO_Init>
}
 8000f24:	bf00      	nop
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08e      	sub	sp, #56	@ 0x38
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
	DHT_data data = {-128.0f, -128.0f};
 8000f34:	4a76      	ldr	r2, [pc, #472]	@ (8001110 <DHT_getData+0x1e4>)
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f3e:	e883 0003 	stmia.w	r3, {r0, r1}

	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	799b      	ldrb	r3, [r3, #6]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d103      	bne.n	8000f52 <DHT_getData+0x26>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000f4a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f4e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000f50:	e002      	b.n	8000f58 <DHT_getData+0x2c>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 8000f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f56:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 8000f58:	f000 fc66 	bl	8001828 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	1ad2      	subs	r2, r2, r3
 8000f64:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d212      	bcs.n	8000f90 <DHT_getData+0x64>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00e      	beq.n	8000f90 <DHT_getData+0x64>
		data.hum = sensor->lastHum;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	61fb      	str	r3, [r7, #28]
		data.temp = sensor->lastTemp;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	623b      	str	r3, [r7, #32]
		return data;
 8000f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f82:	f107 021c 	add.w	r2, r7, #28
 8000f86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000f8e:	e16d      	b.n	800126c <DHT_getData+0x340>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 8000f90:	f000 fc4a 	bl	8001828 <HAL_GetTick>
 8000f94:	4603      	mov	r3, r0
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f7ff ff7b 	bl	8000e98 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	889b      	ldrh	r3, [r3, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	4619      	mov	r1, r3
 8000fae:	f000 ff31 	bl	8001e14 <HAL_GPIO_WritePin>
	Delay(18);
 8000fb2:	2012      	movs	r0, #18
 8000fb4:	f000 fc44 	bl	8001840 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	889b      	ldrh	r3, [r3, #4]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f000 ff26 	bl	8001e14 <HAL_GPIO_WritePin>
	goToInput(sensor);
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f7ff ff8f 	bl	8000eec <goToInput>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fce:	b672      	cpsid	i
}
 8000fd0:	bf00      	nop
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	86bb      	strh	r3, [r7, #52]	@ 0x34
	//Ожидание спада
	while(getLine()) {
 8000fd6:	e01a      	b.n	800100e <DHT_getData+0xe2>
		timeout++;
 8000fd8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000fda:	3301      	adds	r3, #1
 8000fdc:	86bb      	strh	r3, [r7, #52]	@ 0x34
		if (timeout > DHT_TIMEOUT) {
 8000fde:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000fe0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d912      	bls.n	800100e <DHT_getData+0xe2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fe8:	b662      	cpsie	i
}
 8000fea:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000ff2:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000ffa:	60da      	str	r2, [r3, #12]

			return data;
 8000ffc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001000:	f107 021c 	add.w	r2, r7, #28
 8001004:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001008:	e883 0003 	stmia.w	r3, {r0, r1}
 800100c:	e12e      	b.n	800126c <DHT_getData+0x340>
	while(getLine()) {
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	889b      	ldrh	r3, [r3, #4]
 8001016:	4619      	mov	r1, r3
 8001018:	4610      	mov	r0, r2
 800101a:	f000 fee3 	bl	8001de4 <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	2b01      	cmp	r3, #1
 8001022:	d0d9      	beq.n	8000fd8 <DHT_getData+0xac>
		}
	}
	timeout = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	86bb      	strh	r3, [r7, #52]	@ 0x34
	//Ожидание подъёма
	while(!getLine()) {
 8001028:	e01a      	b.n	8001060 <DHT_getData+0x134>
		timeout++;
 800102a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800102c:	3301      	adds	r3, #1
 800102e:	86bb      	strh	r3, [r7, #52]	@ 0x34
		if (timeout > DHT_TIMEOUT) {
 8001030:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001032:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001036:	4293      	cmp	r3, r2
 8001038:	d912      	bls.n	8001060 <DHT_getData+0x134>
  __ASM volatile ("cpsie i" : : : "memory");
 800103a:	b662      	cpsie	i
}
 800103c:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8001044:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 800104c:	60da      	str	r2, [r3, #12]

			return data;
 800104e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001052:	f107 021c 	add.w	r2, r7, #28
 8001056:	e892 0003 	ldmia.w	r2, {r0, r1}
 800105a:	e883 0003 	stmia.w	r3, {r0, r1}
 800105e:	e105      	b.n	800126c <DHT_getData+0x340>
	while(!getLine()) {
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	889b      	ldrh	r3, [r3, #4]
 8001068:	4619      	mov	r1, r3
 800106a:	4610      	mov	r0, r2
 800106c:	f000 feba 	bl	8001de4 <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b01      	cmp	r3, #1
 8001074:	d1d9      	bne.n	800102a <DHT_getData+0xfe>
		}
	}
	timeout = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	86bb      	strh	r3, [r7, #52]	@ 0x34
	//Ожидание спада
	while(getLine()) {
 800107a:	e012      	b.n	80010a2 <DHT_getData+0x176>
		timeout++;
 800107c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800107e:	3301      	adds	r3, #1
 8001080:	86bb      	strh	r3, [r7, #52]	@ 0x34
		if (timeout > DHT_TIMEOUT) {
 8001082:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001084:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001088:	4293      	cmp	r3, r2
 800108a:	d90a      	bls.n	80010a2 <DHT_getData+0x176>
  __ASM volatile ("cpsie i" : : : "memory");
 800108c:	b662      	cpsie	i
}
 800108e:	bf00      	nop
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 8001090:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001094:	f107 021c 	add.w	r2, r7, #28
 8001098:	e892 0003 	ldmia.w	r2, {r0, r1}
 800109c:	e883 0003 	stmia.w	r3, {r0, r1}
 80010a0:	e0e4      	b.n	800126c <DHT_getData+0x340>
	while(getLine()) {
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	889b      	ldrh	r3, [r3, #4]
 80010aa:	4619      	mov	r1, r3
 80010ac:	4610      	mov	r0, r2
 80010ae:	f000 fe99 	bl	8001de4 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d0e1      	beq.n	800107c <DHT_getData+0x150>
		}
	}

	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 80010b8:	4a16      	ldr	r2, [pc, #88]	@ (8001114 <DHT_getData+0x1e8>)
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c2:	6018      	str	r0, [r3, #0]
 80010c4:	3304      	adds	r3, #4
 80010c6:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80010ce:	e062      	b.n	8001196 <DHT_getData+0x26a>
		for(uint8_t b = 7; b != 255; b--) {
 80010d0:	2307      	movs	r3, #7
 80010d2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80010d6:	e055      	b.n	8001184 <DHT_getData+0x258>
			uint16_t hT = 0, lT = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	863b      	strh	r3, [r7, #48]	@ 0x30
 80010dc:	2300      	movs	r3, #0
 80010de:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 80010e0:	e002      	b.n	80010e8 <DHT_getData+0x1bc>
 80010e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80010e4:	3301      	adds	r3, #1
 80010e6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	889b      	ldrh	r3, [r3, #4]
 80010f0:	4619      	mov	r1, r3
 80010f2:	4610      	mov	r0, r2
 80010f4:	f000 fe76 	bl	8001de4 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d004      	beq.n	8001108 <DHT_getData+0x1dc>
 80010fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001100:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001104:	4293      	cmp	r3, r2
 8001106:	d1ec      	bne.n	80010e2 <DHT_getData+0x1b6>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	86bb      	strh	r3, [r7, #52]	@ 0x34
			while(getLine()&& hT != 65535) hT++;
 800110c:	e00b      	b.n	8001126 <DHT_getData+0x1fa>
 800110e:	bf00      	nop
 8001110:	0800a890 	.word	0x0800a890
 8001114:	0800a898 	.word	0x0800a898
 8001118:	3dcccccd 	.word	0x3dcccccd
 800111c:	bdcccccd 	.word	0xbdcccccd
 8001120:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001122:	3301      	adds	r3, #1
 8001124:	863b      	strh	r3, [r7, #48]	@ 0x30
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	889b      	ldrh	r3, [r3, #4]
 800112e:	4619      	mov	r1, r3
 8001130:	4610      	mov	r0, r2
 8001132:	f000 fe57 	bl	8001de4 <HAL_GPIO_ReadPin>
 8001136:	4603      	mov	r3, r0
 8001138:	2b01      	cmp	r3, #1
 800113a:	d104      	bne.n	8001146 <DHT_getData+0x21a>
 800113c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800113e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001142:	4293      	cmp	r3, r2
 8001144:	d1ec      	bne.n	8001120 <DHT_getData+0x1f4>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 8001146:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001148:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800114a:	429a      	cmp	r2, r3
 800114c:	d915      	bls.n	800117a <DHT_getData+0x24e>
 800114e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001152:	3338      	adds	r3, #56	@ 0x38
 8001154:	443b      	add	r3, r7
 8001156:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800115a:	b25a      	sxtb	r2, r3
 800115c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001160:	2101      	movs	r1, #1
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	b25b      	sxtb	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b25a      	sxtb	r2, r3
 800116c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	3338      	adds	r3, #56	@ 0x38
 8001174:	443b      	add	r3, r7
 8001176:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(uint8_t b = 7; b != 255; b--) {
 800117a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800117e:	3b01      	subs	r3, #1
 8001180:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8001184:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001188:	2bff      	cmp	r3, #255	@ 0xff
 800118a:	d1a5      	bne.n	80010d8 <DHT_getData+0x1ac>
	for(uint8_t a = 0; a < 5; a++) {
 800118c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001190:	3301      	adds	r3, #1
 8001192:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001196:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800119a:	2b04      	cmp	r3, #4
 800119c:	d998      	bls.n	80010d0 <DHT_getData+0x1a4>
  __ASM volatile ("cpsie i" : : : "memory");
 800119e:	b662      	cpsie	i
}
 80011a0:	bf00      	nop
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 80011a2:	7d3a      	ldrb	r2, [r7, #20]
 80011a4:	7d7b      	ldrb	r3, [r7, #21]
 80011a6:	4413      	add	r3, r2
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	7dbb      	ldrb	r3, [r7, #22]
 80011ac:	4413      	add	r3, r2
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	4413      	add	r3, r2
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	7e3b      	ldrb	r3, [r7, #24]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d149      	bne.n	8001250 <DHT_getData+0x324>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	799b      	ldrb	r3, [r3, #6]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d133      	bne.n	800122c <DHT_getData+0x300>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 80011c4:	7d3b      	ldrb	r3, [r7, #20]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	7d7a      	ldrb	r2, [r7, #21]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d4:	ed1f 7a30 	vldr	s14, [pc, #-192]	@ 8001118 <DHT_getData+0x1ec>
 80011d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011dc:	edc7 7a07 	vstr	s15, [r7, #28]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 80011e0:	7dbb      	ldrb	r3, [r7, #22]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0e      	blt.n	8001206 <DHT_getData+0x2da>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 80011e8:	7dbb      	ldrb	r3, [r7, #22]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	7dfa      	ldrb	r2, [r7, #23]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	ee07 3a90 	vmov	s15, r3
 80011f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f8:	ed1f 7a39 	vldr	s14, [pc, #-228]	@ 8001118 <DHT_getData+0x1ec>
 80011fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001200:	edc7 7a08 	vstr	s15, [r7, #32]
 8001204:	e012      	b.n	800122c <DHT_getData+0x300>
			}	else {
				rawData[2] &= ~(1<<7);
 8001206:	7dbb      	ldrb	r3, [r7, #22]
 8001208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800120c:	b2db      	uxtb	r3, r3
 800120e:	75bb      	strb	r3, [r7, #22]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8001210:	7dbb      	ldrb	r3, [r7, #22]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	7dfa      	ldrb	r2, [r7, #23]
 8001216:	4313      	orrs	r3, r2
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001220:	ed1f 7a42 	vldr	s14, [pc, #-264]	@ 800111c <DHT_getData+0x1f0>
 8001224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001228:	edc7 7a08 	vstr	s15, [r7, #32]
			}
		}
		if (sensor->type == DHT11) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	799b      	ldrb	r3, [r3, #6]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10d      	bne.n	8001250 <DHT_getData+0x324>
			data.hum = (float)rawData[0];
 8001234:	7d3b      	ldrb	r3, [r7, #20]
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800123e:	edc7 7a07 	vstr	s15, [r7, #28]
			data.temp = (float)rawData[2];
 8001242:	7dbb      	ldrb	r3, [r7, #22]
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124c:	edc7 7a08 	vstr	s15, [r7, #32]
		}
	}

	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 8001256:	6a3a      	ldr	r2, [r7, #32]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	60da      	str	r2, [r3, #12]
	#endif

	return data;
 800125c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001260:	f107 021c 	add.w	r2, r7, #28
 8001264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001268:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800126c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800126e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001270:	ee07 2a10 	vmov	s14, r2
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eeb0 0a47 	vmov.f32	s0, s14
 800127c:	eef0 0a67 	vmov.f32	s1, s15
 8001280:	3738      	adds	r7, #56	@ 0x38
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop

08001288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b09e      	sub	sp, #120	@ 0x78
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	DHT_sensor livingRoom = {GPIOA, GPIO_PIN_1, DHT11, GPIO_PULLUP};
 800128e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
 800129e:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <main+0xb0>)
 80012a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80012a2:	2302      	movs	r3, #2
 80012a4:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80012a8:	2301      	movs	r3, #1
 80012aa:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ae:	f000 fa55 	bl	800175c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b2:	f000 f845 	bl	8001340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b6:	f000 f8ab 	bl	8001410 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80012ba:	f005 ff8d 	bl	80071d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  char buffer[40]={'\0'};
 80012be:	2300      	movs	r3, #0
 80012c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012c6:	2224      	movs	r2, #36	@ 0x24
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f007 fa0b 	bl	80086e6 <memset>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    char msg[40];
	    DHT_data d = DHT_getData(&livingRoom);
 80012d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fe29 	bl	8000f2c <DHT_getData>
 80012da:	eeb0 7a40 	vmov.f32	s14, s0
 80012de:	eef0 7a60 	vmov.f32	s15, s1
 80012e2:	ed87 7a0d 	vstr	s14, [r7, #52]	@ 0x34
 80012e6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	    sprintf(buffer, "\fLiving room: Temp %d°C, Hum %d%%\r\n", (uint8_t)d.temp, (uint8_t)d.hum);
 80012ea:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80012ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80012f6:	793b      	ldrb	r3, [r7, #4]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	461a      	mov	r2, r3
 80012fc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001304:	edc7 7a01 	vstr	s15, [r7, #4]
 8001308:	793b      	ldrb	r3, [r7, #4]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001310:	490a      	ldr	r1, [pc, #40]	@ (800133c <main+0xb4>)
 8001312:	f007 f985 	bl	8008620 <siprintf>
	    CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 8001316:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800131a:	4618      	mov	r0, r3
 800131c:	f7fe ffa8 	bl	8000270 <strlen>
 8001320:	4602      	mov	r2, r0
 8001322:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f006 f813 	bl	8007354 <CDC_Transmit_FS>
	    HAL_Delay(100);
 800132e:	2064      	movs	r0, #100	@ 0x64
 8001330:	f000 fa86 	bl	8001840 <HAL_Delay>
  {
 8001334:	bf00      	nop
 8001336:	e7cb      	b.n	80012d0 <main+0x48>
 8001338:	40020000 	.word	0x40020000
 800133c:	0800a8a0 	.word	0x0800a8a0

08001340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b094      	sub	sp, #80	@ 0x50
 8001344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001346:	f107 0320 	add.w	r3, r7, #32
 800134a:	2230      	movs	r2, #48	@ 0x30
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f007 f9c9 	bl	80086e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	4b27      	ldr	r3, [pc, #156]	@ (8001408 <SystemClock_Config+0xc8>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136c:	4a26      	ldr	r2, [pc, #152]	@ (8001408 <SystemClock_Config+0xc8>)
 800136e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001372:	6413      	str	r3, [r2, #64]	@ 0x40
 8001374:	4b24      	ldr	r3, [pc, #144]	@ (8001408 <SystemClock_Config+0xc8>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	4b21      	ldr	r3, [pc, #132]	@ (800140c <SystemClock_Config+0xcc>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a20      	ldr	r2, [pc, #128]	@ (800140c <SystemClock_Config+0xcc>)
 800138a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b1e      	ldr	r3, [pc, #120]	@ (800140c <SystemClock_Config+0xcc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800139c:	2301      	movs	r3, #1
 800139e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a6:	2302      	movs	r3, #2
 80013a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013b0:	2304      	movs	r3, #4
 80013b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80013b4:	2348      	movs	r3, #72	@ 0x48
 80013b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80013bc:	2303      	movs	r3, #3
 80013be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c0:	f107 0320 	add.w	r3, r7, #32
 80013c4:	4618      	mov	r0, r3
 80013c6:	f001 ff8f 	bl	80032e8 <HAL_RCC_OscConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013d0:	f000 f85a 	bl	8001488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d4:	230f      	movs	r3, #15
 80013d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d8:	2302      	movs	r3, #2
 80013da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	2102      	movs	r1, #2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 f9f1 	bl	80037d8 <HAL_RCC_ClockConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013fc:	f000 f844 	bl	8001488 <Error_Handler>
  }
}
 8001400:	bf00      	nop
 8001402:	3750      	adds	r7, #80	@ 0x50
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	40007000 	.word	0x40007000

08001410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <MX_GPIO_Init+0x70>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <MX_GPIO_Init+0x70>)
 8001430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <MX_GPIO_Init+0x70>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <MX_GPIO_Init+0x70>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a0d      	ldr	r2, [pc, #52]	@ (8001480 <MX_GPIO_Init+0x70>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <MX_GPIO_Init+0x70>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800145e:	2302      	movs	r3, #2
 8001460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	4619      	mov	r1, r3
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <MX_GPIO_Init+0x74>)
 8001472:	f000 fb1b 	bl	8001aac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001476:	bf00      	nop
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	40020000 	.word	0x40020000

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <Error_Handler+0x8>

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <HAL_MspInit+0x4c>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a2:	4a0f      	ldr	r2, [pc, #60]	@ (80014e0 <HAL_MspInit+0x4c>)
 80014a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014aa:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <HAL_MspInit+0x4c>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <HAL_MspInit+0x4c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	4a08      	ldr	r2, [pc, #32]	@ (80014e0 <HAL_MspInit+0x4c>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <HAL_MspInit+0x4c>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014d2:	2007      	movs	r0, #7
 80014d4:	f000 faa8 	bl	8001a28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <NMI_Handler+0x4>

080014ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <MemManage_Handler+0x4>

080014fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <UsageFault_Handler+0x4>

0800150c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153a:	f000 f961 	bl	8001800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <OTG_FS_IRQHandler+0x10>)
 800154a:	f000 fdc0 	bl	80020ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200017c8 	.word	0x200017c8

08001558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return 1;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_kill>:

int _kill(int pid, int sig)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001572:	f007 f90b 	bl	800878c <__errno>
 8001576:	4603      	mov	r3, r0
 8001578:	2216      	movs	r2, #22
 800157a:	601a      	str	r2, [r3, #0]
  return -1;
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <_exit>:

void _exit (int status)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ffe7 	bl	8001568 <_kill>
  while (1) {}    /* Make sure we hang here */
 800159a:	bf00      	nop
 800159c:	e7fd      	b.n	800159a <_exit+0x12>

0800159e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	e00a      	b.n	80015c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015b0:	f3af 8000 	nop.w
 80015b4:	4601      	mov	r1, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	60ba      	str	r2, [r7, #8]
 80015bc:	b2ca      	uxtb	r2, r1
 80015be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbf0      	blt.n	80015b0 <_read+0x12>
  }

  return len;
 80015ce:	687b      	ldr	r3, [r7, #4]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	e009      	b.n	80015fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	60ba      	str	r2, [r7, #8]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3301      	adds	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	429a      	cmp	r2, r3
 8001604:	dbf1      	blt.n	80015ea <_write+0x12>
  }
  return len;
 8001606:	687b      	ldr	r3, [r7, #4]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_close>:

int _close(int file)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001638:	605a      	str	r2, [r3, #4]
  return 0;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_isatty>:

int _isatty(int file)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001650:	2301      	movs	r3, #1
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800165e:	b480      	push	{r7}
 8001660:	b085      	sub	sp, #20
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001680:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <_sbrk+0x5c>)
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <_sbrk+0x60>)
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <_sbrk+0x64>)
 8001696:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <_sbrk+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d207      	bcs.n	80016b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a8:	f007 f870 	bl	800878c <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e009      	b.n	80016cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <_sbrk+0x64>)
 80016c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20020000 	.word	0x20020000
 80016d8:	00000400 	.word	0x00000400
 80016dc:	200002e0 	.word	0x200002e0
 80016e0:	20002018 	.word	0x20002018

080016e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <SystemInit+0x20>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ee:	4a05      	ldr	r2, [pc, #20]	@ (8001704 <SystemInit+0x20>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001708:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001740 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800170c:	f7ff ffea 	bl	80016e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001712:	490d      	ldr	r1, [pc, #52]	@ (8001748 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001718:	e002      	b.n	8001720 <LoopCopyDataInit>

0800171a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800171c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171e:	3304      	adds	r3, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001724:	d3f9      	bcc.n	800171a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001728:	4c0a      	ldr	r4, [pc, #40]	@ (8001754 <LoopFillZerobss+0x22>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800172c:	e001      	b.n	8001732 <LoopFillZerobss>

0800172e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001730:	3204      	adds	r2, #4

08001732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001734:	d3fb      	bcc.n	800172e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001736:	f007 f82f 	bl	8008798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173a:	f7ff fda5 	bl	8001288 <main>
  bx  lr    
 800173e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001740:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001748:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 800174c:	0800aca0 	.word	0x0800aca0
  ldr r2, =_sbss
 8001750:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001754:	20002018 	.word	0x20002018

08001758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC_IRQHandler>
	...

0800175c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001760:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0d      	ldr	r2, [pc, #52]	@ (800179c <HAL_Init+0x40>)
 8001766:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800176a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <HAL_Init+0x40>)
 8001772:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a07      	ldr	r2, [pc, #28]	@ (800179c <HAL_Init+0x40>)
 800177e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001784:	2003      	movs	r0, #3
 8001786:	f000 f94f 	bl	8001a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178a:	2000      	movs	r0, #0
 800178c:	f000 f808 	bl	80017a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001790:	f7ff fe80 	bl	8001494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023c00 	.word	0x40023c00

080017a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_InitTick+0x54>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_InitTick+0x58>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4619      	mov	r1, r3
 80017b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f967 	bl	8001a92 <HAL_SYSTICK_Config>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00e      	b.n	80017ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d80a      	bhi.n	80017ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d4:	2200      	movs	r2, #0
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f000 f92f 	bl	8001a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e0:	4a06      	ldr	r2, [pc, #24]	@ (80017fc <HAL_InitTick+0x5c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e000      	b.n	80017ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000008 	.word	0x20000008
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_IncTick+0x20>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_IncTick+0x24>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4413      	add	r3, r2
 8001810:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <HAL_IncTick+0x24>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000008 	.word	0x20000008
 8001824:	200002e4 	.word	0x200002e4

08001828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;
 800182c:	4b03      	ldr	r3, [pc, #12]	@ (800183c <HAL_GetTick+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	200002e4 	.word	0x200002e4

08001840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001848:	f7ff ffee 	bl	8001828 <HAL_GetTick>
 800184c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001858:	d005      	beq.n	8001866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <HAL_Delay+0x44>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4413      	add	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001866:	bf00      	nop
 8001868:	f7ff ffde 	bl	8001828 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	429a      	cmp	r2, r3
 8001876:	d8f7      	bhi.n	8001868 <HAL_Delay+0x28>
  {
  }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000008 	.word	0x20000008

08001888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001898:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a4:	4013      	ands	r3, r2
 80018a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ba:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	60d3      	str	r3, [r2, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d4:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <__NVIC_GetPriorityGrouping+0x18>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	f003 0307 	and.w	r3, r3, #7
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	db0b      	blt.n	8001916 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	f003 021f 	and.w	r2, r3, #31
 8001904:	4907      	ldr	r1, [pc, #28]	@ (8001924 <__NVIC_EnableIRQ+0x38>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	2001      	movs	r0, #1
 800190e:	fa00 f202 	lsl.w	r2, r0, r2
 8001912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000e100 	.word	0xe000e100

08001928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	db0a      	blt.n	8001952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	490c      	ldr	r1, [pc, #48]	@ (8001974 <__NVIC_SetPriority+0x4c>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	0112      	lsls	r2, r2, #4
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	440b      	add	r3, r1
 800194c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001950:	e00a      	b.n	8001968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4908      	ldr	r1, [pc, #32]	@ (8001978 <__NVIC_SetPriority+0x50>)
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	3b04      	subs	r3, #4
 8001960:	0112      	lsls	r2, r2, #4
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	440b      	add	r3, r1
 8001966:	761a      	strb	r2, [r3, #24]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000e100 	.word	0xe000e100
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	@ 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f1c3 0307 	rsb	r3, r3, #7
 8001996:	2b04      	cmp	r3, #4
 8001998:	bf28      	it	cs
 800199a:	2304      	movcs	r3, #4
 800199c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3304      	adds	r3, #4
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d902      	bls.n	80019ac <NVIC_EncodePriority+0x30>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3b03      	subs	r3, #3
 80019aa:	e000      	b.n	80019ae <NVIC_EncodePriority+0x32>
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43da      	mvns	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	401a      	ands	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	43d9      	mvns	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	4313      	orrs	r3, r2
         );
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3724      	adds	r7, #36	@ 0x24
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019f4:	d301      	bcc.n	80019fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00f      	b.n	8001a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001a24 <SysTick_Config+0x40>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a02:	210f      	movs	r1, #15
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f7ff ff8e 	bl	8001928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a0c:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <SysTick_Config+0x40>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a12:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <SysTick_Config+0x40>)
 8001a14:	2207      	movs	r2, #7
 8001a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	e000e010 	.word	0xe000e010

08001a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff29 	bl	8001888 <__NVIC_SetPriorityGrouping>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a50:	f7ff ff3e 	bl	80018d0 <__NVIC_GetPriorityGrouping>
 8001a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f7ff ff8e 	bl	800197c <NVIC_EncodePriority>
 8001a60:	4602      	mov	r2, r0
 8001a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff5d 	bl	8001928 <__NVIC_SetPriority>
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff31 	bl	80018ec <__NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ffa2 	bl	80019e4 <SysTick_Config>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	@ 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	e16b      	b.n	8001da0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	f040 815a 	bne.w	8001d9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d005      	beq.n	8001afe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d130      	bne.n	8001b60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b34:	2201      	movs	r2, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 0201 	and.w	r2, r3, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d017      	beq.n	8001b9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d123      	bne.n	8001bf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	08da      	lsrs	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3208      	adds	r2, #8
 8001bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	08da      	lsrs	r2, r3, #3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3208      	adds	r2, #8
 8001bea:	69b9      	ldr	r1, [r7, #24]
 8001bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0203 	and.w	r2, r3, #3
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80b4 	beq.w	8001d9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b60      	ldr	r3, [pc, #384]	@ (8001db8 <HAL_GPIO_Init+0x30c>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	4a5f      	ldr	r2, [pc, #380]	@ (8001db8 <HAL_GPIO_Init+0x30c>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c42:	4b5d      	ldr	r3, [pc, #372]	@ (8001db8 <HAL_GPIO_Init+0x30c>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c4e:	4a5b      	ldr	r2, [pc, #364]	@ (8001dbc <HAL_GPIO_Init+0x310>)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	3302      	adds	r3, #2
 8001c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	220f      	movs	r2, #15
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a52      	ldr	r2, [pc, #328]	@ (8001dc0 <HAL_GPIO_Init+0x314>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d02b      	beq.n	8001cd2 <HAL_GPIO_Init+0x226>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a51      	ldr	r2, [pc, #324]	@ (8001dc4 <HAL_GPIO_Init+0x318>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d025      	beq.n	8001cce <HAL_GPIO_Init+0x222>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a50      	ldr	r2, [pc, #320]	@ (8001dc8 <HAL_GPIO_Init+0x31c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d01f      	beq.n	8001cca <HAL_GPIO_Init+0x21e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8001dcc <HAL_GPIO_Init+0x320>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d019      	beq.n	8001cc6 <HAL_GPIO_Init+0x21a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4e      	ldr	r2, [pc, #312]	@ (8001dd0 <HAL_GPIO_Init+0x324>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0x216>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4d      	ldr	r2, [pc, #308]	@ (8001dd4 <HAL_GPIO_Init+0x328>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00d      	beq.n	8001cbe <HAL_GPIO_Init+0x212>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4c      	ldr	r2, [pc, #304]	@ (8001dd8 <HAL_GPIO_Init+0x32c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d007      	beq.n	8001cba <HAL_GPIO_Init+0x20e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4b      	ldr	r2, [pc, #300]	@ (8001ddc <HAL_GPIO_Init+0x330>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d101      	bne.n	8001cb6 <HAL_GPIO_Init+0x20a>
 8001cb2:	2307      	movs	r3, #7
 8001cb4:	e00e      	b.n	8001cd4 <HAL_GPIO_Init+0x228>
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	e00c      	b.n	8001cd4 <HAL_GPIO_Init+0x228>
 8001cba:	2306      	movs	r3, #6
 8001cbc:	e00a      	b.n	8001cd4 <HAL_GPIO_Init+0x228>
 8001cbe:	2305      	movs	r3, #5
 8001cc0:	e008      	b.n	8001cd4 <HAL_GPIO_Init+0x228>
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x228>
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e004      	b.n	8001cd4 <HAL_GPIO_Init+0x228>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e002      	b.n	8001cd4 <HAL_GPIO_Init+0x228>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_GPIO_Init+0x228>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	69fa      	ldr	r2, [r7, #28]
 8001cd6:	f002 0203 	and.w	r2, r2, #3
 8001cda:	0092      	lsls	r2, r2, #2
 8001cdc:	4093      	lsls	r3, r2
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce4:	4935      	ldr	r1, [pc, #212]	@ (8001dbc <HAL_GPIO_Init+0x310>)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	089b      	lsrs	r3, r3, #2
 8001cea:	3302      	adds	r3, #2
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8001de0 <HAL_GPIO_Init+0x334>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d16:	4a32      	ldr	r2, [pc, #200]	@ (8001de0 <HAL_GPIO_Init+0x334>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d1c:	4b30      	ldr	r3, [pc, #192]	@ (8001de0 <HAL_GPIO_Init+0x334>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d40:	4a27      	ldr	r2, [pc, #156]	@ (8001de0 <HAL_GPIO_Init+0x334>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d46:	4b26      	ldr	r3, [pc, #152]	@ (8001de0 <HAL_GPIO_Init+0x334>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001de0 <HAL_GPIO_Init+0x334>)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d70:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <HAL_GPIO_Init+0x334>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d94:	4a12      	ldr	r2, [pc, #72]	@ (8001de0 <HAL_GPIO_Init+0x334>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	2b0f      	cmp	r3, #15
 8001da4:	f67f ae90 	bls.w	8001ac8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3724      	adds	r7, #36	@ 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40013800 	.word	0x40013800
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	40020c00 	.word	0x40020c00
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40021400 	.word	0x40021400
 8001dd8:	40021800 	.word	0x40021800
 8001ddc:	40021c00 	.word	0x40021c00
 8001de0:	40013c00 	.word	0x40013c00

08001de4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e001      	b.n	8001e06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]
 8001e20:	4613      	mov	r3, r2
 8001e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e24:	787b      	ldrb	r3, [r7, #1]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e30:	e003      	b.n	8001e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e32:	887b      	ldrh	r3, [r7, #2]
 8001e34:	041a      	lsls	r2, r3, #16
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	619a      	str	r2, [r3, #24]
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af02      	add	r7, sp, #8
 8001e4c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e101      	b.n	800205c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f005 fba6 	bl	80075c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e86:	d102      	bne.n	8001e8e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f001 ffaf 	bl	8003df6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7c1a      	ldrb	r2, [r3, #16]
 8001ea0:	f88d 2000 	strb.w	r2, [sp]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ea8:	f001 fe8e 	bl	8003bc8 <USB_CoreInit>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e0ce      	b.n	800205c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f001 ffa7 	bl	8003e18 <USB_SetCurrentMode>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0bf      	b.n	800205c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e04a      	b.n	8001f78 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	3315      	adds	r3, #21
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	3314      	adds	r3, #20
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f0a:	7bfa      	ldrb	r2, [r7, #15]
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	b298      	uxth	r0, r3
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	332e      	adds	r3, #46	@ 0x2e
 8001f1e:	4602      	mov	r2, r0
 8001f20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	3318      	adds	r3, #24
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	331c      	adds	r3, #28
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	3320      	adds	r3, #32
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3324      	adds	r3, #36	@ 0x24
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	3301      	adds	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	791b      	ldrb	r3, [r3, #4]
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d3af      	bcc.n	8001ee2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]
 8001f86:	e044      	b.n	8002012 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	3301      	adds	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	791b      	ldrb	r3, [r3, #4]
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	429a      	cmp	r2, r3
 800201a:	d3b5      	bcc.n	8001f88 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7c1a      	ldrb	r2, [r3, #16]
 8002024:	f88d 2000 	strb.w	r2, [sp]
 8002028:	3304      	adds	r3, #4
 800202a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800202c:	f001 ff40 	bl	8003eb0 <USB_DevInit>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2202      	movs	r2, #2
 800203a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e00c      	b.n	800205c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f002 ff84 	bl	8004f62 <USB_DevDisconnect>

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_PCD_Start+0x1c>
 800207c:	2302      	movs	r3, #2
 800207e:	e022      	b.n	80020c6 <HAL_PCD_Start+0x62>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002090:	2b00      	cmp	r3, #0
 8002092:	d009      	beq.n	80020a8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002098:	2b01      	cmp	r3, #1
 800209a:	d105      	bne.n	80020a8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f001 fe91 	bl	8003dd4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f002 ff32 	bl	8004f20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020ce:	b590      	push	{r4, r7, lr}
 80020d0:	b08d      	sub	sp, #52	@ 0x34
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 fff0 	bl	80050ca <USB_GetMode>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f040 848c 	bne.w	8002a0a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f002 ff54 	bl	8004fa4 <USB_ReadInterrupts>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 8482 	beq.w	8002a08 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f002 ff41 	bl	8004fa4 <USB_ReadInterrupts>
 8002122:	4603      	mov	r3, r0
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b02      	cmp	r3, #2
 800212a:	d107      	bne.n	800213c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f002 0202 	and.w	r2, r2, #2
 800213a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f002 ff2f 	bl	8004fa4 <USB_ReadInterrupts>
 8002146:	4603      	mov	r3, r0
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b10      	cmp	r3, #16
 800214e:	d161      	bne.n	8002214 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0210 	bic.w	r2, r2, #16
 800215e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	f003 020f 	and.w	r2, r3, #15
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	3304      	adds	r3, #4
 800217e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	0c5b      	lsrs	r3, r3, #17
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	2b02      	cmp	r3, #2
 800218a:	d124      	bne.n	80021d6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d035      	beq.n	8002204 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	6a38      	ldr	r0, [r7, #32]
 80021ac:	f002 fd66 	bl	8004c7c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021bc:	441a      	add	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ce:	441a      	add	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	615a      	str	r2, [r3, #20]
 80021d4:	e016      	b.n	8002204 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	0c5b      	lsrs	r3, r3, #17
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d110      	bne.n	8002204 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021e8:	2208      	movs	r2, #8
 80021ea:	4619      	mov	r1, r3
 80021ec:	6a38      	ldr	r0, [r7, #32]
 80021ee:	f002 fd45 	bl	8004c7c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021fe:	441a      	add	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0210 	orr.w	r2, r2, #16
 8002212:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f002 fec3 	bl	8004fa4 <USB_ReadInterrupts>
 800221e:	4603      	mov	r3, r0
 8002220:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002224:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002228:	f040 80a7 	bne.w	800237a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f002 fec8 	bl	8004fca <USB_ReadDevAllOutEpInterrupt>
 800223a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800223c:	e099      	b.n	8002372 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800223e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 808e 	beq.w	8002366 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f002 feec 	bl	8005032 <USB_ReadDevOutEPInterrupt>
 800225a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00c      	beq.n	8002280 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	4413      	add	r3, r2
 800226e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002272:	461a      	mov	r2, r3
 8002274:	2301      	movs	r3, #1
 8002276:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002278:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fea2 	bl	8002fc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00c      	beq.n	80022a4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800228a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002296:	461a      	mov	r2, r3
 8002298:	2308      	movs	r3, #8
 800229a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800229c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 ff78 	bl	8003194 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022ba:	461a      	mov	r2, r3
 80022bc:	2310      	movs	r3, #16
 80022be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d030      	beq.n	800232c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d2:	2b80      	cmp	r3, #128	@ 0x80
 80022d4:	d109      	bne.n	80022ea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022e8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80022ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	4413      	add	r3, r2
 80022fc:	3304      	adds	r3, #4
 80022fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	78db      	ldrb	r3, [r3, #3]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d108      	bne.n	800231a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2200      	movs	r2, #0
 800230c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	b2db      	uxtb	r3, r3
 8002312:	4619      	mov	r1, r3
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f005 fa5b 	bl	80077d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	4413      	add	r3, r2
 8002322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002326:	461a      	mov	r2, r3
 8002328:	2302      	movs	r3, #2
 800232a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f003 0320 	and.w	r3, r3, #32
 8002332:	2b00      	cmp	r3, #0
 8002334:	d008      	beq.n	8002348 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002342:	461a      	mov	r2, r3
 8002344:	2320      	movs	r3, #32
 8002346:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d009      	beq.n	8002366 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	4413      	add	r3, r2
 800235a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800235e:	461a      	mov	r2, r3
 8002360:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002364:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002368:	3301      	adds	r3, #1
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800236c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236e:	085b      	lsrs	r3, r3, #1
 8002370:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002374:	2b00      	cmp	r3, #0
 8002376:	f47f af62 	bne.w	800223e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f002 fe10 	bl	8004fa4 <USB_ReadInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800238a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800238e:	f040 80db 	bne.w	8002548 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f002 fe31 	bl	8004ffe <USB_ReadDevAllInEpInterrupt>
 800239c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80023a2:	e0cd      	b.n	8002540 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 80c2 	beq.w	8002534 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 fe57 	bl	800506e <USB_ReadDevInEPInterrupt>
 80023c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d057      	beq.n	800247c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	2201      	movs	r2, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69f9      	ldr	r1, [r7, #28]
 80023e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80023ec:	4013      	ands	r3, r2
 80023ee:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023fc:	461a      	mov	r2, r3
 80023fe:	2301      	movs	r3, #1
 8002400:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	799b      	ldrb	r3, [r3, #6]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d132      	bne.n	8002470 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	3320      	adds	r3, #32
 800241a:	6819      	ldr	r1, [r3, #0]
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4403      	add	r3, r0
 800242a:	331c      	adds	r3, #28
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4419      	add	r1, r3
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4403      	add	r3, r0
 800243e:	3320      	adds	r3, #32
 8002440:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	2b00      	cmp	r3, #0
 8002446:	d113      	bne.n	8002470 <HAL_PCD_IRQHandler+0x3a2>
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	3324      	adds	r3, #36	@ 0x24
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d108      	bne.n	8002470 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002468:	461a      	mov	r2, r3
 800246a:	2101      	movs	r1, #1
 800246c:	f002 fe5e 	bl	800512c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002472:	b2db      	uxtb	r3, r3
 8002474:	4619      	mov	r1, r3
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f005 f925 	bl	80076c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	4413      	add	r3, r2
 800248e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002492:	461a      	mov	r2, r3
 8002494:	2308      	movs	r3, #8
 8002496:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024ae:	461a      	mov	r2, r3
 80024b0:	2310      	movs	r3, #16
 80024b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d008      	beq.n	80024d0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024ca:	461a      	mov	r2, r3
 80024cc:	2340      	movs	r3, #64	@ 0x40
 80024ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d023      	beq.n	8002522 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024dc:	6a38      	ldr	r0, [r7, #32]
 80024de:	f001 fe4b 	bl	8004178 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80024e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	3310      	adds	r3, #16
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	3304      	adds	r3, #4
 80024f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	78db      	ldrb	r3, [r3, #3]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d108      	bne.n	8002510 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2200      	movs	r2, #0
 8002502:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4619      	mov	r1, r3
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f005 f972 	bl	80077f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800251c:	461a      	mov	r2, r3
 800251e:	2302      	movs	r3, #2
 8002520:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800252c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fcbb 	bl	8002eaa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	3301      	adds	r3, #1
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800253a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253c:	085b      	lsrs	r3, r3, #1
 800253e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002542:	2b00      	cmp	r3, #0
 8002544:	f47f af2e 	bne.w	80023a4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f002 fd29 	bl	8004fa4 <USB_ReadInterrupts>
 8002552:	4603      	mov	r3, r0
 8002554:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002558:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800255c:	d122      	bne.n	80025a4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002578:	2b01      	cmp	r3, #1
 800257a:	d108      	bne.n	800258e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002584:	2100      	movs	r1, #0
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fea2 	bl	80032d0 <HAL_PCDEx_LPM_Callback>
 800258c:	e002      	b.n	8002594 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f005 f910 	bl	80077b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80025a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 fcfb 	bl	8004fa4 <USB_ReadInterrupts>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025b8:	d112      	bne.n	80025e0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d102      	bne.n	80025d0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f005 f8cc 	bl	8007768 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80025de:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 fcdd 	bl	8004fa4 <USB_ReadInterrupts>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025f4:	f040 80b7 	bne.w	8002766 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2110      	movs	r1, #16
 8002612:	4618      	mov	r0, r3
 8002614:	f001 fdb0 	bl	8004178 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002618:	2300      	movs	r3, #0
 800261a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800261c:	e046      	b.n	80026ac <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800261e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	4413      	add	r3, r2
 8002626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800262a:	461a      	mov	r2, r3
 800262c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002630:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	4413      	add	r3, r2
 800263a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002642:	0151      	lsls	r1, r2, #5
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	440a      	add	r2, r1
 8002648:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800264c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002650:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	4413      	add	r3, r2
 800265a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800265e:	461a      	mov	r2, r3
 8002660:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002664:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002676:	0151      	lsls	r1, r2, #5
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	440a      	add	r2, r1
 800267c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002680:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002684:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	4413      	add	r3, r2
 800268e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002696:	0151      	lsls	r1, r2, #5
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	440a      	add	r2, r1
 800269c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80026a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80026a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a8:	3301      	adds	r3, #1
 80026aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	791b      	ldrb	r3, [r3, #4]
 80026b0:	461a      	mov	r2, r3
 80026b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d3b2      	bcc.n	800261e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026c6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80026ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	7bdb      	ldrb	r3, [r3, #15]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d016      	beq.n	8002702 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026e4:	f043 030b 	orr.w	r3, r3, #11
 80026e8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026fa:	f043 030b 	orr.w	r3, r3, #11
 80026fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8002700:	e015      	b.n	800272e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002710:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002714:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002718:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002728:	f043 030b 	orr.w	r3, r3, #11
 800272c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800273c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002740:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002750:	461a      	mov	r2, r3
 8002752:	f002 fceb 	bl	800512c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f002 fc1a 	bl	8004fa4 <USB_ReadInterrupts>
 8002770:	4603      	mov	r3, r0
 8002772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800277a:	d123      	bne.n	80027c4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f002 fcb0 	bl	80050e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f001 fd6d 	bl	800426a <USB_GetDevSpeed>
 8002790:	4603      	mov	r3, r0
 8002792:	461a      	mov	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681c      	ldr	r4, [r3, #0]
 800279c:	f001 fa08 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 80027a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027a6:	461a      	mov	r2, r3
 80027a8:	4620      	mov	r0, r4
 80027aa:	f001 fa71 	bl	8003c90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f004 ffb1 	bl	8007716 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80027c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f002 fbeb 	bl	8004fa4 <USB_ReadInterrupts>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d10a      	bne.n	80027ee <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f004 ff8e 	bl	80076fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f002 0208 	and.w	r2, r2, #8
 80027ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f002 fbd6 	bl	8004fa4 <USB_ReadInterrupts>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fe:	2b80      	cmp	r3, #128	@ 0x80
 8002800:	d123      	bne.n	800284a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800280e:	2301      	movs	r3, #1
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24
 8002812:	e014      	b.n	800283e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d105      	bne.n	8002838 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	b2db      	uxtb	r3, r3
 8002830:	4619      	mov	r1, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fb08 	bl	8002e48 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283a:	3301      	adds	r3, #1
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	791b      	ldrb	r3, [r3, #4]
 8002842:	461a      	mov	r2, r3
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	4293      	cmp	r3, r2
 8002848:	d3e4      	bcc.n	8002814 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fba8 	bl	8004fa4 <USB_ReadInterrupts>
 8002854:	4603      	mov	r3, r0
 8002856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800285a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800285e:	d13c      	bne.n	80028da <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002860:	2301      	movs	r3, #1
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
 8002864:	e02b      	b.n	80028be <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4413      	add	r3, r2
 800286e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	3318      	adds	r3, #24
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d115      	bne.n	80028b8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800288c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800288e:	2b00      	cmp	r3, #0
 8002890:	da12      	bge.n	80028b8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002896:	4613      	mov	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	3317      	adds	r3, #23
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	4619      	mov	r1, r3
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fac8 	bl	8002e48 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ba:	3301      	adds	r3, #1
 80028bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	791b      	ldrb	r3, [r3, #4]
 80028c2:	461a      	mov	r2, r3
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d3cd      	bcc.n	8002866 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695a      	ldr	r2, [r3, #20]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80028d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f002 fb60 	bl	8004fa4 <USB_ReadInterrupts>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028ee:	d156      	bne.n	800299e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028f0:	2301      	movs	r3, #1
 80028f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f4:	e045      	b.n	8002982 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d12e      	bne.n	800297c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800291e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002920:	2b00      	cmp	r3, #0
 8002922:	da2b      	bge.n	800297c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002930:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002934:	429a      	cmp	r2, r3
 8002936:	d121      	bne.n	800297c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10a      	bne.n	800297c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002974:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002978:	6053      	str	r3, [r2, #4]
            break;
 800297a:	e008      	b.n	800298e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800297c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297e:	3301      	adds	r3, #1
 8002980:	627b      	str	r3, [r7, #36]	@ 0x24
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	791b      	ldrb	r3, [r3, #4]
 8002986:	461a      	mov	r2, r3
 8002988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298a:	4293      	cmp	r3, r2
 800298c:	d3b3      	bcc.n	80028f6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800299c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 fafe 	bl	8004fa4 <USB_ReadInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80029ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b2:	d10a      	bne.n	80029ca <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f004 ff2f 	bl	8007818 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80029c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f002 fae8 	bl	8004fa4 <USB_ReadInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d115      	bne.n	8002a0a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f004 ff1f 	bl	8007834 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	e000      	b.n	8002a0a <HAL_PCD_IRQHandler+0x93c>
      return;
 8002a08:	bf00      	nop
    }
  }
}
 8002a0a:	3734      	adds	r7, #52	@ 0x34
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd90      	pop	{r4, r7, pc}

08002a10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_PCD_SetAddress+0x1a>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e012      	b.n	8002a50 <HAL_PCD_SetAddress+0x40>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 fa47 	bl	8004ed4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	461a      	mov	r2, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	70fb      	strb	r3, [r7, #3]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	803b      	strh	r3, [r7, #0]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da0f      	bge.n	8002a9e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	3310      	adds	r3, #16
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	3304      	adds	r3, #4
 8002a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	705a      	strb	r2, [r3, #1]
 8002a9c:	e00f      	b.n	8002abe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	f003 020f 	and.w	r2, r3, #15
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002aca:	883a      	ldrh	r2, [r7, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	78ba      	ldrb	r2, [r7, #2]
 8002ad4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	785b      	ldrb	r3, [r3, #1]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d004      	beq.n	8002ae8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ae8:	78bb      	ldrb	r3, [r7, #2]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d102      	bne.n	8002af4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_PCD_EP_Open+0xaa>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e00e      	b.n	8002b20 <HAL_PCD_EP_Open+0xc8>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68f9      	ldr	r1, [r7, #12]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 fbcf 	bl	80042b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	da0f      	bge.n	8002b5c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 020f 	and.w	r2, r3, #15
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	3310      	adds	r3, #16
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	3304      	adds	r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	705a      	strb	r2, [r3, #1]
 8002b5a:	e00f      	b.n	8002b7c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	3304      	adds	r3, #4
 8002b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_PCD_EP_Close+0x6e>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e00e      	b.n	8002bb4 <HAL_PCD_EP_Close+0x8c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68f9      	ldr	r1, [r7, #12]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 fc0d 	bl	80043c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bcc:	7afb      	ldrb	r3, [r7, #11]
 8002bce:	f003 020f 	and.w	r2, r3, #15
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4413      	add	r3, r2
 8002be2:	3304      	adds	r3, #4
 8002be4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	799b      	ldrb	r3, [r3, #6]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d102      	bne.n	8002c18 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	799b      	ldrb	r3, [r3, #6]
 8002c20:	461a      	mov	r2, r3
 8002c22:	6979      	ldr	r1, [r7, #20]
 8002c24:	f001 fcaa 	bl	800457c <USB_EPStartXfer>

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	f003 020f 	and.w	r2, r3, #15
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002c54:	681b      	ldr	r3, [r3, #0]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c72:	7afb      	ldrb	r3, [r7, #11]
 8002c74:	f003 020f 	and.w	r2, r3, #15
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	3310      	adds	r3, #16
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4413      	add	r3, r2
 8002c86:	3304      	adds	r3, #4
 8002c88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ca2:	7afb      	ldrb	r3, [r7, #11]
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	799b      	ldrb	r3, [r3, #6]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d102      	bne.n	8002cbc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	799b      	ldrb	r3, [r3, #6]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	6979      	ldr	r1, [r7, #20]
 8002cc8:	f001 fc58 	bl	800457c <USB_EPStartXfer>

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	7912      	ldrb	r2, [r2, #4]
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e04f      	b.n	8002d94 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	da0f      	bge.n	8002d1c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	f003 020f 	and.w	r2, r3, #15
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	3310      	adds	r3, #16
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	4413      	add	r3, r2
 8002d10:	3304      	adds	r3, #4
 8002d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	705a      	strb	r2, [r3, #1]
 8002d1a:	e00d      	b.n	8002d38 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3304      	adds	r3, #4
 8002d30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_PCD_EP_SetStall+0x82>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e01d      	b.n	8002d94 <HAL_PCD_EP_SetStall+0xbe>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68f9      	ldr	r1, [r7, #12]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f001 ffe0 	bl	8004d2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	7999      	ldrb	r1, [r3, #6]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d84:	461a      	mov	r2, r3
 8002d86:	f002 f9d1 	bl	800512c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	7912      	ldrb	r2, [r2, #4]
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e042      	b.n	8002e40 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	da0f      	bge.n	8002de2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	f003 020f 	and.w	r2, r3, #15
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	3310      	adds	r3, #16
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	705a      	strb	r2, [r3, #1]
 8002de0:	e00f      	b.n	8002e02 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	f003 020f 	and.w	r2, r3, #15
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	3304      	adds	r3, #4
 8002dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_PCD_EP_ClrStall+0x86>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e00e      	b.n	8002e40 <HAL_PCD_EP_ClrStall+0xa4>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68f9      	ldr	r1, [r7, #12]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f001 ffe9 	bl	8004e08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	da0c      	bge.n	8002e76 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	f003 020f 	and.w	r2, r3, #15
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	3310      	adds	r3, #16
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	4413      	add	r3, r2
 8002e70:	3304      	adds	r3, #4
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	e00c      	b.n	8002e90 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	f003 020f 	and.w	r2, r3, #15
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68f9      	ldr	r1, [r7, #12]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 fe08 	bl	8004aac <USB_EPStopXfer>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ea0:	7afb      	ldrb	r3, [r7, #11]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b08a      	sub	sp, #40	@ 0x28
 8002eae:	af02      	add	r7, sp, #8
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	3310      	adds	r3, #16
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	3304      	adds	r3, #4
 8002ed0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d901      	bls.n	8002ee2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e06b      	b.n	8002fba <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d902      	bls.n	8002efe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3303      	adds	r3, #3
 8002f02:	089b      	lsrs	r3, r3, #2
 8002f04:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f06:	e02a      	b.n	8002f5e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d902      	bls.n	8002f24 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	3303      	adds	r3, #3
 8002f28:	089b      	lsrs	r3, r3, #2
 8002f2a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	68d9      	ldr	r1, [r3, #12]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	4603      	mov	r3, r0
 8002f40:	6978      	ldr	r0, [r7, #20]
 8002f42:	f001 fe5d 	bl	8004c00 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	441a      	add	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	441a      	add	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d809      	bhi.n	8002f88 <PCD_WriteEmptyTxFifo+0xde>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	695a      	ldr	r2, [r3, #20]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d203      	bcs.n	8002f88 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1bf      	bne.n	8002f08 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d811      	bhi.n	8002fb8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	6939      	ldr	r1, [r7, #16]
 8002fb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3720      	adds	r7, #32
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	333c      	adds	r3, #60	@ 0x3c
 8002fdc:	3304      	adds	r3, #4
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	799b      	ldrb	r3, [r3, #6]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d17b      	bne.n	80030f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d015      	beq.n	8003030 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	4a61      	ldr	r2, [pc, #388]	@ (800318c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	f240 80b9 	bls.w	8003180 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80b3 	beq.w	8003180 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003026:	461a      	mov	r2, r3
 8003028:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800302c:	6093      	str	r3, [r2, #8]
 800302e:	e0a7      	b.n	8003180 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003046:	461a      	mov	r2, r3
 8003048:	2320      	movs	r3, #32
 800304a:	6093      	str	r3, [r2, #8]
 800304c:	e098      	b.n	8003180 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 8093 	bne.w	8003180 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	4a4b      	ldr	r2, [pc, #300]	@ (800318c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d90f      	bls.n	8003082 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	4413      	add	r3, r2
 8003074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003078:	461a      	mov	r2, r3
 800307a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800307e:	6093      	str	r3, [r2, #8]
 8003080:	e07e      	b.n	8003180 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	3304      	adds	r3, #4
 8003096:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a1a      	ldr	r2, [r3, #32]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	0159      	lsls	r1, r3, #5
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	440b      	add	r3, r1
 80030a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ae:	1ad2      	subs	r2, r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d114      	bne.n	80030e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030cc:	461a      	mov	r2, r3
 80030ce:	2101      	movs	r1, #1
 80030d0:	f002 f82c 	bl	800512c <USB_EP0_OutStart>
 80030d4:	e006      	b.n	80030e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	441a      	add	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	4619      	mov	r1, r3
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f004 fad0 	bl	8007690 <HAL_PCD_DataOutStageCallback>
 80030f0:	e046      	b.n	8003180 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	4a26      	ldr	r2, [pc, #152]	@ (8003190 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d124      	bne.n	8003144 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	4413      	add	r3, r2
 800310c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003110:	461a      	mov	r2, r3
 8003112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003116:	6093      	str	r3, [r2, #8]
 8003118:	e032      	b.n	8003180 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	4413      	add	r3, r2
 800312c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003130:	461a      	mov	r2, r3
 8003132:	2320      	movs	r3, #32
 8003134:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	4619      	mov	r1, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f004 faa7 	bl	8007690 <HAL_PCD_DataOutStageCallback>
 8003142:	e01d      	b.n	8003180 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d114      	bne.n	8003174 <PCD_EP_OutXfrComplete_int+0x1b0>
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d108      	bne.n	8003174 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800316c:	461a      	mov	r2, r3
 800316e:	2100      	movs	r1, #0
 8003170:	f001 ffdc 	bl	800512c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	4619      	mov	r1, r3
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f004 fa88 	bl	8007690 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	4f54300a 	.word	0x4f54300a
 8003190:	4f54310a 	.word	0x4f54310a

08003194 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	333c      	adds	r3, #60	@ 0x3c
 80031ac:	3304      	adds	r3, #4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4a15      	ldr	r2, [pc, #84]	@ (800321c <PCD_EP_OutSetupPacket_int+0x88>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d90e      	bls.n	80031e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d009      	beq.n	80031e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031e0:	461a      	mov	r2, r3
 80031e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f004 fa3f 	bl	800766c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a0a      	ldr	r2, [pc, #40]	@ (800321c <PCD_EP_OutSetupPacket_int+0x88>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d90c      	bls.n	8003210 <PCD_EP_OutSetupPacket_int+0x7c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	799b      	ldrb	r3, [r3, #6]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d108      	bne.n	8003210 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003208:	461a      	mov	r2, r3
 800320a:	2101      	movs	r1, #1
 800320c:	f001 ff8e 	bl	800512c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	4f54300a 	.word	0x4f54300a

08003220 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
 800322c:	4613      	mov	r3, r2
 800322e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003236:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d107      	bne.n	800324e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800323e:	883b      	ldrh	r3, [r7, #0]
 8003240:	0419      	lsls	r1, r3, #16
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	430a      	orrs	r2, r1
 800324a:	629a      	str	r2, [r3, #40]	@ 0x28
 800324c:	e028      	b.n	80032a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	4413      	add	r3, r2
 800325a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800325c:	2300      	movs	r3, #0
 800325e:	73fb      	strb	r3, [r7, #15]
 8003260:	e00d      	b.n	800327e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	3340      	adds	r3, #64	@ 0x40
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	0c1b      	lsrs	r3, r3, #16
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	4413      	add	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	3301      	adds	r3, #1
 800327c:	73fb      	strb	r3, [r7, #15]
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	3b01      	subs	r3, #1
 8003284:	429a      	cmp	r2, r3
 8003286:	d3ec      	bcc.n	8003262 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003288:	883b      	ldrh	r3, [r7, #0]
 800328a:	0418      	lsls	r0, r3, #16
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6819      	ldr	r1, [r3, #0]
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	3b01      	subs	r3, #1
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	4302      	orrs	r2, r0
 8003298:	3340      	adds	r3, #64	@ 0x40
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e267      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d075      	beq.n	80033f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003306:	4b88      	ldr	r3, [pc, #544]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b04      	cmp	r3, #4
 8003310:	d00c      	beq.n	800332c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003312:	4b85      	ldr	r3, [pc, #532]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800331a:	2b08      	cmp	r3, #8
 800331c:	d112      	bne.n	8003344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331e:	4b82      	ldr	r3, [pc, #520]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003326:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800332a:	d10b      	bne.n	8003344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332c:	4b7e      	ldr	r3, [pc, #504]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d05b      	beq.n	80033f0 <HAL_RCC_OscConfig+0x108>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d157      	bne.n	80033f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e242      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800334c:	d106      	bne.n	800335c <HAL_RCC_OscConfig+0x74>
 800334e:	4b76      	ldr	r3, [pc, #472]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a75      	ldr	r2, [pc, #468]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e01d      	b.n	8003398 <HAL_RCC_OscConfig+0xb0>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003364:	d10c      	bne.n	8003380 <HAL_RCC_OscConfig+0x98>
 8003366:	4b70      	ldr	r3, [pc, #448]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a6f      	ldr	r2, [pc, #444]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 800336c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	4b6d      	ldr	r3, [pc, #436]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a6c      	ldr	r2, [pc, #432]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e00b      	b.n	8003398 <HAL_RCC_OscConfig+0xb0>
 8003380:	4b69      	ldr	r3, [pc, #420]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a68      	ldr	r2, [pc, #416]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	4b66      	ldr	r3, [pc, #408]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a65      	ldr	r2, [pc, #404]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d013      	beq.n	80033c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe fa42 	bl	8001828 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a8:	f7fe fa3e 	bl	8001828 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	@ 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e207      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0xc0>
 80033c6:	e014      	b.n	80033f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fe fa2e 	bl	8001828 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d0:	f7fe fa2a 	bl	8001828 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	@ 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e1f3      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	4b51      	ldr	r3, [pc, #324]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0xe8>
 80033ee:	e000      	b.n	80033f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d063      	beq.n	80034c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800340a:	4b47      	ldr	r3, [pc, #284]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003412:	2b08      	cmp	r3, #8
 8003414:	d11c      	bne.n	8003450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003416:	4b44      	ldr	r3, [pc, #272]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d116      	bne.n	8003450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003422:	4b41      	ldr	r3, [pc, #260]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_RCC_OscConfig+0x152>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d001      	beq.n	800343a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e1c7      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343a:	4b3b      	ldr	r3, [pc, #236]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4937      	ldr	r1, [pc, #220]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344e:	e03a      	b.n	80034c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d020      	beq.n	800349a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003458:	4b34      	ldr	r3, [pc, #208]	@ (800352c <HAL_RCC_OscConfig+0x244>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fe f9e3 	bl	8001828 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003466:	f7fe f9df 	bl	8001828 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e1a8      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003478:	4b2b      	ldr	r3, [pc, #172]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003484:	4b28      	ldr	r3, [pc, #160]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4925      	ldr	r1, [pc, #148]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]
 8003498:	e015      	b.n	80034c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349a:	4b24      	ldr	r3, [pc, #144]	@ (800352c <HAL_RCC_OscConfig+0x244>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fe f9c2 	bl	8001828 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a8:	f7fe f9be 	bl	8001828 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e187      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d036      	beq.n	8003540 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d016      	beq.n	8003508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034da:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <HAL_RCC_OscConfig+0x248>)
 80034dc:	2201      	movs	r2, #1
 80034de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7fe f9a2 	bl	8001828 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e8:	f7fe f99e 	bl	8001828 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e167      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 80034fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x200>
 8003506:	e01b      	b.n	8003540 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003508:	4b09      	ldr	r3, [pc, #36]	@ (8003530 <HAL_RCC_OscConfig+0x248>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350e:	f7fe f98b 	bl	8001828 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003514:	e00e      	b.n	8003534 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003516:	f7fe f987 	bl	8001828 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d907      	bls.n	8003534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e150      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
 8003528:	40023800 	.word	0x40023800
 800352c:	42470000 	.word	0x42470000
 8003530:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	4b88      	ldr	r3, [pc, #544]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1ea      	bne.n	8003516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 8097 	beq.w	800367c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354e:	2300      	movs	r3, #0
 8003550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003552:	4b81      	ldr	r3, [pc, #516]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10f      	bne.n	800357e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	4b7d      	ldr	r3, [pc, #500]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	4a7c      	ldr	r2, [pc, #496]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800356c:	6413      	str	r3, [r2, #64]	@ 0x40
 800356e:	4b7a      	ldr	r3, [pc, #488]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800357a:	2301      	movs	r3, #1
 800357c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357e:	4b77      	ldr	r3, [pc, #476]	@ (800375c <HAL_RCC_OscConfig+0x474>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003586:	2b00      	cmp	r3, #0
 8003588:	d118      	bne.n	80035bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800358a:	4b74      	ldr	r3, [pc, #464]	@ (800375c <HAL_RCC_OscConfig+0x474>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a73      	ldr	r2, [pc, #460]	@ (800375c <HAL_RCC_OscConfig+0x474>)
 8003590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003596:	f7fe f947 	bl	8001828 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359e:	f7fe f943 	bl	8001828 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e10c      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b0:	4b6a      	ldr	r3, [pc, #424]	@ (800375c <HAL_RCC_OscConfig+0x474>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d106      	bne.n	80035d2 <HAL_RCC_OscConfig+0x2ea>
 80035c4:	4b64      	ldr	r3, [pc, #400]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c8:	4a63      	ldr	r2, [pc, #396]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80035d0:	e01c      	b.n	800360c <HAL_RCC_OscConfig+0x324>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b05      	cmp	r3, #5
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x30c>
 80035da:	4b5f      	ldr	r3, [pc, #380]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035de:	4a5e      	ldr	r2, [pc, #376]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80035e0:	f043 0304 	orr.w	r3, r3, #4
 80035e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035f2:	e00b      	b.n	800360c <HAL_RCC_OscConfig+0x324>
 80035f4:	4b58      	ldr	r3, [pc, #352]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80035f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f8:	4a57      	ldr	r2, [pc, #348]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003600:	4b55      	ldr	r3, [pc, #340]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003604:	4a54      	ldr	r2, [pc, #336]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003606:	f023 0304 	bic.w	r3, r3, #4
 800360a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d015      	beq.n	8003640 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003614:	f7fe f908 	bl	8001828 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361a:	e00a      	b.n	8003632 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f7fe f904 	bl	8001828 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e0cb      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003632:	4b49      	ldr	r3, [pc, #292]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0ee      	beq.n	800361c <HAL_RCC_OscConfig+0x334>
 800363e:	e014      	b.n	800366a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003640:	f7fe f8f2 	bl	8001828 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003646:	e00a      	b.n	800365e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003648:	f7fe f8ee 	bl	8001828 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e0b5      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365e:	4b3e      	ldr	r3, [pc, #248]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1ee      	bne.n	8003648 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d105      	bne.n	800367c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003670:	4b39      	ldr	r3, [pc, #228]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003674:	4a38      	ldr	r2, [pc, #224]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800367a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 80a1 	beq.w	80037c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003686:	4b34      	ldr	r3, [pc, #208]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b08      	cmp	r3, #8
 8003690:	d05c      	beq.n	800374c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d141      	bne.n	800371e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b31      	ldr	r3, [pc, #196]	@ (8003760 <HAL_RCC_OscConfig+0x478>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7fe f8c2 	bl	8001828 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fe f8be 	bl	8001828 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e087      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ba:	4b27      	ldr	r3, [pc, #156]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	019b      	lsls	r3, r3, #6
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036dc:	085b      	lsrs	r3, r3, #1
 80036de:	3b01      	subs	r3, #1
 80036e0:	041b      	lsls	r3, r3, #16
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e8:	061b      	lsls	r3, r3, #24
 80036ea:	491b      	ldr	r1, [pc, #108]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003760 <HAL_RCC_OscConfig+0x478>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f6:	f7fe f897 	bl	8001828 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036fe:	f7fe f893 	bl	8001828 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e05c      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003710:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x416>
 800371c:	e054      	b.n	80037c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371e:	4b10      	ldr	r3, [pc, #64]	@ (8003760 <HAL_RCC_OscConfig+0x478>)
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7fe f880 	bl	8001828 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800372c:	f7fe f87c 	bl	8001828 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e045      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373e:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x444>
 800374a:	e03d      	b.n	80037c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d107      	bne.n	8003764 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e038      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
 8003758:	40023800 	.word	0x40023800
 800375c:	40007000 	.word	0x40007000
 8003760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003764:	4b1b      	ldr	r3, [pc, #108]	@ (80037d4 <HAL_RCC_OscConfig+0x4ec>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d028      	beq.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d121      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d11a      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003794:	4013      	ands	r3, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800379a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800379c:	4293      	cmp	r3, r2
 800379e:	d111      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037aa:	085b      	lsrs	r3, r3, #1
 80037ac:	3b01      	subs	r3, #1
 80037ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d107      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800

080037d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0cc      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037ec:	4b68      	ldr	r3, [pc, #416]	@ (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d90c      	bls.n	8003814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b65      	ldr	r3, [pc, #404]	@ (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	4b63      	ldr	r3, [pc, #396]	@ (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d001      	beq.n	8003814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0b8      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d020      	beq.n	8003862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800382c:	4b59      	ldr	r3, [pc, #356]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a58      	ldr	r2, [pc, #352]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003836:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003844:	4b53      	ldr	r3, [pc, #332]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4a52      	ldr	r2, [pc, #328]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800384e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003850:	4b50      	ldr	r3, [pc, #320]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	494d      	ldr	r1, [pc, #308]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	4313      	orrs	r3, r2
 8003860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d044      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d107      	bne.n	8003886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003876:	4b47      	ldr	r3, [pc, #284]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d119      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e07f      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d003      	beq.n	8003896 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003892:	2b03      	cmp	r3, #3
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003896:	4b3f      	ldr	r3, [pc, #252]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e06f      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e067      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b6:	4b37      	ldr	r3, [pc, #220]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f023 0203 	bic.w	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4934      	ldr	r1, [pc, #208]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c8:	f7fd ffae 	bl	8001828 <HAL_GetTick>
 80038cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d0:	f7fd ffaa 	bl	8001828 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e04f      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 020c 	and.w	r2, r3, #12
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d1eb      	bne.n	80038d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f8:	4b25      	ldr	r3, [pc, #148]	@ (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d20c      	bcs.n	8003920 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b22      	ldr	r3, [pc, #136]	@ (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390e:	4b20      	ldr	r3, [pc, #128]	@ (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e032      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800392c:	4b19      	ldr	r3, [pc, #100]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	4916      	ldr	r1, [pc, #88]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	4313      	orrs	r3, r2
 800393c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800394a:	4b12      	ldr	r3, [pc, #72]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	490e      	ldr	r1, [pc, #56]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800395e:	f000 f821 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8003962:	4602      	mov	r2, r0
 8003964:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	490a      	ldr	r1, [pc, #40]	@ (8003998 <HAL_RCC_ClockConfig+0x1c0>)
 8003970:	5ccb      	ldrb	r3, [r1, r3]
 8003972:	fa22 f303 	lsr.w	r3, r2, r3
 8003976:	4a09      	ldr	r2, [pc, #36]	@ (800399c <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800397a:	4b09      	ldr	r3, [pc, #36]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f7fd ff0e 	bl	80017a0 <HAL_InitTick>

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40023c00 	.word	0x40023c00
 8003994:	40023800 	.word	0x40023800
 8003998:	0800a910 	.word	0x0800a910
 800399c:	20000000 	.word	0x20000000
 80039a0:	20000004 	.word	0x20000004

080039a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a8:	b094      	sub	sp, #80	@ 0x50
 80039aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80039b0:	2300      	movs	r3, #0
 80039b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039b4:	2300      	movs	r3, #0
 80039b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039bc:	4b79      	ldr	r3, [pc, #484]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 030c 	and.w	r3, r3, #12
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d00d      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x40>
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	f200 80e1 	bhi.w	8003b90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x34>
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d003      	beq.n	80039de <HAL_RCC_GetSysClockFreq+0x3a>
 80039d6:	e0db      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039d8:	4b73      	ldr	r3, [pc, #460]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 80039da:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80039dc:	e0db      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039de:	4b73      	ldr	r3, [pc, #460]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x208>)
 80039e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039e2:	e0d8      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e4:	4b6f      	ldr	r3, [pc, #444]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ee:	4b6d      	ldr	r3, [pc, #436]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d063      	beq.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039fa:	4b6a      	ldr	r3, [pc, #424]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	099b      	lsrs	r3, r3, #6
 8003a00:	2200      	movs	r2, #0
 8003a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a0e:	2300      	movs	r3, #0
 8003a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a16:	4622      	mov	r2, r4
 8003a18:	462b      	mov	r3, r5
 8003a1a:	f04f 0000 	mov.w	r0, #0
 8003a1e:	f04f 0100 	mov.w	r1, #0
 8003a22:	0159      	lsls	r1, r3, #5
 8003a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a28:	0150      	lsls	r0, r2, #5
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4621      	mov	r1, r4
 8003a30:	1a51      	subs	r1, r2, r1
 8003a32:	6139      	str	r1, [r7, #16]
 8003a34:	4629      	mov	r1, r5
 8003a36:	eb63 0301 	sbc.w	r3, r3, r1
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a48:	4659      	mov	r1, fp
 8003a4a:	018b      	lsls	r3, r1, #6
 8003a4c:	4651      	mov	r1, sl
 8003a4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a52:	4651      	mov	r1, sl
 8003a54:	018a      	lsls	r2, r1, #6
 8003a56:	4651      	mov	r1, sl
 8003a58:	ebb2 0801 	subs.w	r8, r2, r1
 8003a5c:	4659      	mov	r1, fp
 8003a5e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a76:	4690      	mov	r8, r2
 8003a78:	4699      	mov	r9, r3
 8003a7a:	4623      	mov	r3, r4
 8003a7c:	eb18 0303 	adds.w	r3, r8, r3
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	462b      	mov	r3, r5
 8003a84:	eb49 0303 	adc.w	r3, r9, r3
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a96:	4629      	mov	r1, r5
 8003a98:	024b      	lsls	r3, r1, #9
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	024a      	lsls	r2, r1, #9
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aaa:	2200      	movs	r2, #0
 8003aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ab4:	f7fd f878 	bl	8000ba8 <__aeabi_uldivmod>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4613      	mov	r3, r2
 8003abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac0:	e058      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac2:	4b38      	ldr	r3, [pc, #224]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	099b      	lsrs	r3, r3, #6
 8003ac8:	2200      	movs	r2, #0
 8003aca:	4618      	mov	r0, r3
 8003acc:	4611      	mov	r1, r2
 8003ace:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ad2:	623b      	str	r3, [r7, #32]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003adc:	4642      	mov	r2, r8
 8003ade:	464b      	mov	r3, r9
 8003ae0:	f04f 0000 	mov.w	r0, #0
 8003ae4:	f04f 0100 	mov.w	r1, #0
 8003ae8:	0159      	lsls	r1, r3, #5
 8003aea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aee:	0150      	lsls	r0, r2, #5
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4641      	mov	r1, r8
 8003af6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003afa:	4649      	mov	r1, r9
 8003afc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b14:	ebb2 040a 	subs.w	r4, r2, sl
 8003b18:	eb63 050b 	sbc.w	r5, r3, fp
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	00eb      	lsls	r3, r5, #3
 8003b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b2a:	00e2      	lsls	r2, r4, #3
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	461d      	mov	r5, r3
 8003b30:	4643      	mov	r3, r8
 8003b32:	18e3      	adds	r3, r4, r3
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	464b      	mov	r3, r9
 8003b38:	eb45 0303 	adc.w	r3, r5, r3
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	028b      	lsls	r3, r1, #10
 8003b4e:	4621      	mov	r1, r4
 8003b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b54:	4621      	mov	r1, r4
 8003b56:	028a      	lsls	r2, r1, #10
 8003b58:	4610      	mov	r0, r2
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b5e:	2200      	movs	r2, #0
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	61fa      	str	r2, [r7, #28]
 8003b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b68:	f7fd f81e 	bl	8000ba8 <__aeabi_uldivmod>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4613      	mov	r3, r2
 8003b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	3301      	adds	r3, #1
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003b84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b8e:	e002      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b90:	4b05      	ldr	r3, [pc, #20]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3750      	adds	r7, #80	@ 0x50
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	00f42400 	.word	0x00f42400
 8003bac:	007a1200 	.word	0x007a1200

08003bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	@ (8003bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000000 	.word	0x20000000

08003bc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003bc8:	b084      	sub	sp, #16
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	f107 001c 	add.w	r0, r7, #28
 8003bd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bda:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d123      	bne.n	8003c2a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003bf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d105      	bne.n	8003c1e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f001 fae2 	bl	80051e8 <USB_CoreReset>
 8003c24:	4603      	mov	r3, r0
 8003c26:	73fb      	strb	r3, [r7, #15]
 8003c28:	e01b      	b.n	8003c62 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f001 fad6 	bl	80051e8 <USB_CoreReset>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c54:	e005      	b.n	8003c62 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c62:	7fbb      	ldrb	r3, [r7, #30]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d10b      	bne.n	8003c80 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f043 0206 	orr.w	r2, r3, #6
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f043 0220 	orr.w	r2, r3, #32
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c8c:	b004      	add	sp, #16
 8003c8e:	4770      	bx	lr

08003c90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d165      	bne.n	8003d70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4a41      	ldr	r2, [pc, #260]	@ (8003dac <USB_SetTurnaroundTime+0x11c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d906      	bls.n	8003cba <USB_SetTurnaroundTime+0x2a>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4a40      	ldr	r2, [pc, #256]	@ (8003db0 <USB_SetTurnaroundTime+0x120>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d202      	bcs.n	8003cba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003cb4:	230f      	movs	r3, #15
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	e062      	b.n	8003d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4a3c      	ldr	r2, [pc, #240]	@ (8003db0 <USB_SetTurnaroundTime+0x120>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d306      	bcc.n	8003cd0 <USB_SetTurnaroundTime+0x40>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	4a3b      	ldr	r2, [pc, #236]	@ (8003db4 <USB_SetTurnaroundTime+0x124>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d202      	bcs.n	8003cd0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003cca:	230e      	movs	r3, #14
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	e057      	b.n	8003d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4a38      	ldr	r2, [pc, #224]	@ (8003db4 <USB_SetTurnaroundTime+0x124>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d306      	bcc.n	8003ce6 <USB_SetTurnaroundTime+0x56>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4a37      	ldr	r2, [pc, #220]	@ (8003db8 <USB_SetTurnaroundTime+0x128>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d202      	bcs.n	8003ce6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003ce0:	230d      	movs	r3, #13
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	e04c      	b.n	8003d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	4a33      	ldr	r2, [pc, #204]	@ (8003db8 <USB_SetTurnaroundTime+0x128>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d306      	bcc.n	8003cfc <USB_SetTurnaroundTime+0x6c>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4a32      	ldr	r2, [pc, #200]	@ (8003dbc <USB_SetTurnaroundTime+0x12c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d802      	bhi.n	8003cfc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003cf6:	230c      	movs	r3, #12
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	e041      	b.n	8003d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4a2f      	ldr	r2, [pc, #188]	@ (8003dbc <USB_SetTurnaroundTime+0x12c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d906      	bls.n	8003d12 <USB_SetTurnaroundTime+0x82>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4a2e      	ldr	r2, [pc, #184]	@ (8003dc0 <USB_SetTurnaroundTime+0x130>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d802      	bhi.n	8003d12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d0c:	230b      	movs	r3, #11
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	e036      	b.n	8003d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc0 <USB_SetTurnaroundTime+0x130>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d906      	bls.n	8003d28 <USB_SetTurnaroundTime+0x98>
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4a29      	ldr	r2, [pc, #164]	@ (8003dc4 <USB_SetTurnaroundTime+0x134>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d802      	bhi.n	8003d28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d22:	230a      	movs	r3, #10
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	e02b      	b.n	8003d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4a26      	ldr	r2, [pc, #152]	@ (8003dc4 <USB_SetTurnaroundTime+0x134>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d906      	bls.n	8003d3e <USB_SetTurnaroundTime+0xae>
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4a25      	ldr	r2, [pc, #148]	@ (8003dc8 <USB_SetTurnaroundTime+0x138>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d202      	bcs.n	8003d3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d38:	2309      	movs	r3, #9
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	e020      	b.n	8003d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4a21      	ldr	r2, [pc, #132]	@ (8003dc8 <USB_SetTurnaroundTime+0x138>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d306      	bcc.n	8003d54 <USB_SetTurnaroundTime+0xc4>
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	4a20      	ldr	r2, [pc, #128]	@ (8003dcc <USB_SetTurnaroundTime+0x13c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d802      	bhi.n	8003d54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d4e:	2308      	movs	r3, #8
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	e015      	b.n	8003d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4a1d      	ldr	r2, [pc, #116]	@ (8003dcc <USB_SetTurnaroundTime+0x13c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d906      	bls.n	8003d6a <USB_SetTurnaroundTime+0xda>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003dd0 <USB_SetTurnaroundTime+0x140>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d202      	bcs.n	8003d6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d64:	2307      	movs	r3, #7
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	e00a      	b.n	8003d80 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d6a:	2306      	movs	r3, #6
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	e007      	b.n	8003d80 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d102      	bne.n	8003d7c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d76:	2309      	movs	r3, #9
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	e001      	b.n	8003d80 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d7c:	2309      	movs	r3, #9
 8003d7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	029b      	lsls	r3, r3, #10
 8003d94:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	00d8acbf 	.word	0x00d8acbf
 8003db0:	00e4e1c0 	.word	0x00e4e1c0
 8003db4:	00f42400 	.word	0x00f42400
 8003db8:	01067380 	.word	0x01067380
 8003dbc:	011a499f 	.word	0x011a499f
 8003dc0:	01312cff 	.word	0x01312cff
 8003dc4:	014ca43f 	.word	0x014ca43f
 8003dc8:	016e3600 	.word	0x016e3600
 8003dcc:	01a6ab1f 	.word	0x01a6ab1f
 8003dd0:	01e84800 	.word	0x01e84800

08003dd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f043 0201 	orr.w	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f023 0201 	bic.w	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d115      	bne.n	8003e66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003e46:	200a      	movs	r0, #10
 8003e48:	f7fd fcfa 	bl	8001840 <HAL_Delay>
      ms += 10U;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	330a      	adds	r3, #10
 8003e50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f001 f939 	bl	80050ca <USB_GetMode>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d01e      	beq.n	8003e9c <USB_SetCurrentMode+0x84>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2bc7      	cmp	r3, #199	@ 0xc7
 8003e62:	d9f0      	bls.n	8003e46 <USB_SetCurrentMode+0x2e>
 8003e64:	e01a      	b.n	8003e9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d115      	bne.n	8003e98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003e78:	200a      	movs	r0, #10
 8003e7a:	f7fd fce1 	bl	8001840 <HAL_Delay>
      ms += 10U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	330a      	adds	r3, #10
 8003e82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f001 f920 	bl	80050ca <USB_GetMode>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <USB_SetCurrentMode+0x84>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2bc7      	cmp	r3, #199	@ 0xc7
 8003e94:	d9f0      	bls.n	8003e78 <USB_SetCurrentMode+0x60>
 8003e96:	e001      	b.n	8003e9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e005      	b.n	8003ea8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2bc8      	cmp	r3, #200	@ 0xc8
 8003ea0:	d101      	bne.n	8003ea6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b086      	sub	sp, #24
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	e009      	b.n	8003ee4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	3340      	adds	r3, #64	@ 0x40
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	2200      	movs	r2, #0
 8003edc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b0e      	cmp	r3, #14
 8003ee8:	d9f2      	bls.n	8003ed0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003eea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d11c      	bne.n	8003f2c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f00:	f043 0302 	orr.w	r3, r3, #2
 8003f04:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f16:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f2a:	e00b      	b.n	8003f44 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f30:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f50:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d10d      	bne.n	8003f74 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d104      	bne.n	8003f6a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f60:	2100      	movs	r1, #0
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f968 	bl	8004238 <USB_SetDevSpeed>
 8003f68:	e008      	b.n	8003f7c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f963 	bl	8004238 <USB_SetDevSpeed>
 8003f72:	e003      	b.n	8003f7c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f74:	2103      	movs	r1, #3
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f95e 	bl	8004238 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f7c:	2110      	movs	r1, #16
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f8fa 	bl	8004178 <USB_FlushTxFifo>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f924 	bl	80041dc <USB_FlushRxFifo>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	e043      	b.n	8004050 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fde:	d118      	bne.n	8004012 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10a      	bne.n	8003ffc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e013      	b.n	8004024 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004008:	461a      	mov	r2, r3
 800400a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	e008      	b.n	8004024 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800401e:	461a      	mov	r2, r3
 8004020:	2300      	movs	r3, #0
 8004022:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004030:	461a      	mov	r2, r3
 8004032:	2300      	movs	r3, #0
 8004034:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004042:	461a      	mov	r2, r3
 8004044:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004048:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	3301      	adds	r3, #1
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004054:	461a      	mov	r2, r3
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4293      	cmp	r3, r2
 800405a:	d3b5      	bcc.n	8003fc8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	e043      	b.n	80040ea <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4413      	add	r3, r2
 800406a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004074:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004078:	d118      	bne.n	80040ac <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800408c:	461a      	mov	r2, r3
 800408e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	e013      	b.n	80040be <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a2:	461a      	mov	r2, r3
 80040a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e008      	b.n	80040be <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b8:	461a      	mov	r2, r3
 80040ba:	2300      	movs	r3, #0
 80040bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ca:	461a      	mov	r2, r3
 80040cc:	2300      	movs	r3, #0
 80040ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040dc:	461a      	mov	r2, r3
 80040de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	3301      	adds	r3, #1
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80040ee:	461a      	mov	r2, r3
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d3b5      	bcc.n	8004062 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004108:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004116:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004118:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800411c:	2b00      	cmp	r3, #0
 800411e:	d105      	bne.n	800412c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	f043 0210 	orr.w	r2, r3, #16
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699a      	ldr	r2, [r3, #24]
 8004130:	4b10      	ldr	r3, [pc, #64]	@ (8004174 <USB_DevInit+0x2c4>)
 8004132:	4313      	orrs	r3, r2
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004138:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f043 0208 	orr.w	r2, r3, #8
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800414c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004150:	2b01      	cmp	r3, #1
 8004152:	d107      	bne.n	8004164 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800415c:	f043 0304 	orr.w	r3, r3, #4
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004164:	7dfb      	ldrb	r3, [r7, #23]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004170:	b004      	add	sp, #16
 8004172:	4770      	bx	lr
 8004174:	803c3800 	.word	0x803c3800

08004178 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3301      	adds	r3, #1
 800418a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004192:	d901      	bls.n	8004198 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e01b      	b.n	80041d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	2b00      	cmp	r3, #0
 800419e:	daf2      	bge.n	8004186 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	019b      	lsls	r3, r3, #6
 80041a8:	f043 0220 	orr.w	r2, r3, #32
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3301      	adds	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041bc:	d901      	bls.n	80041c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e006      	b.n	80041d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d0f0      	beq.n	80041b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3301      	adds	r3, #1
 80041ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041f4:	d901      	bls.n	80041fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e018      	b.n	800422c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	daf2      	bge.n	80041e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2210      	movs	r2, #16
 800420a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3301      	adds	r3, #1
 8004210:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004218:	d901      	bls.n	800421e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e006      	b.n	800422c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b10      	cmp	r3, #16
 8004228:	d0f0      	beq.n	800420c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	68f9      	ldr	r1, [r7, #12]
 8004254:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004258:	4313      	orrs	r3, r2
 800425a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800426a:	b480      	push	{r7}
 800426c:	b087      	sub	sp, #28
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0306 	and.w	r3, r3, #6
 8004282:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d102      	bne.n	8004290 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800428a:	2300      	movs	r3, #0
 800428c:	75fb      	strb	r3, [r7, #23]
 800428e:	e00a      	b.n	80042a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d002      	beq.n	800429c <USB_GetDevSpeed+0x32>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b06      	cmp	r3, #6
 800429a:	d102      	bne.n	80042a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800429c:	2302      	movs	r3, #2
 800429e:	75fb      	strb	r3, [r7, #23]
 80042a0:	e001      	b.n	80042a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80042a2:	230f      	movs	r3, #15
 80042a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80042a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	785b      	ldrb	r3, [r3, #1]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d13a      	bne.n	8004346 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042d6:	69da      	ldr	r2, [r3, #28]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	f003 030f 	and.w	r3, r3, #15
 80042e0:	2101      	movs	r1, #1
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d155      	bne.n	80043b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	791b      	ldrb	r3, [r3, #4]
 8004322:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004324:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	059b      	lsls	r3, r3, #22
 800432a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800432c:	4313      	orrs	r3, r2
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	0151      	lsls	r1, r2, #5
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	440a      	add	r2, r1
 8004336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800433a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800433e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	e036      	b.n	80043b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800434c:	69da      	ldr	r2, [r3, #28]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	2101      	movs	r1, #1
 8004358:	fa01 f303 	lsl.w	r3, r1, r3
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	68f9      	ldr	r1, [r7, #12]
 8004360:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004364:	4313      	orrs	r3, r2
 8004366:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d11a      	bne.n	80043b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	791b      	ldrb	r3, [r3, #4]
 8004398:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800439a:	430b      	orrs	r3, r1
 800439c:	4313      	orrs	r3, r2
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	0151      	lsls	r1, r2, #5
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	440a      	add	r2, r1
 80043a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	785b      	ldrb	r3, [r3, #1]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d161      	bne.n	80044a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043f6:	d11f      	bne.n	8004438 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	0151      	lsls	r1, r2, #5
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	440a      	add	r2, r1
 800440e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004412:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004416:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	0151      	lsls	r1, r2, #5
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	440a      	add	r2, r1
 800442e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004432:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004436:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800443e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	2101      	movs	r1, #1
 800444a:	fa01 f303 	lsl.w	r3, r1, r3
 800444e:	b29b      	uxth	r3, r3
 8004450:	43db      	mvns	r3, r3
 8004452:	68f9      	ldr	r1, [r7, #12]
 8004454:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004458:	4013      	ands	r3, r2
 800445a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	2101      	movs	r1, #1
 800446e:	fa01 f303 	lsl.w	r3, r1, r3
 8004472:	b29b      	uxth	r3, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	68f9      	ldr	r1, [r7, #12]
 8004478:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800447c:	4013      	ands	r3, r2
 800447e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	0159      	lsls	r1, r3, #5
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	440b      	add	r3, r1
 8004496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800449a:	4619      	mov	r1, r3
 800449c:	4b35      	ldr	r3, [pc, #212]	@ (8004574 <USB_DeactivateEndpoint+0x1b0>)
 800449e:	4013      	ands	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]
 80044a2:	e060      	b.n	8004566 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044ba:	d11f      	bne.n	80044fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	0151      	lsls	r1, r2, #5
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	440a      	add	r2, r1
 80044d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80044da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	0151      	lsls	r1, r2, #5
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	440a      	add	r2, r1
 80044f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004502:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	f003 030f 	and.w	r3, r3, #15
 800450c:	2101      	movs	r1, #1
 800450e:	fa01 f303 	lsl.w	r3, r1, r3
 8004512:	041b      	lsls	r3, r3, #16
 8004514:	43db      	mvns	r3, r3
 8004516:	68f9      	ldr	r1, [r7, #12]
 8004518:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800451c:	4013      	ands	r3, r2
 800451e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	2101      	movs	r1, #1
 8004532:	fa01 f303 	lsl.w	r3, r1, r3
 8004536:	041b      	lsls	r3, r3, #16
 8004538:	43db      	mvns	r3, r3
 800453a:	68f9      	ldr	r1, [r7, #12]
 800453c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004540:	4013      	ands	r3, r2
 8004542:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	0159      	lsls	r1, r3, #5
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	440b      	add	r3, r1
 800455a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800455e:	4619      	mov	r1, r3
 8004560:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <USB_DeactivateEndpoint+0x1b4>)
 8004562:	4013      	ands	r3, r2
 8004564:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	ec337800 	.word	0xec337800
 8004578:	eff37800 	.word	0xeff37800

0800457c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	@ 0x28
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	4613      	mov	r3, r2
 8004588:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	785b      	ldrb	r3, [r3, #1]
 8004598:	2b01      	cmp	r3, #1
 800459a:	f040 817a 	bne.w	8004892 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d132      	bne.n	800460c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	0151      	lsls	r1, r2, #5
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	440a      	add	r2, r1
 80045bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045c0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80045c4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80045c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	0151      	lsls	r1, r2, #5
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	440a      	add	r2, r1
 80045e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	0151      	lsls	r1, r2, #5
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	440a      	add	r2, r1
 8004600:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004604:	0cdb      	lsrs	r3, r3, #19
 8004606:	04db      	lsls	r3, r3, #19
 8004608:	6113      	str	r3, [r2, #16]
 800460a:	e092      	b.n	8004732 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	0151      	lsls	r1, r2, #5
 800461e:	69fa      	ldr	r2, [r7, #28]
 8004620:	440a      	add	r2, r1
 8004622:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004626:	0cdb      	lsrs	r3, r3, #19
 8004628:	04db      	lsls	r3, r3, #19
 800462a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	0151      	lsls	r1, r2, #5
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	440a      	add	r2, r1
 8004642:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004646:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800464a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800464e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d11a      	bne.n	800468c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	429a      	cmp	r2, r3
 8004660:	d903      	bls.n	800466a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	0151      	lsls	r1, r2, #5
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	440a      	add	r2, r1
 8004680:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004684:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004688:	6113      	str	r3, [r2, #16]
 800468a:	e01b      	b.n	80046c4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004698:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	6919      	ldr	r1, [r3, #16]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	440b      	add	r3, r1
 80046a4:	1e59      	subs	r1, r3, #1
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80046ae:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046b0:	4ba2      	ldr	r3, [pc, #648]	@ (800493c <USB_EPStartXfer+0x3c0>)
 80046b2:	400b      	ands	r3, r1
 80046b4:	69b9      	ldr	r1, [r7, #24]
 80046b6:	0148      	lsls	r0, r1, #5
 80046b8:	69f9      	ldr	r1, [r7, #28]
 80046ba:	4401      	add	r1, r0
 80046bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80046c0:	4313      	orrs	r3, r2
 80046c2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046da:	69b9      	ldr	r1, [r7, #24]
 80046dc:	0148      	lsls	r0, r1, #5
 80046de:	69f9      	ldr	r1, [r7, #28]
 80046e0:	4401      	add	r1, r0
 80046e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80046e6:	4313      	orrs	r3, r2
 80046e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	791b      	ldrb	r3, [r3, #4]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d11f      	bne.n	8004732 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	440a      	add	r2, r1
 8004708:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800470c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004710:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	0151      	lsls	r1, r2, #5
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	440a      	add	r2, r1
 8004728:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800472c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004730:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d14b      	bne.n	80047d0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d009      	beq.n	8004754 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800474c:	461a      	mov	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	791b      	ldrb	r3, [r3, #4]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d128      	bne.n	80047ae <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d110      	bne.n	800478e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	0151      	lsls	r1, r2, #5
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	440a      	add	r2, r1
 8004782:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004786:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	e00f      	b.n	80047ae <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	0151      	lsls	r1, r2, #5
 80047c0:	69fa      	ldr	r2, [r7, #28]
 80047c2:	440a      	add	r2, r1
 80047c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	e165      	b.n	8004a9c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	0151      	lsls	r1, r2, #5
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	440a      	add	r2, r1
 80047e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80047ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	791b      	ldrb	r3, [r3, #4]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d015      	beq.n	8004824 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 814d 	beq.w	8004a9c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004808:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	2101      	movs	r1, #1
 8004814:	fa01 f303 	lsl.w	r3, r1, r3
 8004818:	69f9      	ldr	r1, [r7, #28]
 800481a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800481e:	4313      	orrs	r3, r2
 8004820:	634b      	str	r3, [r1, #52]	@ 0x34
 8004822:	e13b      	b.n	8004a9c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d110      	bne.n	8004856 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	0151      	lsls	r1, r2, #5
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	440a      	add	r2, r1
 800484a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800484e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	e00f      	b.n	8004876 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	0151      	lsls	r1, r2, #5
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	440a      	add	r2, r1
 800486c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004874:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	68d9      	ldr	r1, [r3, #12]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	781a      	ldrb	r2, [r3, #0]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	b298      	uxth	r0, r3
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	4603      	mov	r3, r0
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f9b8 	bl	8004c00 <USB_WritePacket>
 8004890:	e104      	b.n	8004a9c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	0151      	lsls	r1, r2, #5
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	440a      	add	r2, r1
 80048a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048ac:	0cdb      	lsrs	r3, r3, #19
 80048ae:	04db      	lsls	r3, r3, #19
 80048b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	0151      	lsls	r1, r2, #5
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	440a      	add	r2, r1
 80048c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048cc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80048d0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80048d4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d131      	bne.n	8004940 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800490a:	69b9      	ldr	r1, [r7, #24]
 800490c:	0148      	lsls	r0, r1, #5
 800490e:	69f9      	ldr	r1, [r7, #28]
 8004910:	4401      	add	r1, r0
 8004912:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004916:	4313      	orrs	r3, r2
 8004918:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	440a      	add	r2, r1
 8004930:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004934:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004938:	6113      	str	r3, [r2, #16]
 800493a:	e061      	b.n	8004a00 <USB_EPStartXfer+0x484>
 800493c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d123      	bne.n	8004990 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800495e:	69b9      	ldr	r1, [r7, #24]
 8004960:	0148      	lsls	r0, r1, #5
 8004962:	69f9      	ldr	r1, [r7, #28]
 8004964:	4401      	add	r1, r0
 8004966:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800496a:	4313      	orrs	r3, r2
 800496c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	0151      	lsls	r1, r2, #5
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	440a      	add	r2, r1
 8004984:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004988:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800498c:	6113      	str	r3, [r2, #16]
 800498e:	e037      	b.n	8004a00 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	4413      	add	r3, r2
 800499a:	1e5a      	subs	r2, r3, #1
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	8afa      	ldrh	r2, [r7, #22]
 80049ac:	fb03 f202 	mul.w	r2, r3, r2
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	8afb      	ldrh	r3, [r7, #22]
 80049c4:	04d9      	lsls	r1, r3, #19
 80049c6:	4b38      	ldr	r3, [pc, #224]	@ (8004aa8 <USB_EPStartXfer+0x52c>)
 80049c8:	400b      	ands	r3, r1
 80049ca:	69b9      	ldr	r1, [r7, #24]
 80049cc:	0148      	lsls	r0, r1, #5
 80049ce:	69f9      	ldr	r1, [r7, #28]
 80049d0:	4401      	add	r1, r0
 80049d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80049d6:	4313      	orrs	r3, r2
 80049d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e6:	691a      	ldr	r2, [r3, #16]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f0:	69b9      	ldr	r1, [r7, #24]
 80049f2:	0148      	lsls	r0, r1, #5
 80049f4:	69f9      	ldr	r1, [r7, #28]
 80049f6:	4401      	add	r1, r0
 80049f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80049fc:	4313      	orrs	r3, r2
 80049fe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d10d      	bne.n	8004a22 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	68d9      	ldr	r1, [r3, #12]
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a1e:	460a      	mov	r2, r1
 8004a20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	791b      	ldrb	r3, [r3, #4]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d128      	bne.n	8004a7c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d110      	bne.n	8004a5c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	0151      	lsls	r1, r2, #5
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	440a      	add	r2, r1
 8004a50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e00f      	b.n	8004a7c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	0151      	lsls	r1, r2, #5
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	440a      	add	r2, r1
 8004a72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	0151      	lsls	r1, r2, #5
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	440a      	add	r2, r1
 8004a92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a96:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004a9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	1ff80000 	.word	0x1ff80000

08004aac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	785b      	ldrb	r3, [r3, #1]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d14a      	bne.n	8004b60 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ade:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ae2:	f040 8086 	bne.w	8004bf2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	7812      	ldrb	r2, [r2, #0]
 8004afa:	0151      	lsls	r1, r2, #5
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	440a      	add	r2, r1
 8004b00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b08:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	7812      	ldrb	r2, [r2, #0]
 8004b1e:	0151      	lsls	r1, r2, #5
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	440a      	add	r2, r1
 8004b24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3301      	adds	r3, #1
 8004b32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d902      	bls.n	8004b44 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	75fb      	strb	r3, [r7, #23]
          break;
 8004b42:	e056      	b.n	8004bf2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b5c:	d0e7      	beq.n	8004b2e <USB_EPStopXfer+0x82>
 8004b5e:	e048      	b.n	8004bf2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b78:	d13b      	bne.n	8004bf2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	7812      	ldrb	r2, [r2, #0]
 8004b8e:	0151      	lsls	r1, r2, #5
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	440a      	add	r2, r1
 8004b94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b9c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	7812      	ldrb	r2, [r2, #0]
 8004bb2:	0151      	lsls	r1, r2, #5
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	440a      	add	r2, r1
 8004bb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d902      	bls.n	8004bd8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
          break;
 8004bd6:	e00c      	b.n	8004bf2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bf0:	d0e7      	beq.n	8004bc2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b089      	sub	sp, #36	@ 0x24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	460b      	mov	r3, r1
 8004c10:	71fb      	strb	r3, [r7, #7]
 8004c12:	4613      	mov	r3, r2
 8004c14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d123      	bne.n	8004c6e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c26:	88bb      	ldrh	r3, [r7, #4]
 8004c28:	3303      	adds	r3, #3
 8004c2a:	089b      	lsrs	r3, r3, #2
 8004c2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	e018      	b.n	8004c66 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	031a      	lsls	r2, r3, #12
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c40:	461a      	mov	r2, r3
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	3301      	adds	r3, #1
 8004c52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	3301      	adds	r3, #1
 8004c58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	3301      	adds	r3, #1
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d3e2      	bcc.n	8004c34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3724      	adds	r7, #36	@ 0x24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b08b      	sub	sp, #44	@ 0x2c
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c92:	88fb      	ldrh	r3, [r7, #6]
 8004c94:	089b      	lsrs	r3, r3, #2
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	623b      	str	r3, [r7, #32]
 8004ca6:	e014      	b.n	8004cd2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb2:	601a      	str	r2, [r3, #0]
    pDest++;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc8:	3301      	adds	r3, #1
 8004cca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	623b      	str	r3, [r7, #32]
 8004cd2:	6a3a      	ldr	r2, [r7, #32]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d3e6      	bcc.n	8004ca8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004cda:	8bfb      	ldrh	r3, [r7, #30]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01e      	beq.n	8004d1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cea:	461a      	mov	r2, r3
 8004cec:	f107 0310 	add.w	r3, r7, #16
 8004cf0:	6812      	ldr	r2, [r2, #0]
 8004cf2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	701a      	strb	r2, [r3, #0]
      i++;
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	3301      	adds	r3, #1
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004d12:	8bfb      	ldrh	r3, [r7, #30]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d18:	8bfb      	ldrh	r3, [r7, #30]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1ea      	bne.n	8004cf4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	372c      	adds	r7, #44	@ 0x2c
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d12c      	bne.n	8004da2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	db12      	blt.n	8004d80 <USB_EPSetStall+0x54>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00f      	beq.n	8004d80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	0151      	lsls	r1, r2, #5
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	440a      	add	r2, r1
 8004d76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	0151      	lsls	r1, r2, #5
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	440a      	add	r2, r1
 8004d96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	e02b      	b.n	8004dfa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	db12      	blt.n	8004dda <USB_EPSetStall+0xae>
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00f      	beq.n	8004dda <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dd4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004dd8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	0151      	lsls	r1, r2, #5
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	440a      	add	r2, r1
 8004df0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004df4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004df8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d128      	bne.n	8004e76 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	791b      	ldrb	r3, [r3, #4]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d003      	beq.n	8004e54 <USB_EPClearStall+0x4c>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	791b      	ldrb	r3, [r3, #4]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d138      	bne.n	8004ec6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	0151      	lsls	r1, r2, #5
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	440a      	add	r2, r1
 8004e6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	e027      	b.n	8004ec6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e90:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	791b      	ldrb	r3, [r3, #4]
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d003      	beq.n	8004ea6 <USB_EPClearStall+0x9e>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	791b      	ldrb	r3, [r3, #4]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d10f      	bne.n	8004ec6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	0151      	lsls	r1, r2, #5
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	440a      	add	r2, r1
 8004ebc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ec4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ef2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004ef6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004f08:	68f9      	ldr	r1, [r7, #12]
 8004f0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004f3a:	f023 0303 	bic.w	r3, r3, #3
 8004f3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f4e:	f023 0302 	bic.w	r3, r3, #2
 8004f52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b085      	sub	sp, #20
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004f7c:	f023 0303 	bic.w	r3, r3, #3
 8004f80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f90:	f043 0302 	orr.w	r3, r3, #2
 8004f94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	4013      	ands	r3, r2
 8004fec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	0c1b      	lsrs	r3, r3, #16
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b085      	sub	sp, #20
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	4013      	ands	r3, r2
 8005020:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	b29b      	uxth	r3, r3
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005032:	b480      	push	{r7}
 8005034:	b085      	sub	sp, #20
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	460b      	mov	r3, r1
 800503c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	4013      	ands	r3, r2
 800505e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005060:	68bb      	ldr	r3, [r7, #8]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800506e:	b480      	push	{r7}
 8005070:	b087      	sub	sp, #28
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	460b      	mov	r3, r1
 8005078:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800508e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005090:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	f003 030f 	and.w	r3, r3, #15
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	fa22 f303 	lsr.w	r3, r2, r3
 800509e:	01db      	lsls	r3, r3, #7
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4013      	ands	r3, r2
 80050ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050bc:	68bb      	ldr	r3, [r7, #8]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f003 0301 	and.w	r3, r3, #1
}
 80050da:	4618      	mov	r0, r3
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b085      	sub	sp, #20
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005100:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005104:	f023 0307 	bic.w	r3, r3, #7
 8005108:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800511c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	460b      	mov	r3, r1
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	333c      	adds	r3, #60	@ 0x3c
 8005142:	3304      	adds	r3, #4
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4a26      	ldr	r2, [pc, #152]	@ (80051e4 <USB_EP0_OutStart+0xb8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d90a      	bls.n	8005166 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800515c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005160:	d101      	bne.n	8005166 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	e037      	b.n	80051d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800516c:	461a      	mov	r2, r3
 800516e:	2300      	movs	r3, #0
 8005170:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005180:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005184:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005194:	f043 0318 	orr.w	r3, r3, #24
 8005198:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051a8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80051ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80051ae:	7afb      	ldrb	r3, [r7, #11]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d10f      	bne.n	80051d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ba:	461a      	mov	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051ce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80051d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	4f54300a 	.word	0x4f54300a

080051e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3301      	adds	r3, #1
 80051f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005200:	d901      	bls.n	8005206 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e01b      	b.n	800523e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	daf2      	bge.n	80051f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f043 0201 	orr.w	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3301      	adds	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800522a:	d901      	bls.n	8005230 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e006      	b.n	800523e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b01      	cmp	r3, #1
 800523a:	d0f0      	beq.n	800521e <USB_CoreReset+0x36>

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
	...

0800524c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005258:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800525c:	f002 fc82 	bl	8007b64 <USBD_static_malloc>
 8005260:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d109      	bne.n	800527c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	32b0      	adds	r2, #176	@ 0xb0
 8005272:	2100      	movs	r1, #0
 8005274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005278:	2302      	movs	r3, #2
 800527a:	e0d4      	b.n	8005426 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800527c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005280:	2100      	movs	r1, #0
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f003 fa2f 	bl	80086e6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	32b0      	adds	r2, #176	@ 0xb0
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	32b0      	adds	r2, #176	@ 0xb0
 80052a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	7c1b      	ldrb	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d138      	bne.n	8005326 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80052b4:	4b5e      	ldr	r3, [pc, #376]	@ (8005430 <USBD_CDC_Init+0x1e4>)
 80052b6:	7819      	ldrb	r1, [r3, #0]
 80052b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052bc:	2202      	movs	r2, #2
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f002 fb2d 	bl	800791e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80052c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005430 <USBD_CDC_Init+0x1e4>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	f003 020f 	and.w	r2, r3, #15
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	3324      	adds	r3, #36	@ 0x24
 80052da:	2201      	movs	r2, #1
 80052dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80052de:	4b55      	ldr	r3, [pc, #340]	@ (8005434 <USBD_CDC_Init+0x1e8>)
 80052e0:	7819      	ldrb	r1, [r3, #0]
 80052e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052e6:	2202      	movs	r2, #2
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f002 fb18 	bl	800791e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80052ee:	4b51      	ldr	r3, [pc, #324]	@ (8005434 <USBD_CDC_Init+0x1e8>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	f003 020f 	and.w	r2, r3, #15
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005306:	2201      	movs	r2, #1
 8005308:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800530a:	4b4b      	ldr	r3, [pc, #300]	@ (8005438 <USBD_CDC_Init+0x1ec>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	f003 020f 	and.w	r2, r3, #15
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	3326      	adds	r3, #38	@ 0x26
 8005320:	2210      	movs	r2, #16
 8005322:	801a      	strh	r2, [r3, #0]
 8005324:	e035      	b.n	8005392 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005326:	4b42      	ldr	r3, [pc, #264]	@ (8005430 <USBD_CDC_Init+0x1e4>)
 8005328:	7819      	ldrb	r1, [r3, #0]
 800532a:	2340      	movs	r3, #64	@ 0x40
 800532c:	2202      	movs	r2, #2
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f002 faf5 	bl	800791e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005334:	4b3e      	ldr	r3, [pc, #248]	@ (8005430 <USBD_CDC_Init+0x1e4>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	f003 020f 	and.w	r2, r3, #15
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	3324      	adds	r3, #36	@ 0x24
 800534a:	2201      	movs	r2, #1
 800534c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800534e:	4b39      	ldr	r3, [pc, #228]	@ (8005434 <USBD_CDC_Init+0x1e8>)
 8005350:	7819      	ldrb	r1, [r3, #0]
 8005352:	2340      	movs	r3, #64	@ 0x40
 8005354:	2202      	movs	r2, #2
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f002 fae1 	bl	800791e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800535c:	4b35      	ldr	r3, [pc, #212]	@ (8005434 <USBD_CDC_Init+0x1e8>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	f003 020f 	and.w	r2, r3, #15
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005374:	2201      	movs	r2, #1
 8005376:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005378:	4b2f      	ldr	r3, [pc, #188]	@ (8005438 <USBD_CDC_Init+0x1ec>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	f003 020f 	and.w	r2, r3, #15
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	3326      	adds	r3, #38	@ 0x26
 800538e:	2210      	movs	r2, #16
 8005390:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005392:	4b29      	ldr	r3, [pc, #164]	@ (8005438 <USBD_CDC_Init+0x1ec>)
 8005394:	7819      	ldrb	r1, [r3, #0]
 8005396:	2308      	movs	r3, #8
 8005398:	2203      	movs	r2, #3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f002 fabf 	bl	800791e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80053a0:	4b25      	ldr	r3, [pc, #148]	@ (8005438 <USBD_CDC_Init+0x1ec>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	f003 020f 	and.w	r2, r3, #15
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	440b      	add	r3, r1
 80053b4:	3324      	adds	r3, #36	@ 0x24
 80053b6:	2201      	movs	r2, #1
 80053b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	33b0      	adds	r3, #176	@ 0xb0
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80053f0:	2302      	movs	r3, #2
 80053f2:	e018      	b.n	8005426 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	7c1b      	ldrb	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005434 <USBD_CDC_Init+0x1e8>)
 80053fe:	7819      	ldrb	r1, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005406:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f002 fb76 	bl	8007afc <USBD_LL_PrepareReceive>
 8005410:	e008      	b.n	8005424 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005412:	4b08      	ldr	r3, [pc, #32]	@ (8005434 <USBD_CDC_Init+0x1e8>)
 8005414:	7819      	ldrb	r1, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800541c:	2340      	movs	r3, #64	@ 0x40
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f002 fb6c 	bl	8007afc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000093 	.word	0x20000093
 8005434:	20000094 	.word	0x20000094
 8005438:	20000095 	.word	0x20000095

0800543c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005448:	4b3a      	ldr	r3, [pc, #232]	@ (8005534 <USBD_CDC_DeInit+0xf8>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f002 fa8b 	bl	800796a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005454:	4b37      	ldr	r3, [pc, #220]	@ (8005534 <USBD_CDC_DeInit+0xf8>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	f003 020f 	and.w	r2, r3, #15
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	3324      	adds	r3, #36	@ 0x24
 800546a:	2200      	movs	r2, #0
 800546c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800546e:	4b32      	ldr	r3, [pc, #200]	@ (8005538 <USBD_CDC_DeInit+0xfc>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f002 fa78 	bl	800796a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800547a:	4b2f      	ldr	r3, [pc, #188]	@ (8005538 <USBD_CDC_DeInit+0xfc>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	f003 020f 	and.w	r2, r3, #15
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005492:	2200      	movs	r2, #0
 8005494:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005496:	4b29      	ldr	r3, [pc, #164]	@ (800553c <USBD_CDC_DeInit+0x100>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f002 fa64 	bl	800796a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80054a2:	4b26      	ldr	r3, [pc, #152]	@ (800553c <USBD_CDC_DeInit+0x100>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	f003 020f 	and.w	r2, r3, #15
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	3324      	adds	r3, #36	@ 0x24
 80054b8:	2200      	movs	r2, #0
 80054ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80054bc:	4b1f      	ldr	r3, [pc, #124]	@ (800553c <USBD_CDC_DeInit+0x100>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	f003 020f 	and.w	r2, r3, #15
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	3326      	adds	r3, #38	@ 0x26
 80054d2:	2200      	movs	r2, #0
 80054d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	32b0      	adds	r2, #176	@ 0xb0
 80054e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01f      	beq.n	8005528 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	33b0      	adds	r3, #176	@ 0xb0
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	32b0      	adds	r2, #176	@ 0xb0
 8005506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550a:	4618      	mov	r0, r3
 800550c:	f002 fb38 	bl	8007b80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	32b0      	adds	r2, #176	@ 0xb0
 800551a:	2100      	movs	r1, #0
 800551c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000093 	.word	0x20000093
 8005538:	20000094 	.word	0x20000094
 800553c:	20000095 	.word	0x20000095

08005540 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	32b0      	adds	r2, #176	@ 0xb0
 8005554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005558:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800556c:	2303      	movs	r3, #3
 800556e:	e0bf      	b.n	80056f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005578:	2b00      	cmp	r3, #0
 800557a:	d050      	beq.n	800561e <USBD_CDC_Setup+0xde>
 800557c:	2b20      	cmp	r3, #32
 800557e:	f040 80af 	bne.w	80056e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	88db      	ldrh	r3, [r3, #6]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d03a      	beq.n	8005600 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	b25b      	sxtb	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	da1b      	bge.n	80055cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	33b0      	adds	r3, #176	@ 0xb0
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80055aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	88d2      	ldrh	r2, [r2, #6]
 80055b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	88db      	ldrh	r3, [r3, #6]
 80055b6:	2b07      	cmp	r3, #7
 80055b8:	bf28      	it	cs
 80055ba:	2307      	movcs	r3, #7
 80055bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	89fa      	ldrh	r2, [r7, #14]
 80055c2:	4619      	mov	r1, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f001 fd87 	bl	80070d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80055ca:	e090      	b.n	80056ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	785a      	ldrb	r2, [r3, #1]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	88db      	ldrh	r3, [r3, #6]
 80055da:	2b3f      	cmp	r3, #63	@ 0x3f
 80055dc:	d803      	bhi.n	80055e6 <USBD_CDC_Setup+0xa6>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	88db      	ldrh	r3, [r3, #6]
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	e000      	b.n	80055e8 <USBD_CDC_Setup+0xa8>
 80055e6:	2240      	movs	r2, #64	@ 0x40
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80055ee:	6939      	ldr	r1, [r7, #16]
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80055f6:	461a      	mov	r2, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f001 fd99 	bl	8007130 <USBD_CtlPrepareRx>
      break;
 80055fe:	e076      	b.n	80056ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	33b0      	adds	r3, #176	@ 0xb0
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	7850      	ldrb	r0, [r2, #1]
 8005616:	2200      	movs	r2, #0
 8005618:	6839      	ldr	r1, [r7, #0]
 800561a:	4798      	blx	r3
      break;
 800561c:	e067      	b.n	80056ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	785b      	ldrb	r3, [r3, #1]
 8005622:	2b0b      	cmp	r3, #11
 8005624:	d851      	bhi.n	80056ca <USBD_CDC_Setup+0x18a>
 8005626:	a201      	add	r2, pc, #4	@ (adr r2, 800562c <USBD_CDC_Setup+0xec>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	0800565d 	.word	0x0800565d
 8005630:	080056d9 	.word	0x080056d9
 8005634:	080056cb 	.word	0x080056cb
 8005638:	080056cb 	.word	0x080056cb
 800563c:	080056cb 	.word	0x080056cb
 8005640:	080056cb 	.word	0x080056cb
 8005644:	080056cb 	.word	0x080056cb
 8005648:	080056cb 	.word	0x080056cb
 800564c:	080056cb 	.word	0x080056cb
 8005650:	080056cb 	.word	0x080056cb
 8005654:	08005687 	.word	0x08005687
 8005658:	080056b1 	.word	0x080056b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b03      	cmp	r3, #3
 8005666:	d107      	bne.n	8005678 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005668:	f107 030a 	add.w	r3, r7, #10
 800566c:	2202      	movs	r2, #2
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f001 fd31 	bl	80070d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005676:	e032      	b.n	80056de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005678:	6839      	ldr	r1, [r7, #0]
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f001 fcbb 	bl	8006ff6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005680:	2303      	movs	r3, #3
 8005682:	75fb      	strb	r3, [r7, #23]
          break;
 8005684:	e02b      	b.n	80056de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b03      	cmp	r3, #3
 8005690:	d107      	bne.n	80056a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005692:	f107 030d 	add.w	r3, r7, #13
 8005696:	2201      	movs	r2, #1
 8005698:	4619      	mov	r1, r3
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f001 fd1c 	bl	80070d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056a0:	e01d      	b.n	80056de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f001 fca6 	bl	8006ff6 <USBD_CtlError>
            ret = USBD_FAIL;
 80056aa:	2303      	movs	r3, #3
 80056ac:	75fb      	strb	r3, [r7, #23]
          break;
 80056ae:	e016      	b.n	80056de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d00f      	beq.n	80056dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f001 fc99 	bl	8006ff6 <USBD_CtlError>
            ret = USBD_FAIL;
 80056c4:	2303      	movs	r3, #3
 80056c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80056c8:	e008      	b.n	80056dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80056ca:	6839      	ldr	r1, [r7, #0]
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f001 fc92 	bl	8006ff6 <USBD_CtlError>
          ret = USBD_FAIL;
 80056d2:	2303      	movs	r3, #3
 80056d4:	75fb      	strb	r3, [r7, #23]
          break;
 80056d6:	e002      	b.n	80056de <USBD_CDC_Setup+0x19e>
          break;
 80056d8:	bf00      	nop
 80056da:	e008      	b.n	80056ee <USBD_CDC_Setup+0x1ae>
          break;
 80056dc:	bf00      	nop
      }
      break;
 80056de:	e006      	b.n	80056ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 fc87 	bl	8006ff6 <USBD_CtlError>
      ret = USBD_FAIL;
 80056e8:	2303      	movs	r3, #3
 80056ea:	75fb      	strb	r3, [r7, #23]
      break;
 80056ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	460b      	mov	r3, r1
 8005702:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800570a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	32b0      	adds	r2, #176	@ 0xb0
 8005716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800571e:	2303      	movs	r3, #3
 8005720:	e065      	b.n	80057ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	32b0      	adds	r2, #176	@ 0xb0
 800572c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005730:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005732:	78fb      	ldrb	r3, [r7, #3]
 8005734:	f003 020f 	and.w	r2, r3, #15
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	3318      	adds	r3, #24
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02f      	beq.n	80057ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	f003 020f 	and.w	r2, r3, #15
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	3318      	adds	r3, #24
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	78fb      	ldrb	r3, [r7, #3]
 8005764:	f003 010f 	and.w	r1, r3, #15
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	460b      	mov	r3, r1
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	440b      	add	r3, r1
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4403      	add	r3, r0
 8005774:	331c      	adds	r3, #28
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	fbb2 f1f3 	udiv	r1, r2, r3
 800577c:	fb01 f303 	mul.w	r3, r1, r3
 8005780:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005782:	2b00      	cmp	r3, #0
 8005784:	d112      	bne.n	80057ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	f003 020f 	and.w	r2, r3, #15
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	3318      	adds	r3, #24
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800579e:	78f9      	ldrb	r1, [r7, #3]
 80057a0:	2300      	movs	r3, #0
 80057a2:	2200      	movs	r2, #0
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f002 f988 	bl	8007aba <USBD_LL_Transmit>
 80057aa:	e01f      	b.n	80057ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	33b0      	adds	r3, #176	@ 0xb0
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d010      	beq.n	80057ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	33b0      	adds	r3, #176	@ 0xb0
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80057e8:	78fa      	ldrb	r2, [r7, #3]
 80057ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	460b      	mov	r3, r1
 8005800:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	32b0      	adds	r2, #176	@ 0xb0
 800580c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005810:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	32b0      	adds	r2, #176	@ 0xb0
 800581c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005824:	2303      	movs	r3, #3
 8005826:	e01a      	b.n	800585e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f002 f986 	bl	8007b3e <USBD_LL_GetRxDataSize>
 8005832:	4602      	mov	r2, r0
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	33b0      	adds	r3, #176	@ 0xb0
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005858:	4611      	mov	r1, r2
 800585a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	32b0      	adds	r2, #176	@ 0xb0
 8005878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005884:	2303      	movs	r3, #3
 8005886:	e024      	b.n	80058d2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	33b0      	adds	r3, #176	@ 0xb0
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d019      	beq.n	80058d0 <USBD_CDC_EP0_RxReady+0x6a>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80058a2:	2bff      	cmp	r3, #255	@ 0xff
 80058a4:	d014      	beq.n	80058d0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	33b0      	adds	r3, #176	@ 0xb0
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80058be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80058c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	22ff      	movs	r2, #255	@ 0xff
 80058cc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058e4:	2182      	movs	r1, #130	@ 0x82
 80058e6:	4818      	ldr	r0, [pc, #96]	@ (8005948 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058e8:	f000 fd4f 	bl	800638a <USBD_GetEpDesc>
 80058ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058ee:	2101      	movs	r1, #1
 80058f0:	4815      	ldr	r0, [pc, #84]	@ (8005948 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058f2:	f000 fd4a 	bl	800638a <USBD_GetEpDesc>
 80058f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058f8:	2181      	movs	r1, #129	@ 0x81
 80058fa:	4813      	ldr	r0, [pc, #76]	@ (8005948 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058fc:	f000 fd45 	bl	800638a <USBD_GetEpDesc>
 8005900:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2210      	movs	r2, #16
 800590c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d006      	beq.n	8005922 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2200      	movs	r2, #0
 8005918:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800591c:	711a      	strb	r2, [r3, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d006      	beq.n	8005936 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005930:	711a      	strb	r2, [r3, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2243      	movs	r2, #67	@ 0x43
 800593a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800593c:	4b02      	ldr	r3, [pc, #8]	@ (8005948 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800593e:	4618      	mov	r0, r3
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20000050 	.word	0x20000050

0800594c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005954:	2182      	movs	r1, #130	@ 0x82
 8005956:	4818      	ldr	r0, [pc, #96]	@ (80059b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005958:	f000 fd17 	bl	800638a <USBD_GetEpDesc>
 800595c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800595e:	2101      	movs	r1, #1
 8005960:	4815      	ldr	r0, [pc, #84]	@ (80059b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005962:	f000 fd12 	bl	800638a <USBD_GetEpDesc>
 8005966:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005968:	2181      	movs	r1, #129	@ 0x81
 800596a:	4813      	ldr	r0, [pc, #76]	@ (80059b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800596c:	f000 fd0d 	bl	800638a <USBD_GetEpDesc>
 8005970:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2210      	movs	r2, #16
 800597c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d006      	beq.n	8005992 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	2200      	movs	r2, #0
 8005988:	711a      	strb	r2, [r3, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f042 0202 	orr.w	r2, r2, #2
 8005990:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d006      	beq.n	80059a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	711a      	strb	r2, [r3, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f042 0202 	orr.w	r2, r2, #2
 80059a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2243      	movs	r2, #67	@ 0x43
 80059aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059ac:	4b02      	ldr	r3, [pc, #8]	@ (80059b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20000050 	.word	0x20000050

080059bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059c4:	2182      	movs	r1, #130	@ 0x82
 80059c6:	4818      	ldr	r0, [pc, #96]	@ (8005a28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059c8:	f000 fcdf 	bl	800638a <USBD_GetEpDesc>
 80059cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059ce:	2101      	movs	r1, #1
 80059d0:	4815      	ldr	r0, [pc, #84]	@ (8005a28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059d2:	f000 fcda 	bl	800638a <USBD_GetEpDesc>
 80059d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059d8:	2181      	movs	r1, #129	@ 0x81
 80059da:	4813      	ldr	r0, [pc, #76]	@ (8005a28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059dc:	f000 fcd5 	bl	800638a <USBD_GetEpDesc>
 80059e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2210      	movs	r2, #16
 80059ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d006      	beq.n	8005a02 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059fc:	711a      	strb	r2, [r3, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d006      	beq.n	8005a16 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a10:	711a      	strb	r2, [r3, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2243      	movs	r2, #67	@ 0x43
 8005a1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a1c:	4b02      	ldr	r3, [pc, #8]	@ (8005a28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20000050 	.word	0x20000050

08005a2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	220a      	movs	r2, #10
 8005a38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005a3a:	4b03      	ldr	r3, [pc, #12]	@ (8005a48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	2000000c 	.word	0x2000000c

08005a4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e009      	b.n	8005a74 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	33b0      	adds	r3, #176	@ 0xb0
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	32b0      	adds	r2, #176	@ 0xb0
 8005a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e008      	b.n	8005ab8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	32b0      	adds	r2, #176	@ 0xb0
 8005ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005adc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e004      	b.n	8005af2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	32b0      	adds	r2, #176	@ 0xb0
 8005b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b16:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e025      	b.n	8005b72 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d11f      	bne.n	8005b70 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005b38:	4b10      	ldr	r3, [pc, #64]	@ (8005b7c <USBD_CDC_TransmitPacket+0x7c>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	f003 020f 	and.w	r2, r3, #15
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4403      	add	r3, r0
 8005b52:	3318      	adds	r3, #24
 8005b54:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005b56:	4b09      	ldr	r3, [pc, #36]	@ (8005b7c <USBD_CDC_TransmitPacket+0x7c>)
 8005b58:	7819      	ldrb	r1, [r3, #0]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f001 ffa7 	bl	8007aba <USBD_LL_Transmit>

    ret = USBD_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000093 	.word	0x20000093

08005b80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	32b0      	adds	r2, #176	@ 0xb0
 8005b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b96:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	32b0      	adds	r2, #176	@ 0xb0
 8005ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e018      	b.n	8005be0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	7c1b      	ldrb	r3, [r3, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10a      	bne.n	8005bcc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8005be8 <USBD_CDC_ReceivePacket+0x68>)
 8005bb8:	7819      	ldrb	r1, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005bc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f001 ff99 	bl	8007afc <USBD_LL_PrepareReceive>
 8005bca:	e008      	b.n	8005bde <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005bcc:	4b06      	ldr	r3, [pc, #24]	@ (8005be8 <USBD_CDC_ReceivePacket+0x68>)
 8005bce:	7819      	ldrb	r1, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005bd6:	2340      	movs	r3, #64	@ 0x40
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f001 ff8f 	bl	8007afc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000094 	.word	0x20000094

08005bec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e01f      	b.n	8005c44 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	79fa      	ldrb	r2, [r7, #7]
 8005c36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f001 fe09 	bl	8007850 <USBD_LL_Init>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e025      	b.n	8005cb0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	32ae      	adds	r2, #174	@ 0xae
 8005c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00f      	beq.n	8005ca0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	32ae      	adds	r2, #174	@ 0xae
 8005c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c90:	f107 020e 	add.w	r2, r7, #14
 8005c94:	4610      	mov	r0, r2
 8005c96:	4798      	blx	r3
 8005c98:	4602      	mov	r2, r0
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f001 fe11 	bl	80078e8 <USBD_LL_Start>
 8005cc6:	4603      	mov	r3, r0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005cd8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d009      	beq.n	8005d14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	78fa      	ldrb	r2, [r7, #3]
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	4798      	blx	r3
 8005d10:	4603      	mov	r3, r0
 8005d12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	460b      	mov	r3, r1
 8005d28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	78fa      	ldrb	r2, [r7, #3]
 8005d38:	4611      	mov	r1, r2
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	4798      	blx	r3
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005d44:	2303      	movs	r3, #3
 8005d46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d62:	6839      	ldr	r1, [r7, #0]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f001 f90c 	bl	8006f82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005d78:	461a      	mov	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d01a      	beq.n	8005dc4 <USBD_LL_SetupStage+0x72>
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d822      	bhi.n	8005dd8 <USBD_LL_SetupStage+0x86>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <USBD_LL_SetupStage+0x4a>
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d00a      	beq.n	8005db0 <USBD_LL_SetupStage+0x5e>
 8005d9a:	e01d      	b.n	8005dd8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fb63 	bl	8006470 <USBD_StdDevReq>
 8005daa:	4603      	mov	r3, r0
 8005dac:	73fb      	strb	r3, [r7, #15]
      break;
 8005dae:	e020      	b.n	8005df2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005db6:	4619      	mov	r1, r3
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fbcb 	bl	8006554 <USBD_StdItfReq>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc2:	e016      	b.n	8005df2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fc2d 	bl	800662c <USBD_StdEPReq>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd6:	e00c      	b.n	8005df2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005dde:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	4619      	mov	r1, r3
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f001 fdde 	bl	80079a8 <USBD_LL_StallEP>
 8005dec:	4603      	mov	r3, r0
 8005dee:	73fb      	strb	r3, [r7, #15]
      break;
 8005df0:	bf00      	nop
  }

  return ret;
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	460b      	mov	r3, r1
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005e0e:	7afb      	ldrb	r3, [r7, #11]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d16e      	bne.n	8005ef2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005e1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	f040 8098 	bne.w	8005f58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d913      	bls.n	8005e5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	1ad2      	subs	r2, r2, r3
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	bf28      	it	cs
 8005e4e:	4613      	movcs	r3, r2
 8005e50:	461a      	mov	r2, r3
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f001 f988 	bl	800716a <USBD_CtlContinueRx>
 8005e5a:	e07d      	b.n	8005f58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005e62:	f003 031f 	and.w	r3, r3, #31
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d014      	beq.n	8005e94 <USBD_LL_DataOutStage+0x98>
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d81d      	bhi.n	8005eaa <USBD_LL_DataOutStage+0xae>
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <USBD_LL_DataOutStage+0x7c>
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d003      	beq.n	8005e7e <USBD_LL_DataOutStage+0x82>
 8005e76:	e018      	b.n	8005eaa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	75bb      	strb	r3, [r7, #22]
            break;
 8005e7c:	e018      	b.n	8005eb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	4619      	mov	r1, r3
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fa64 	bl	8006356 <USBD_CoreFindIF>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	75bb      	strb	r3, [r7, #22]
            break;
 8005e92:	e00d      	b.n	8005eb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fa66 	bl	8006370 <USBD_CoreFindEP>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	75bb      	strb	r3, [r7, #22]
            break;
 8005ea8:	e002      	b.n	8005eb0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	75bb      	strb	r3, [r7, #22]
            break;
 8005eae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005eb0:	7dbb      	ldrb	r3, [r7, #22]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d119      	bne.n	8005eea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d113      	bne.n	8005eea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005ec2:	7dba      	ldrb	r2, [r7, #22]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	32ae      	adds	r2, #174	@ 0xae
 8005ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00b      	beq.n	8005eea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005ed2:	7dba      	ldrb	r2, [r7, #22]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005eda:	7dba      	ldrb	r2, [r7, #22]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	32ae      	adds	r2, #174	@ 0xae
 8005ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f001 f94e 	bl	800718c <USBD_CtlSendStatus>
 8005ef0:	e032      	b.n	8005f58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005ef2:	7afb      	ldrb	r3, [r7, #11]
 8005ef4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	4619      	mov	r1, r3
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fa37 	bl	8006370 <USBD_CoreFindEP>
 8005f02:	4603      	mov	r3, r0
 8005f04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f06:	7dbb      	ldrb	r3, [r7, #22]
 8005f08:	2bff      	cmp	r3, #255	@ 0xff
 8005f0a:	d025      	beq.n	8005f58 <USBD_LL_DataOutStage+0x15c>
 8005f0c:	7dbb      	ldrb	r3, [r7, #22]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d122      	bne.n	8005f58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d117      	bne.n	8005f4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005f1e:	7dba      	ldrb	r2, [r7, #22]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	32ae      	adds	r2, #174	@ 0xae
 8005f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00f      	beq.n	8005f4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005f2e:	7dba      	ldrb	r2, [r7, #22]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005f36:	7dba      	ldrb	r2, [r7, #22]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	32ae      	adds	r2, #174	@ 0xae
 8005f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	7afa      	ldrb	r2, [r7, #11]
 8005f44:	4611      	mov	r1, r2
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	4798      	blx	r3
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005f4e:	7dfb      	ldrb	r3, [r7, #23]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
 8005f56:	e000      	b.n	8005f5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b086      	sub	sp, #24
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	607a      	str	r2, [r7, #4]
 8005f6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005f70:	7afb      	ldrb	r3, [r7, #11]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d16f      	bne.n	8006056 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3314      	adds	r3, #20
 8005f7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d15a      	bne.n	800603c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d914      	bls.n	8005fbc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	1ad2      	subs	r2, r2, r3
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f001 f8b0 	bl	800710e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fae:	2300      	movs	r3, #0
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f001 fda1 	bl	8007afc <USBD_LL_PrepareReceive>
 8005fba:	e03f      	b.n	800603c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d11c      	bne.n	8006002 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d316      	bcc.n	8006002 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d20f      	bcs.n	8006002 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f001 f891 	bl	800710e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f001 fd7e 	bl	8007afc <USBD_LL_PrepareReceive>
 8006000:	e01c      	b.n	800603c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b03      	cmp	r3, #3
 800600c:	d10f      	bne.n	800602e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d009      	beq.n	800602e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800602e:	2180      	movs	r1, #128	@ 0x80
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f001 fcb9 	bl	80079a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f001 f8bb 	bl	80071b2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d03a      	beq.n	80060bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff fe42 	bl	8005cd0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006054:	e032      	b.n	80060bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006056:	7afb      	ldrb	r3, [r7, #11]
 8006058:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800605c:	b2db      	uxtb	r3, r3
 800605e:	4619      	mov	r1, r3
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 f985 	bl	8006370 <USBD_CoreFindEP>
 8006066:	4603      	mov	r3, r0
 8006068:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	2bff      	cmp	r3, #255	@ 0xff
 800606e:	d025      	beq.n	80060bc <USBD_LL_DataInStage+0x15a>
 8006070:	7dfb      	ldrb	r3, [r7, #23]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d122      	bne.n	80060bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b03      	cmp	r3, #3
 8006080:	d11c      	bne.n	80060bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006082:	7dfa      	ldrb	r2, [r7, #23]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	32ae      	adds	r2, #174	@ 0xae
 8006088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d014      	beq.n	80060bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006092:	7dfa      	ldrb	r2, [r7, #23]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800609a:	7dfa      	ldrb	r2, [r7, #23]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	32ae      	adds	r2, #174	@ 0xae
 80060a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	7afa      	ldrb	r2, [r7, #11]
 80060a8:	4611      	mov	r1, r2
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	4798      	blx	r3
 80060ae:	4603      	mov	r3, r0
 80060b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80060b2:	7dbb      	ldrb	r3, [r7, #22]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80060b8:	7dbb      	ldrb	r3, [r7, #22]
 80060ba:	e000      	b.n	80060be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d014      	beq.n	800612c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00e      	beq.n	800612c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6852      	ldr	r2, [r2, #4]
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	4611      	mov	r1, r2
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4798      	blx	r3
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006128:	2303      	movs	r3, #3
 800612a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800612c:	2340      	movs	r3, #64	@ 0x40
 800612e:	2200      	movs	r2, #0
 8006130:	2100      	movs	r1, #0
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f001 fbf3 	bl	800791e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2240      	movs	r2, #64	@ 0x40
 8006144:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006148:	2340      	movs	r3, #64	@ 0x40
 800614a:	2200      	movs	r2, #0
 800614c:	2180      	movs	r1, #128	@ 0x80
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f001 fbe5 	bl	800791e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2240      	movs	r2, #64	@ 0x40
 800615e:	621a      	str	r2, [r3, #32]

  return ret;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	460b      	mov	r3, r1
 8006174:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	78fa      	ldrb	r2, [r7, #3]
 800617a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b04      	cmp	r3, #4
 800619c:	d006      	beq.n	80061ac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2204      	movs	r2, #4
 80061b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d106      	bne.n	80061e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b03      	cmp	r3, #3
 8006204:	d110      	bne.n	8006228 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00b      	beq.n	8006228 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b082      	sub	sp, #8
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	460b      	mov	r3, r1
 800623c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	32ae      	adds	r2, #174	@ 0xae
 8006248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006250:	2303      	movs	r3, #3
 8006252:	e01c      	b.n	800628e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b03      	cmp	r3, #3
 800625e:	d115      	bne.n	800628c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	32ae      	adds	r2, #174	@ 0xae
 800626a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00b      	beq.n	800628c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	32ae      	adds	r2, #174	@ 0xae
 800627e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	78fa      	ldrb	r2, [r7, #3]
 8006286:	4611      	mov	r1, r2
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	460b      	mov	r3, r1
 80062a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	32ae      	adds	r2, #174	@ 0xae
 80062ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e01c      	b.n	80062f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d115      	bne.n	80062f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	32ae      	adds	r2, #174	@ 0xae
 80062ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00b      	beq.n	80062f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	32ae      	adds	r2, #174	@ 0xae
 80062e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e8:	78fa      	ldrb	r2, [r7, #3]
 80062ea:	4611      	mov	r1, r2
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00e      	beq.n	800634c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6852      	ldr	r2, [r2, #4]
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	4611      	mov	r1, r2
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006348:	2303      	movs	r3, #3
 800634a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	460b      	mov	r3, r1
 8006360:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006362:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800637c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800637e:	4618      	mov	r0, r3
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b086      	sub	sp, #24
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	885b      	ldrh	r3, [r3, #2]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	7812      	ldrb	r2, [r2, #0]
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d91f      	bls.n	80063f0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80063b6:	e013      	b.n	80063e0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80063b8:	f107 030a 	add.w	r3, r7, #10
 80063bc:	4619      	mov	r1, r3
 80063be:	6978      	ldr	r0, [r7, #20]
 80063c0:	f000 f81b 	bl	80063fa <USBD_GetNextDesc>
 80063c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	785b      	ldrb	r3, [r3, #1]
 80063ca:	2b05      	cmp	r3, #5
 80063cc:	d108      	bne.n	80063e0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	789b      	ldrb	r3, [r3, #2]
 80063d6:	78fa      	ldrb	r2, [r7, #3]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d008      	beq.n	80063ee <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80063dc:	2300      	movs	r3, #0
 80063de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	885b      	ldrh	r3, [r3, #2]
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	897b      	ldrh	r3, [r7, #10]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d8e5      	bhi.n	80063b8 <USBD_GetEpDesc+0x2e>
 80063ec:	e000      	b.n	80063f0 <USBD_GetEpDesc+0x66>
          break;
 80063ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80063f0:	693b      	ldr	r3, [r7, #16]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	7812      	ldrb	r2, [r2, #0]
 8006410:	4413      	add	r3, r2
 8006412:	b29a      	uxth	r2, r3
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4413      	add	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006424:	68fb      	ldr	r3, [r7, #12]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006432:	b480      	push	{r7}
 8006434:	b087      	sub	sp, #28
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	3301      	adds	r3, #1
 8006448:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006450:	8a3b      	ldrh	r3, [r7, #16]
 8006452:	021b      	lsls	r3, r3, #8
 8006454:	b21a      	sxth	r2, r3
 8006456:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800645a:	4313      	orrs	r3, r2
 800645c:	b21b      	sxth	r3, r3
 800645e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006460:	89fb      	ldrh	r3, [r7, #14]
}
 8006462:	4618      	mov	r0, r3
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
	...

08006470 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006486:	2b40      	cmp	r3, #64	@ 0x40
 8006488:	d005      	beq.n	8006496 <USBD_StdDevReq+0x26>
 800648a:	2b40      	cmp	r3, #64	@ 0x40
 800648c:	d857      	bhi.n	800653e <USBD_StdDevReq+0xce>
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00f      	beq.n	80064b2 <USBD_StdDevReq+0x42>
 8006492:	2b20      	cmp	r3, #32
 8006494:	d153      	bne.n	800653e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	32ae      	adds	r2, #174	@ 0xae
 80064a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	4798      	blx	r3
 80064ac:	4603      	mov	r3, r0
 80064ae:	73fb      	strb	r3, [r7, #15]
      break;
 80064b0:	e04a      	b.n	8006548 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	785b      	ldrb	r3, [r3, #1]
 80064b6:	2b09      	cmp	r3, #9
 80064b8:	d83b      	bhi.n	8006532 <USBD_StdDevReq+0xc2>
 80064ba:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <USBD_StdDevReq+0x50>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	08006515 	.word	0x08006515
 80064c4:	08006529 	.word	0x08006529
 80064c8:	08006533 	.word	0x08006533
 80064cc:	0800651f 	.word	0x0800651f
 80064d0:	08006533 	.word	0x08006533
 80064d4:	080064f3 	.word	0x080064f3
 80064d8:	080064e9 	.word	0x080064e9
 80064dc:	08006533 	.word	0x08006533
 80064e0:	0800650b 	.word	0x0800650b
 80064e4:	080064fd 	.word	0x080064fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fa3c 	bl	8006968 <USBD_GetDescriptor>
          break;
 80064f0:	e024      	b.n	800653c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fba1 	bl	8006c3c <USBD_SetAddress>
          break;
 80064fa:	e01f      	b.n	800653c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fbe0 	bl	8006cc4 <USBD_SetConfig>
 8006504:	4603      	mov	r3, r0
 8006506:	73fb      	strb	r3, [r7, #15]
          break;
 8006508:	e018      	b.n	800653c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fc83 	bl	8006e18 <USBD_GetConfig>
          break;
 8006512:	e013      	b.n	800653c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fcb4 	bl	8006e84 <USBD_GetStatus>
          break;
 800651c:	e00e      	b.n	800653c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fce3 	bl	8006eec <USBD_SetFeature>
          break;
 8006526:	e009      	b.n	800653c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fd07 	bl	8006f3e <USBD_ClrFeature>
          break;
 8006530:	e004      	b.n	800653c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006532:	6839      	ldr	r1, [r7, #0]
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fd5e 	bl	8006ff6 <USBD_CtlError>
          break;
 800653a:	bf00      	nop
      }
      break;
 800653c:	e004      	b.n	8006548 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fd58 	bl	8006ff6 <USBD_CtlError>
      break;
 8006546:	bf00      	nop
  }

  return ret;
 8006548:	7bfb      	ldrb	r3, [r7, #15]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop

08006554 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800656a:	2b40      	cmp	r3, #64	@ 0x40
 800656c:	d005      	beq.n	800657a <USBD_StdItfReq+0x26>
 800656e:	2b40      	cmp	r3, #64	@ 0x40
 8006570:	d852      	bhi.n	8006618 <USBD_StdItfReq+0xc4>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <USBD_StdItfReq+0x26>
 8006576:	2b20      	cmp	r3, #32
 8006578:	d14e      	bne.n	8006618 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006580:	b2db      	uxtb	r3, r3
 8006582:	3b01      	subs	r3, #1
 8006584:	2b02      	cmp	r3, #2
 8006586:	d840      	bhi.n	800660a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	889b      	ldrh	r3, [r3, #4]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b01      	cmp	r3, #1
 8006590:	d836      	bhi.n	8006600 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	889b      	ldrh	r3, [r3, #4]
 8006596:	b2db      	uxtb	r3, r3
 8006598:	4619      	mov	r1, r3
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff fedb 	bl	8006356 <USBD_CoreFindIF>
 80065a0:	4603      	mov	r3, r0
 80065a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
 80065a6:	2bff      	cmp	r3, #255	@ 0xff
 80065a8:	d01d      	beq.n	80065e6 <USBD_StdItfReq+0x92>
 80065aa:	7bbb      	ldrb	r3, [r7, #14]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d11a      	bne.n	80065e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80065b0:	7bba      	ldrb	r2, [r7, #14]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	32ae      	adds	r2, #174	@ 0xae
 80065b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00f      	beq.n	80065e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80065c0:	7bba      	ldrb	r2, [r7, #14]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80065c8:	7bba      	ldrb	r2, [r7, #14]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	32ae      	adds	r2, #174	@ 0xae
 80065ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	6839      	ldr	r1, [r7, #0]
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	4798      	blx	r3
 80065da:	4603      	mov	r3, r0
 80065dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80065de:	e004      	b.n	80065ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80065e0:	2303      	movs	r3, #3
 80065e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80065e4:	e001      	b.n	80065ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80065e6:	2303      	movs	r3, #3
 80065e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	88db      	ldrh	r3, [r3, #6]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d110      	bne.n	8006614 <USBD_StdItfReq+0xc0>
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10d      	bne.n	8006614 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fdc7 	bl	800718c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80065fe:	e009      	b.n	8006614 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fcf7 	bl	8006ff6 <USBD_CtlError>
          break;
 8006608:	e004      	b.n	8006614 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fcf2 	bl	8006ff6 <USBD_CtlError>
          break;
 8006612:	e000      	b.n	8006616 <USBD_StdItfReq+0xc2>
          break;
 8006614:	bf00      	nop
      }
      break;
 8006616:	e004      	b.n	8006622 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fceb 	bl	8006ff6 <USBD_CtlError>
      break;
 8006620:	bf00      	nop
  }

  return ret;
 8006622:	7bfb      	ldrb	r3, [r7, #15]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	889b      	ldrh	r3, [r3, #4]
 800663e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006648:	2b40      	cmp	r3, #64	@ 0x40
 800664a:	d007      	beq.n	800665c <USBD_StdEPReq+0x30>
 800664c:	2b40      	cmp	r3, #64	@ 0x40
 800664e:	f200 817f 	bhi.w	8006950 <USBD_StdEPReq+0x324>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d02a      	beq.n	80066ac <USBD_StdEPReq+0x80>
 8006656:	2b20      	cmp	r3, #32
 8006658:	f040 817a 	bne.w	8006950 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	4619      	mov	r1, r3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff fe85 	bl	8006370 <USBD_CoreFindEP>
 8006666:	4603      	mov	r3, r0
 8006668:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800666a:	7b7b      	ldrb	r3, [r7, #13]
 800666c:	2bff      	cmp	r3, #255	@ 0xff
 800666e:	f000 8174 	beq.w	800695a <USBD_StdEPReq+0x32e>
 8006672:	7b7b      	ldrb	r3, [r7, #13]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f040 8170 	bne.w	800695a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800667a:	7b7a      	ldrb	r2, [r7, #13]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006682:	7b7a      	ldrb	r2, [r7, #13]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	32ae      	adds	r2, #174	@ 0xae
 8006688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 8163 	beq.w	800695a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006694:	7b7a      	ldrb	r2, [r7, #13]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	32ae      	adds	r2, #174	@ 0xae
 800669a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	4798      	blx	r3
 80066a6:	4603      	mov	r3, r0
 80066a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066aa:	e156      	b.n	800695a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	785b      	ldrb	r3, [r3, #1]
 80066b0:	2b03      	cmp	r3, #3
 80066b2:	d008      	beq.n	80066c6 <USBD_StdEPReq+0x9a>
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	f300 8145 	bgt.w	8006944 <USBD_StdEPReq+0x318>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 809b 	beq.w	80067f6 <USBD_StdEPReq+0x1ca>
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d03c      	beq.n	800673e <USBD_StdEPReq+0x112>
 80066c4:	e13e      	b.n	8006944 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d002      	beq.n	80066d8 <USBD_StdEPReq+0xac>
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d016      	beq.n	8006704 <USBD_StdEPReq+0xd8>
 80066d6:	e02c      	b.n	8006732 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00d      	beq.n	80066fa <USBD_StdEPReq+0xce>
 80066de:	7bbb      	ldrb	r3, [r7, #14]
 80066e0:	2b80      	cmp	r3, #128	@ 0x80
 80066e2:	d00a      	beq.n	80066fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066e4:	7bbb      	ldrb	r3, [r7, #14]
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f001 f95d 	bl	80079a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066ee:	2180      	movs	r1, #128	@ 0x80
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 f959 	bl	80079a8 <USBD_LL_StallEP>
 80066f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066f8:	e020      	b.n	800673c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fc7a 	bl	8006ff6 <USBD_CtlError>
              break;
 8006702:	e01b      	b.n	800673c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	885b      	ldrh	r3, [r3, #2]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10e      	bne.n	800672a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00b      	beq.n	800672a <USBD_StdEPReq+0xfe>
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	2b80      	cmp	r3, #128	@ 0x80
 8006716:	d008      	beq.n	800672a <USBD_StdEPReq+0xfe>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	88db      	ldrh	r3, [r3, #6]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d104      	bne.n	800672a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 f93f 	bl	80079a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fd2e 	bl	800718c <USBD_CtlSendStatus>

              break;
 8006730:	e004      	b.n	800673c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fc5e 	bl	8006ff6 <USBD_CtlError>
              break;
 800673a:	bf00      	nop
          }
          break;
 800673c:	e107      	b.n	800694e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d002      	beq.n	8006750 <USBD_StdEPReq+0x124>
 800674a:	2b03      	cmp	r3, #3
 800674c:	d016      	beq.n	800677c <USBD_StdEPReq+0x150>
 800674e:	e04b      	b.n	80067e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006750:	7bbb      	ldrb	r3, [r7, #14]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00d      	beq.n	8006772 <USBD_StdEPReq+0x146>
 8006756:	7bbb      	ldrb	r3, [r7, #14]
 8006758:	2b80      	cmp	r3, #128	@ 0x80
 800675a:	d00a      	beq.n	8006772 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800675c:	7bbb      	ldrb	r3, [r7, #14]
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 f921 	bl	80079a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006766:	2180      	movs	r1, #128	@ 0x80
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f001 f91d 	bl	80079a8 <USBD_LL_StallEP>
 800676e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006770:	e040      	b.n	80067f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fc3e 	bl	8006ff6 <USBD_CtlError>
              break;
 800677a:	e03b      	b.n	80067f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	885b      	ldrh	r3, [r3, #2]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d136      	bne.n	80067f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006784:	7bbb      	ldrb	r3, [r7, #14]
 8006786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800678a:	2b00      	cmp	r3, #0
 800678c:	d004      	beq.n	8006798 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800678e:	7bbb      	ldrb	r3, [r7, #14]
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f001 f927 	bl	80079e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fcf7 	bl	800718c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800679e:	7bbb      	ldrb	r3, [r7, #14]
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff fde4 	bl	8006370 <USBD_CoreFindEP>
 80067a8:	4603      	mov	r3, r0
 80067aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067ac:	7b7b      	ldrb	r3, [r7, #13]
 80067ae:	2bff      	cmp	r3, #255	@ 0xff
 80067b0:	d01f      	beq.n	80067f2 <USBD_StdEPReq+0x1c6>
 80067b2:	7b7b      	ldrb	r3, [r7, #13]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d11c      	bne.n	80067f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80067b8:	7b7a      	ldrb	r2, [r7, #13]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80067c0:	7b7a      	ldrb	r2, [r7, #13]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	32ae      	adds	r2, #174	@ 0xae
 80067c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d010      	beq.n	80067f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067d0:	7b7a      	ldrb	r2, [r7, #13]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	32ae      	adds	r2, #174	@ 0xae
 80067d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
 80067e2:	4603      	mov	r3, r0
 80067e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80067e6:	e004      	b.n	80067f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fc03 	bl	8006ff6 <USBD_CtlError>
              break;
 80067f0:	e000      	b.n	80067f4 <USBD_StdEPReq+0x1c8>
              break;
 80067f2:	bf00      	nop
          }
          break;
 80067f4:	e0ab      	b.n	800694e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d002      	beq.n	8006808 <USBD_StdEPReq+0x1dc>
 8006802:	2b03      	cmp	r3, #3
 8006804:	d032      	beq.n	800686c <USBD_StdEPReq+0x240>
 8006806:	e097      	b.n	8006938 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006808:	7bbb      	ldrb	r3, [r7, #14]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d007      	beq.n	800681e <USBD_StdEPReq+0x1f2>
 800680e:	7bbb      	ldrb	r3, [r7, #14]
 8006810:	2b80      	cmp	r3, #128	@ 0x80
 8006812:	d004      	beq.n	800681e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fbed 	bl	8006ff6 <USBD_CtlError>
                break;
 800681c:	e091      	b.n	8006942 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800681e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006822:	2b00      	cmp	r3, #0
 8006824:	da0b      	bge.n	800683e <USBD_StdEPReq+0x212>
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	3310      	adds	r3, #16
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	4413      	add	r3, r2
 800683a:	3304      	adds	r3, #4
 800683c:	e00b      	b.n	8006856 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800683e:	7bbb      	ldrb	r3, [r7, #14]
 8006840:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006844:	4613      	mov	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	4413      	add	r3, r2
 8006854:	3304      	adds	r3, #4
 8006856:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2202      	movs	r2, #2
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fc37 	bl	80070d8 <USBD_CtlSendData>
              break;
 800686a:	e06a      	b.n	8006942 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800686c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006870:	2b00      	cmp	r3, #0
 8006872:	da11      	bge.n	8006898 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	f003 020f 	and.w	r2, r3, #15
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	4613      	mov	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	440b      	add	r3, r1
 8006886:	3324      	adds	r3, #36	@ 0x24
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d117      	bne.n	80068be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fbb0 	bl	8006ff6 <USBD_CtlError>
                  break;
 8006896:	e054      	b.n	8006942 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006898:	7bbb      	ldrb	r3, [r7, #14]
 800689a:	f003 020f 	and.w	r2, r3, #15
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	440b      	add	r3, r1
 80068aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d104      	bne.n	80068be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fb9d 	bl	8006ff6 <USBD_CtlError>
                  break;
 80068bc:	e041      	b.n	8006942 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	da0b      	bge.n	80068de <USBD_StdEPReq+0x2b2>
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068cc:	4613      	mov	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	3310      	adds	r3, #16
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	4413      	add	r3, r2
 80068da:	3304      	adds	r3, #4
 80068dc:	e00b      	b.n	80068f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068de:	7bbb      	ldrb	r3, [r7, #14]
 80068e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068e4:	4613      	mov	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	4413      	add	r3, r2
 80068f4:	3304      	adds	r3, #4
 80068f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <USBD_StdEPReq+0x2d8>
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	2b80      	cmp	r3, #128	@ 0x80
 8006902:	d103      	bne.n	800690c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	e00e      	b.n	800692a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f001 f887 	bl	8007a24 <USBD_LL_IsStallEP>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2201      	movs	r2, #1
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	e002      	b.n	800692a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2202      	movs	r2, #2
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fbd1 	bl	80070d8 <USBD_CtlSendData>
              break;
 8006936:	e004      	b.n	8006942 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fb5b 	bl	8006ff6 <USBD_CtlError>
              break;
 8006940:	bf00      	nop
          }
          break;
 8006942:	e004      	b.n	800694e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fb55 	bl	8006ff6 <USBD_CtlError>
          break;
 800694c:	bf00      	nop
      }
      break;
 800694e:	e005      	b.n	800695c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fb4f 	bl	8006ff6 <USBD_CtlError>
      break;
 8006958:	e000      	b.n	800695c <USBD_StdEPReq+0x330>
      break;
 800695a:	bf00      	nop
  }

  return ret;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	885b      	ldrh	r3, [r3, #2]
 8006982:	0a1b      	lsrs	r3, r3, #8
 8006984:	b29b      	uxth	r3, r3
 8006986:	3b01      	subs	r3, #1
 8006988:	2b06      	cmp	r3, #6
 800698a:	f200 8128 	bhi.w	8006bde <USBD_GetDescriptor+0x276>
 800698e:	a201      	add	r2, pc, #4	@ (adr r2, 8006994 <USBD_GetDescriptor+0x2c>)
 8006990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006994:	080069b1 	.word	0x080069b1
 8006998:	080069c9 	.word	0x080069c9
 800699c:	08006a09 	.word	0x08006a09
 80069a0:	08006bdf 	.word	0x08006bdf
 80069a4:	08006bdf 	.word	0x08006bdf
 80069a8:	08006b7f 	.word	0x08006b7f
 80069ac:	08006bab 	.word	0x08006bab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	7c12      	ldrb	r2, [r2, #16]
 80069bc:	f107 0108 	add.w	r1, r7, #8
 80069c0:	4610      	mov	r0, r2
 80069c2:	4798      	blx	r3
 80069c4:	60f8      	str	r0, [r7, #12]
      break;
 80069c6:	e112      	b.n	8006bee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	7c1b      	ldrb	r3, [r3, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10d      	bne.n	80069ec <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d8:	f107 0208 	add.w	r2, r7, #8
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
 80069e0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3301      	adds	r3, #1
 80069e6:	2202      	movs	r2, #2
 80069e8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80069ea:	e100      	b.n	8006bee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f4:	f107 0208 	add.w	r2, r7, #8
 80069f8:	4610      	mov	r0, r2
 80069fa:	4798      	blx	r3
 80069fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3301      	adds	r3, #1
 8006a02:	2202      	movs	r2, #2
 8006a04:	701a      	strb	r2, [r3, #0]
      break;
 8006a06:	e0f2      	b.n	8006bee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	885b      	ldrh	r3, [r3, #2]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b05      	cmp	r3, #5
 8006a10:	f200 80ac 	bhi.w	8006b6c <USBD_GetDescriptor+0x204>
 8006a14:	a201      	add	r2, pc, #4	@ (adr r2, 8006a1c <USBD_GetDescriptor+0xb4>)
 8006a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1a:	bf00      	nop
 8006a1c:	08006a35 	.word	0x08006a35
 8006a20:	08006a69 	.word	0x08006a69
 8006a24:	08006a9d 	.word	0x08006a9d
 8006a28:	08006ad1 	.word	0x08006ad1
 8006a2c:	08006b05 	.word	0x08006b05
 8006a30:	08006b39 	.word	0x08006b39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	7c12      	ldrb	r2, [r2, #16]
 8006a4c:	f107 0108 	add.w	r1, r7, #8
 8006a50:	4610      	mov	r0, r2
 8006a52:	4798      	blx	r3
 8006a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a56:	e091      	b.n	8006b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 facb 	bl	8006ff6 <USBD_CtlError>
            err++;
 8006a60:	7afb      	ldrb	r3, [r7, #11]
 8006a62:	3301      	adds	r3, #1
 8006a64:	72fb      	strb	r3, [r7, #11]
          break;
 8006a66:	e089      	b.n	8006b7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	7c12      	ldrb	r2, [r2, #16]
 8006a80:	f107 0108 	add.w	r1, r7, #8
 8006a84:	4610      	mov	r0, r2
 8006a86:	4798      	blx	r3
 8006a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a8a:	e077      	b.n	8006b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fab1 	bl	8006ff6 <USBD_CtlError>
            err++;
 8006a94:	7afb      	ldrb	r3, [r7, #11]
 8006a96:	3301      	adds	r3, #1
 8006a98:	72fb      	strb	r3, [r7, #11]
          break;
 8006a9a:	e06f      	b.n	8006b7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	7c12      	ldrb	r2, [r2, #16]
 8006ab4:	f107 0108 	add.w	r1, r7, #8
 8006ab8:	4610      	mov	r0, r2
 8006aba:	4798      	blx	r3
 8006abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006abe:	e05d      	b.n	8006b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fa97 	bl	8006ff6 <USBD_CtlError>
            err++;
 8006ac8:	7afb      	ldrb	r3, [r7, #11]
 8006aca:	3301      	adds	r3, #1
 8006acc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ace:	e055      	b.n	8006b7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00b      	beq.n	8006af4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	7c12      	ldrb	r2, [r2, #16]
 8006ae8:	f107 0108 	add.w	r1, r7, #8
 8006aec:	4610      	mov	r0, r2
 8006aee:	4798      	blx	r3
 8006af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006af2:	e043      	b.n	8006b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa7d 	bl	8006ff6 <USBD_CtlError>
            err++;
 8006afc:	7afb      	ldrb	r3, [r7, #11]
 8006afe:	3301      	adds	r3, #1
 8006b00:	72fb      	strb	r3, [r7, #11]
          break;
 8006b02:	e03b      	b.n	8006b7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00b      	beq.n	8006b28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	7c12      	ldrb	r2, [r2, #16]
 8006b1c:	f107 0108 	add.w	r1, r7, #8
 8006b20:	4610      	mov	r0, r2
 8006b22:	4798      	blx	r3
 8006b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b26:	e029      	b.n	8006b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fa63 	bl	8006ff6 <USBD_CtlError>
            err++;
 8006b30:	7afb      	ldrb	r3, [r7, #11]
 8006b32:	3301      	adds	r3, #1
 8006b34:	72fb      	strb	r3, [r7, #11]
          break;
 8006b36:	e021      	b.n	8006b7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	7c12      	ldrb	r2, [r2, #16]
 8006b50:	f107 0108 	add.w	r1, r7, #8
 8006b54:	4610      	mov	r0, r2
 8006b56:	4798      	blx	r3
 8006b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b5a:	e00f      	b.n	8006b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fa49 	bl	8006ff6 <USBD_CtlError>
            err++;
 8006b64:	7afb      	ldrb	r3, [r7, #11]
 8006b66:	3301      	adds	r3, #1
 8006b68:	72fb      	strb	r3, [r7, #11]
          break;
 8006b6a:	e007      	b.n	8006b7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fa41 	bl	8006ff6 <USBD_CtlError>
          err++;
 8006b74:	7afb      	ldrb	r3, [r7, #11]
 8006b76:	3301      	adds	r3, #1
 8006b78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006b7a:	bf00      	nop
      }
      break;
 8006b7c:	e037      	b.n	8006bee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	7c1b      	ldrb	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d109      	bne.n	8006b9a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b8e:	f107 0208 	add.w	r2, r7, #8
 8006b92:	4610      	mov	r0, r2
 8006b94:	4798      	blx	r3
 8006b96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b98:	e029      	b.n	8006bee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fa2a 	bl	8006ff6 <USBD_CtlError>
        err++;
 8006ba2:	7afb      	ldrb	r3, [r7, #11]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ba8:	e021      	b.n	8006bee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	7c1b      	ldrb	r3, [r3, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10d      	bne.n	8006bce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bba:	f107 0208 	add.w	r2, r7, #8
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	4798      	blx	r3
 8006bc2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	2207      	movs	r2, #7
 8006bca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bcc:	e00f      	b.n	8006bee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fa10 	bl	8006ff6 <USBD_CtlError>
        err++;
 8006bd6:	7afb      	ldrb	r3, [r7, #11]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	72fb      	strb	r3, [r7, #11]
      break;
 8006bdc:	e007      	b.n	8006bee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fa08 	bl	8006ff6 <USBD_CtlError>
      err++;
 8006be6:	7afb      	ldrb	r3, [r7, #11]
 8006be8:	3301      	adds	r3, #1
 8006bea:	72fb      	strb	r3, [r7, #11]
      break;
 8006bec:	bf00      	nop
  }

  if (err != 0U)
 8006bee:	7afb      	ldrb	r3, [r7, #11]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d11e      	bne.n	8006c32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	88db      	ldrh	r3, [r3, #6]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d016      	beq.n	8006c2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006bfc:	893b      	ldrh	r3, [r7, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00e      	beq.n	8006c20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	88da      	ldrh	r2, [r3, #6]
 8006c06:	893b      	ldrh	r3, [r7, #8]
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	bf28      	it	cs
 8006c0c:	4613      	movcs	r3, r2
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c12:	893b      	ldrh	r3, [r7, #8]
 8006c14:	461a      	mov	r2, r3
 8006c16:	68f9      	ldr	r1, [r7, #12]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fa5d 	bl	80070d8 <USBD_CtlSendData>
 8006c1e:	e009      	b.n	8006c34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f9e7 	bl	8006ff6 <USBD_CtlError>
 8006c28:	e004      	b.n	8006c34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 faae 	bl	800718c <USBD_CtlSendStatus>
 8006c30:	e000      	b.n	8006c34 <USBD_GetDescriptor+0x2cc>
    return;
 8006c32:	bf00      	nop
  }
}
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop

08006c3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	889b      	ldrh	r3, [r3, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d131      	bne.n	8006cb2 <USBD_SetAddress+0x76>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	88db      	ldrh	r3, [r3, #6]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d12d      	bne.n	8006cb2 <USBD_SetAddress+0x76>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	885b      	ldrh	r3, [r3, #2]
 8006c5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c5c:	d829      	bhi.n	8006cb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	885b      	ldrh	r3, [r3, #2]
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d104      	bne.n	8006c80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f9bc 	bl	8006ff6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c7e:	e01d      	b.n	8006cbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	7bfa      	ldrb	r2, [r7, #15]
 8006c84:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fef5 	bl	8007a7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fa7a 	bl	800718c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d004      	beq.n	8006ca8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ca6:	e009      	b.n	8006cbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb0:	e004      	b.n	8006cbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f99e 	bl	8006ff6 <USBD_CtlError>
  }
}
 8006cba:	bf00      	nop
 8006cbc:	bf00      	nop
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	885b      	ldrh	r3, [r3, #2]
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	4b4e      	ldr	r3, [pc, #312]	@ (8006e14 <USBD_SetConfig+0x150>)
 8006cda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8006e14 <USBD_SetConfig+0x150>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d905      	bls.n	8006cf0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f985 	bl	8006ff6 <USBD_CtlError>
    return USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e08c      	b.n	8006e0a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d002      	beq.n	8006d02 <USBD_SetConfig+0x3e>
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d029      	beq.n	8006d54 <USBD_SetConfig+0x90>
 8006d00:	e075      	b.n	8006dee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d02:	4b44      	ldr	r3, [pc, #272]	@ (8006e14 <USBD_SetConfig+0x150>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d020      	beq.n	8006d4c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006d0a:	4b42      	ldr	r3, [pc, #264]	@ (8006e14 <USBD_SetConfig+0x150>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d14:	4b3f      	ldr	r3, [pc, #252]	@ (8006e14 <USBD_SetConfig+0x150>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fe ffe3 	bl	8005ce6 <USBD_SetClassConfig>
 8006d20:	4603      	mov	r3, r0
 8006d22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d008      	beq.n	8006d3c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f962 	bl	8006ff6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2202      	movs	r2, #2
 8006d36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d3a:	e065      	b.n	8006e08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fa25 	bl	800718c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2203      	movs	r2, #3
 8006d46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006d4a:	e05d      	b.n	8006e08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fa1d 	bl	800718c <USBD_CtlSendStatus>
      break;
 8006d52:	e059      	b.n	8006e08 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006d54:	4b2f      	ldr	r3, [pc, #188]	@ (8006e14 <USBD_SetConfig+0x150>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d112      	bne.n	8006d82 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006d64:	4b2b      	ldr	r3, [pc, #172]	@ (8006e14 <USBD_SetConfig+0x150>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d6e:	4b29      	ldr	r3, [pc, #164]	@ (8006e14 <USBD_SetConfig+0x150>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7fe ffd2 	bl	8005d1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fa06 	bl	800718c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d80:	e042      	b.n	8006e08 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006d82:	4b24      	ldr	r3, [pc, #144]	@ (8006e14 <USBD_SetConfig+0x150>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d02a      	beq.n	8006de6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7fe ffc0 	bl	8005d1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8006e14 <USBD_SetConfig+0x150>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006da8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e14 <USBD_SetConfig+0x150>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	4619      	mov	r1, r3
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7fe ff99 	bl	8005ce6 <USBD_SetClassConfig>
 8006db4:	4603      	mov	r3, r0
 8006db6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00f      	beq.n	8006dde <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f918 	bl	8006ff6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fe ffa5 	bl	8005d1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006ddc:	e014      	b.n	8006e08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f9d4 	bl	800718c <USBD_CtlSendStatus>
      break;
 8006de4:	e010      	b.n	8006e08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f9d0 	bl	800718c <USBD_CtlSendStatus>
      break;
 8006dec:	e00c      	b.n	8006e08 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f900 	bl	8006ff6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006df6:	4b07      	ldr	r3, [pc, #28]	@ (8006e14 <USBD_SetConfig+0x150>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7fe ff8e 	bl	8005d1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e02:	2303      	movs	r3, #3
 8006e04:	73fb      	strb	r3, [r7, #15]
      break;
 8006e06:	bf00      	nop
  }

  return ret;
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	200002e8 	.word	0x200002e8

08006e18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	88db      	ldrh	r3, [r3, #6]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d004      	beq.n	8006e34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f8e2 	bl	8006ff6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e32:	e023      	b.n	8006e7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	dc02      	bgt.n	8006e46 <USBD_GetConfig+0x2e>
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	dc03      	bgt.n	8006e4c <USBD_GetConfig+0x34>
 8006e44:	e015      	b.n	8006e72 <USBD_GetConfig+0x5a>
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d00b      	beq.n	8006e62 <USBD_GetConfig+0x4a>
 8006e4a:	e012      	b.n	8006e72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	3308      	adds	r3, #8
 8006e56:	2201      	movs	r2, #1
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f93c 	bl	80070d8 <USBD_CtlSendData>
        break;
 8006e60:	e00c      	b.n	8006e7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3304      	adds	r3, #4
 8006e66:	2201      	movs	r2, #1
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f934 	bl	80070d8 <USBD_CtlSendData>
        break;
 8006e70:	e004      	b.n	8006e7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f8be 	bl	8006ff6 <USBD_CtlError>
        break;
 8006e7a:	bf00      	nop
}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d81e      	bhi.n	8006eda <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	88db      	ldrh	r3, [r3, #6]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d004      	beq.n	8006eae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f8a5 	bl	8006ff6 <USBD_CtlError>
        break;
 8006eac:	e01a      	b.n	8006ee4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f043 0202 	orr.w	r2, r3, #2
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	330c      	adds	r3, #12
 8006ece:	2202      	movs	r2, #2
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f900 	bl	80070d8 <USBD_CtlSendData>
      break;
 8006ed8:	e004      	b.n	8006ee4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f88a 	bl	8006ff6 <USBD_CtlError>
      break;
 8006ee2:	bf00      	nop
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	885b      	ldrh	r3, [r3, #2]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d107      	bne.n	8006f0e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f940 	bl	800718c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006f0c:	e013      	b.n	8006f36 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	885b      	ldrh	r3, [r3, #2]
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d10b      	bne.n	8006f2e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	889b      	ldrh	r3, [r3, #4]
 8006f1a:	0a1b      	lsrs	r3, r3, #8
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f930 	bl	800718c <USBD_CtlSendStatus>
}
 8006f2c:	e003      	b.n	8006f36 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f860 	bl	8006ff6 <USBD_CtlError>
}
 8006f36:	bf00      	nop
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	3b01      	subs	r3, #1
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d80b      	bhi.n	8006f6e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	885b      	ldrh	r3, [r3, #2]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d10c      	bne.n	8006f78 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f910 	bl	800718c <USBD_CtlSendStatus>
      }
      break;
 8006f6c:	e004      	b.n	8006f78 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f840 	bl	8006ff6 <USBD_CtlError>
      break;
 8006f76:	e000      	b.n	8006f7a <USBD_ClrFeature+0x3c>
      break;
 8006f78:	bf00      	nop
  }
}
 8006f7a:	bf00      	nop
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	781a      	ldrb	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	781a      	ldrb	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f7ff fa40 	bl	8006432 <SWAPBYTE>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f7ff fa33 	bl	8006432 <SWAPBYTE>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	461a      	mov	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f7ff fa26 	bl	8006432 <SWAPBYTE>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	461a      	mov	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	80da      	strh	r2, [r3, #6]
}
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007000:	2180      	movs	r1, #128	@ 0x80
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fcd0 	bl	80079a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007008:	2100      	movs	r1, #0
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fccc 	bl	80079a8 <USBD_LL_StallEP>
}
 8007010:	bf00      	nop
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d036      	beq.n	800709c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007032:	6938      	ldr	r0, [r7, #16]
 8007034:	f000 f836 	bl	80070a4 <USBD_GetLen>
 8007038:	4603      	mov	r3, r0
 800703a:	3301      	adds	r3, #1
 800703c:	b29b      	uxth	r3, r3
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	b29a      	uxth	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007046:	7dfb      	ldrb	r3, [r7, #23]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	4413      	add	r3, r2
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	7812      	ldrb	r2, [r2, #0]
 8007050:	701a      	strb	r2, [r3, #0]
  idx++;
 8007052:	7dfb      	ldrb	r3, [r7, #23]
 8007054:	3301      	adds	r3, #1
 8007056:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007058:	7dfb      	ldrb	r3, [r7, #23]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	4413      	add	r3, r2
 800705e:	2203      	movs	r2, #3
 8007060:	701a      	strb	r2, [r3, #0]
  idx++;
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	3301      	adds	r3, #1
 8007066:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007068:	e013      	b.n	8007092 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	4413      	add	r3, r2
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	7812      	ldrb	r2, [r2, #0]
 8007074:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	3301      	adds	r3, #1
 800707a:	613b      	str	r3, [r7, #16]
    idx++;
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	3301      	adds	r3, #1
 8007080:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007082:	7dfb      	ldrb	r3, [r7, #23]
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	4413      	add	r3, r2
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]
    idx++;
 800708c:	7dfb      	ldrb	r3, [r7, #23]
 800708e:	3301      	adds	r3, #1
 8007090:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e7      	bne.n	800706a <USBD_GetString+0x52>
 800709a:	e000      	b.n	800709e <USBD_GetString+0x86>
    return;
 800709c:	bf00      	nop
  }
}
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80070b4:	e005      	b.n	80070c2 <USBD_GetLen+0x1e>
  {
    len++;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	3301      	adds	r3, #1
 80070ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	3301      	adds	r3, #1
 80070c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1f5      	bne.n	80070b6 <USBD_GetLen+0x12>
  }

  return len;
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	2100      	movs	r1, #0
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 fcdb 	bl	8007aba <USBD_LL_Transmit>

  return USBD_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	2100      	movs	r1, #0
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 fcca 	bl	8007aba <USBD_LL_Transmit>

  return USBD_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2203      	movs	r2, #3
 8007140:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	2100      	movs	r1, #0
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 fcce 	bl	8007afc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	2100      	movs	r1, #0
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 fcbd 	bl	8007afc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2204      	movs	r2, #4
 8007198:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800719c:	2300      	movs	r3, #0
 800719e:	2200      	movs	r2, #0
 80071a0:	2100      	movs	r1, #0
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fc89 	bl	8007aba <USBD_LL_Transmit>

  return USBD_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2205      	movs	r2, #5
 80071be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071c2:	2300      	movs	r3, #0
 80071c4:	2200      	movs	r2, #0
 80071c6:	2100      	movs	r1, #0
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fc97 	bl	8007afc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80071dc:	2200      	movs	r2, #0
 80071de:	4912      	ldr	r1, [pc, #72]	@ (8007228 <MX_USB_DEVICE_Init+0x50>)
 80071e0:	4812      	ldr	r0, [pc, #72]	@ (800722c <MX_USB_DEVICE_Init+0x54>)
 80071e2:	f7fe fd03 	bl	8005bec <USBD_Init>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80071ec:	f7fa f94c 	bl	8001488 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80071f0:	490f      	ldr	r1, [pc, #60]	@ (8007230 <MX_USB_DEVICE_Init+0x58>)
 80071f2:	480e      	ldr	r0, [pc, #56]	@ (800722c <MX_USB_DEVICE_Init+0x54>)
 80071f4:	f7fe fd2a 	bl	8005c4c <USBD_RegisterClass>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80071fe:	f7fa f943 	bl	8001488 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007202:	490c      	ldr	r1, [pc, #48]	@ (8007234 <MX_USB_DEVICE_Init+0x5c>)
 8007204:	4809      	ldr	r0, [pc, #36]	@ (800722c <MX_USB_DEVICE_Init+0x54>)
 8007206:	f7fe fc21 	bl	8005a4c <USBD_CDC_RegisterInterface>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007210:	f7fa f93a 	bl	8001488 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007214:	4805      	ldr	r0, [pc, #20]	@ (800722c <MX_USB_DEVICE_Init+0x54>)
 8007216:	f7fe fd4f 	bl	8005cb8 <USBD_Start>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007220:	f7fa f932 	bl	8001488 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007224:	bf00      	nop
 8007226:	bd80      	pop	{r7, pc}
 8007228:	200000ac 	.word	0x200000ac
 800722c:	200002ec 	.word	0x200002ec
 8007230:	20000018 	.word	0x20000018
 8007234:	20000098 	.word	0x20000098

08007238 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800723c:	2200      	movs	r2, #0
 800723e:	4905      	ldr	r1, [pc, #20]	@ (8007254 <CDC_Init_FS+0x1c>)
 8007240:	4805      	ldr	r0, [pc, #20]	@ (8007258 <CDC_Init_FS+0x20>)
 8007242:	f7fe fc1d 	bl	8005a80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007246:	4905      	ldr	r1, [pc, #20]	@ (800725c <CDC_Init_FS+0x24>)
 8007248:	4803      	ldr	r0, [pc, #12]	@ (8007258 <CDC_Init_FS+0x20>)
 800724a:	f7fe fc3b 	bl	8005ac4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800724e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007250:	4618      	mov	r0, r3
 8007252:	bd80      	pop	{r7, pc}
 8007254:	20000dc8 	.word	0x20000dc8
 8007258:	200002ec 	.word	0x200002ec
 800725c:	200005c8 	.word	0x200005c8

08007260 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007260:	b480      	push	{r7}
 8007262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007264:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007266:	4618      	mov	r0, r3
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	4603      	mov	r3, r0
 8007278:	6039      	str	r1, [r7, #0]
 800727a:	71fb      	strb	r3, [r7, #7]
 800727c:	4613      	mov	r3, r2
 800727e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	2b23      	cmp	r3, #35	@ 0x23
 8007284:	d84a      	bhi.n	800731c <CDC_Control_FS+0xac>
 8007286:	a201      	add	r2, pc, #4	@ (adr r2, 800728c <CDC_Control_FS+0x1c>)
 8007288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728c:	0800731d 	.word	0x0800731d
 8007290:	0800731d 	.word	0x0800731d
 8007294:	0800731d 	.word	0x0800731d
 8007298:	0800731d 	.word	0x0800731d
 800729c:	0800731d 	.word	0x0800731d
 80072a0:	0800731d 	.word	0x0800731d
 80072a4:	0800731d 	.word	0x0800731d
 80072a8:	0800731d 	.word	0x0800731d
 80072ac:	0800731d 	.word	0x0800731d
 80072b0:	0800731d 	.word	0x0800731d
 80072b4:	0800731d 	.word	0x0800731d
 80072b8:	0800731d 	.word	0x0800731d
 80072bc:	0800731d 	.word	0x0800731d
 80072c0:	0800731d 	.word	0x0800731d
 80072c4:	0800731d 	.word	0x0800731d
 80072c8:	0800731d 	.word	0x0800731d
 80072cc:	0800731d 	.word	0x0800731d
 80072d0:	0800731d 	.word	0x0800731d
 80072d4:	0800731d 	.word	0x0800731d
 80072d8:	0800731d 	.word	0x0800731d
 80072dc:	0800731d 	.word	0x0800731d
 80072e0:	0800731d 	.word	0x0800731d
 80072e4:	0800731d 	.word	0x0800731d
 80072e8:	0800731d 	.word	0x0800731d
 80072ec:	0800731d 	.word	0x0800731d
 80072f0:	0800731d 	.word	0x0800731d
 80072f4:	0800731d 	.word	0x0800731d
 80072f8:	0800731d 	.word	0x0800731d
 80072fc:	0800731d 	.word	0x0800731d
 8007300:	0800731d 	.word	0x0800731d
 8007304:	0800731d 	.word	0x0800731d
 8007308:	0800731d 	.word	0x0800731d
 800730c:	0800731d 	.word	0x0800731d
 8007310:	0800731d 	.word	0x0800731d
 8007314:	0800731d 	.word	0x0800731d
 8007318:	0800731d 	.word	0x0800731d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800731c:	bf00      	nop
  }

  return (USBD_OK);
 800731e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007336:	6879      	ldr	r1, [r7, #4]
 8007338:	4805      	ldr	r0, [pc, #20]	@ (8007350 <CDC_Receive_FS+0x24>)
 800733a:	f7fe fbc3 	bl	8005ac4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800733e:	4804      	ldr	r0, [pc, #16]	@ (8007350 <CDC_Receive_FS+0x24>)
 8007340:	f7fe fc1e 	bl	8005b80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007344:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007346:	4618      	mov	r0, r3
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	200002ec 	.word	0x200002ec

08007354 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007364:	4b0d      	ldr	r3, [pc, #52]	@ (800739c <CDC_Transmit_FS+0x48>)
 8007366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800736a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007376:	2301      	movs	r3, #1
 8007378:	e00b      	b.n	8007392 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800737a:	887b      	ldrh	r3, [r7, #2]
 800737c:	461a      	mov	r2, r3
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	4806      	ldr	r0, [pc, #24]	@ (800739c <CDC_Transmit_FS+0x48>)
 8007382:	f7fe fb7d 	bl	8005a80 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007386:	4805      	ldr	r0, [pc, #20]	@ (800739c <CDC_Transmit_FS+0x48>)
 8007388:	f7fe fbba 	bl	8005b00 <USBD_CDC_TransmitPacket>
 800738c:	4603      	mov	r3, r0
 800738e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007390:	7bfb      	ldrb	r3, [r7, #15]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	200002ec 	.word	0x200002ec

080073a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	4613      	mov	r3, r2
 80073ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80073b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	371c      	adds	r7, #28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
	...

080073c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	6039      	str	r1, [r7, #0]
 80073ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2212      	movs	r2, #18
 80073d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073d6:	4b03      	ldr	r3, [pc, #12]	@ (80073e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073d8:	4618      	mov	r0, r3
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	200000c8 	.word	0x200000c8

080073e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	4603      	mov	r3, r0
 80073f0:	6039      	str	r1, [r7, #0]
 80073f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2204      	movs	r2, #4
 80073f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073fa:	4b03      	ldr	r3, [pc, #12]	@ (8007408 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	200000dc 	.word	0x200000dc

0800740c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	4603      	mov	r3, r0
 8007414:	6039      	str	r1, [r7, #0]
 8007416:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007418:	79fb      	ldrb	r3, [r7, #7]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d105      	bne.n	800742a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	4907      	ldr	r1, [pc, #28]	@ (8007440 <USBD_FS_ProductStrDescriptor+0x34>)
 8007422:	4808      	ldr	r0, [pc, #32]	@ (8007444 <USBD_FS_ProductStrDescriptor+0x38>)
 8007424:	f7ff fdf8 	bl	8007018 <USBD_GetString>
 8007428:	e004      	b.n	8007434 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	4904      	ldr	r1, [pc, #16]	@ (8007440 <USBD_FS_ProductStrDescriptor+0x34>)
 800742e:	4805      	ldr	r0, [pc, #20]	@ (8007444 <USBD_FS_ProductStrDescriptor+0x38>)
 8007430:	f7ff fdf2 	bl	8007018 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007434:	4b02      	ldr	r3, [pc, #8]	@ (8007440 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007436:	4618      	mov	r0, r3
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	200015c8 	.word	0x200015c8
 8007444:	0800a8c8 	.word	0x0800a8c8

08007448 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	6039      	str	r1, [r7, #0]
 8007452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	4904      	ldr	r1, [pc, #16]	@ (8007468 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007458:	4804      	ldr	r0, [pc, #16]	@ (800746c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800745a:	f7ff fddd 	bl	8007018 <USBD_GetString>
  return USBD_StrDesc;
 800745e:	4b02      	ldr	r3, [pc, #8]	@ (8007468 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007460:	4618      	mov	r0, r3
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	200015c8 	.word	0x200015c8
 800746c:	0800a8e0 	.word	0x0800a8e0

08007470 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	6039      	str	r1, [r7, #0]
 800747a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	221a      	movs	r2, #26
 8007480:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007482:	f000 f843 	bl	800750c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007486:	4b02      	ldr	r3, [pc, #8]	@ (8007490 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	200000e0 	.word	0x200000e0

08007494 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	6039      	str	r1, [r7, #0]
 800749e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d105      	bne.n	80074b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	4907      	ldr	r1, [pc, #28]	@ (80074c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074aa:	4808      	ldr	r0, [pc, #32]	@ (80074cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80074ac:	f7ff fdb4 	bl	8007018 <USBD_GetString>
 80074b0:	e004      	b.n	80074bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	4904      	ldr	r1, [pc, #16]	@ (80074c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074b6:	4805      	ldr	r0, [pc, #20]	@ (80074cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80074b8:	f7ff fdae 	bl	8007018 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074bc:	4b02      	ldr	r3, [pc, #8]	@ (80074c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	200015c8 	.word	0x200015c8
 80074cc:	0800a8f4 	.word	0x0800a8f4

080074d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	4603      	mov	r3, r0
 80074d8:	6039      	str	r1, [r7, #0]
 80074da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074dc:	79fb      	ldrb	r3, [r7, #7]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d105      	bne.n	80074ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	4907      	ldr	r1, [pc, #28]	@ (8007504 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074e6:	4808      	ldr	r0, [pc, #32]	@ (8007508 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074e8:	f7ff fd96 	bl	8007018 <USBD_GetString>
 80074ec:	e004      	b.n	80074f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	4904      	ldr	r1, [pc, #16]	@ (8007504 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074f2:	4805      	ldr	r0, [pc, #20]	@ (8007508 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074f4:	f7ff fd90 	bl	8007018 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074f8:	4b02      	ldr	r3, [pc, #8]	@ (8007504 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	200015c8 	.word	0x200015c8
 8007508:	0800a900 	.word	0x0800a900

0800750c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4413      	add	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d009      	beq.n	8007534 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007520:	2208      	movs	r2, #8
 8007522:	4906      	ldr	r1, [pc, #24]	@ (800753c <Get_SerialNum+0x30>)
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 f80d 	bl	8007544 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800752a:	2204      	movs	r2, #4
 800752c:	4904      	ldr	r1, [pc, #16]	@ (8007540 <Get_SerialNum+0x34>)
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f808 	bl	8007544 <IntToUnicode>
  }
}
 8007534:	bf00      	nop
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	200000e2 	.word	0x200000e2
 8007540:	200000f2 	.word	0x200000f2

08007544 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007544:	b480      	push	{r7}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	4613      	mov	r3, r2
 8007550:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007552:	2300      	movs	r3, #0
 8007554:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007556:	2300      	movs	r3, #0
 8007558:	75fb      	strb	r3, [r7, #23]
 800755a:	e027      	b.n	80075ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	0f1b      	lsrs	r3, r3, #28
 8007560:	2b09      	cmp	r3, #9
 8007562:	d80b      	bhi.n	800757c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	0f1b      	lsrs	r3, r3, #28
 8007568:	b2da      	uxtb	r2, r3
 800756a:	7dfb      	ldrb	r3, [r7, #23]
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	4619      	mov	r1, r3
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	440b      	add	r3, r1
 8007574:	3230      	adds	r2, #48	@ 0x30
 8007576:	b2d2      	uxtb	r2, r2
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	e00a      	b.n	8007592 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	0f1b      	lsrs	r3, r3, #28
 8007580:	b2da      	uxtb	r2, r3
 8007582:	7dfb      	ldrb	r3, [r7, #23]
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	4619      	mov	r1, r3
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	440b      	add	r3, r1
 800758c:	3237      	adds	r2, #55	@ 0x37
 800758e:	b2d2      	uxtb	r2, r2
 8007590:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	011b      	lsls	r3, r3, #4
 8007596:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	3301      	adds	r3, #1
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	4413      	add	r3, r2
 80075a2:	2200      	movs	r2, #0
 80075a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075a6:	7dfb      	ldrb	r3, [r7, #23]
 80075a8:	3301      	adds	r3, #1
 80075aa:	75fb      	strb	r3, [r7, #23]
 80075ac:	7dfa      	ldrb	r2, [r7, #23]
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d3d3      	bcc.n	800755c <IntToUnicode+0x18>
  }
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop
 80075b8:	371c      	adds	r7, #28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
	...

080075c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08a      	sub	sp, #40	@ 0x28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075cc:	f107 0314 	add.w	r3, r7, #20
 80075d0:	2200      	movs	r2, #0
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	605a      	str	r2, [r3, #4]
 80075d6:	609a      	str	r2, [r3, #8]
 80075d8:	60da      	str	r2, [r3, #12]
 80075da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075e4:	d13a      	bne.n	800765c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075e6:	2300      	movs	r3, #0
 80075e8:	613b      	str	r3, [r7, #16]
 80075ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007664 <HAL_PCD_MspInit+0xa0>)
 80075ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ee:	4a1d      	ldr	r2, [pc, #116]	@ (8007664 <HAL_PCD_MspInit+0xa0>)
 80075f0:	f043 0301 	orr.w	r3, r3, #1
 80075f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80075f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007664 <HAL_PCD_MspInit+0xa0>)
 80075f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	613b      	str	r3, [r7, #16]
 8007600:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007602:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007608:	2302      	movs	r3, #2
 800760a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800760c:	2300      	movs	r3, #0
 800760e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007610:	2303      	movs	r3, #3
 8007612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007614:	230a      	movs	r3, #10
 8007616:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007618:	f107 0314 	add.w	r3, r7, #20
 800761c:	4619      	mov	r1, r3
 800761e:	4812      	ldr	r0, [pc, #72]	@ (8007668 <HAL_PCD_MspInit+0xa4>)
 8007620:	f7fa fa44 	bl	8001aac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007624:	4b0f      	ldr	r3, [pc, #60]	@ (8007664 <HAL_PCD_MspInit+0xa0>)
 8007626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007628:	4a0e      	ldr	r2, [pc, #56]	@ (8007664 <HAL_PCD_MspInit+0xa0>)
 800762a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800762e:	6353      	str	r3, [r2, #52]	@ 0x34
 8007630:	2300      	movs	r3, #0
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	4b0b      	ldr	r3, [pc, #44]	@ (8007664 <HAL_PCD_MspInit+0xa0>)
 8007636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007638:	4a0a      	ldr	r2, [pc, #40]	@ (8007664 <HAL_PCD_MspInit+0xa0>)
 800763a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800763e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007640:	4b08      	ldr	r3, [pc, #32]	@ (8007664 <HAL_PCD_MspInit+0xa0>)
 8007642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007648:	60fb      	str	r3, [r7, #12]
 800764a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800764c:	2200      	movs	r2, #0
 800764e:	2100      	movs	r1, #0
 8007650:	2043      	movs	r0, #67	@ 0x43
 8007652:	f7fa f9f4 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007656:	2043      	movs	r0, #67	@ 0x43
 8007658:	f7fa fa0d 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800765c:	bf00      	nop
 800765e:	3728      	adds	r7, #40	@ 0x28
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	40023800 	.word	0x40023800
 8007668:	40020000 	.word	0x40020000

0800766c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007680:	4619      	mov	r1, r3
 8007682:	4610      	mov	r0, r2
 8007684:	f7fe fb65 	bl	8005d52 <USBD_LL_SetupStage>
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80076a2:	78fa      	ldrb	r2, [r7, #3]
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	4613      	mov	r3, r2
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	4413      	add	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	440b      	add	r3, r1
 80076b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	78fb      	ldrb	r3, [r7, #3]
 80076b8:	4619      	mov	r1, r3
 80076ba:	f7fe fb9f 	bl	8005dfc <USBD_LL_DataOutStage>
}
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80076d8:	78fa      	ldrb	r2, [r7, #3]
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	4613      	mov	r3, r2
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	440b      	add	r3, r1
 80076e6:	3320      	adds	r3, #32
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	78fb      	ldrb	r3, [r7, #3]
 80076ec:	4619      	mov	r1, r3
 80076ee:	f7fe fc38 	bl	8005f62 <USBD_LL_DataInStage>
}
 80076f2:	bf00      	nop
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007708:	4618      	mov	r0, r3
 800770a:	f7fe fd72 	bl	80061f2 <USBD_LL_SOF>
}
 800770e:	bf00      	nop
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800771e:	2301      	movs	r3, #1
 8007720:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	79db      	ldrb	r3, [r3, #7]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d102      	bne.n	8007730 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]
 800772e:	e008      	b.n	8007742 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	79db      	ldrb	r3, [r3, #7]
 8007734:	2b02      	cmp	r3, #2
 8007736:	d102      	bne.n	800773e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007738:	2301      	movs	r3, #1
 800773a:	73fb      	strb	r3, [r7, #15]
 800773c:	e001      	b.n	8007742 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800773e:	f7f9 fea3 	bl	8001488 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007748:	7bfa      	ldrb	r2, [r7, #15]
 800774a:	4611      	mov	r1, r2
 800774c:	4618      	mov	r0, r3
 800774e:	f7fe fd0c 	bl	800616a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007758:	4618      	mov	r0, r3
 800775a:	f7fe fcb4 	bl	80060c6 <USBD_LL_Reset>
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
	...

08007768 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007776:	4618      	mov	r0, r3
 8007778:	f7fe fd07 	bl	800618a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	6812      	ldr	r2, [r2, #0]
 800778a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800778e:	f043 0301 	orr.w	r3, r3, #1
 8007792:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	7adb      	ldrb	r3, [r3, #11]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800779c:	4b04      	ldr	r3, [pc, #16]	@ (80077b0 <HAL_PCD_SuspendCallback+0x48>)
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	4a03      	ldr	r2, [pc, #12]	@ (80077b0 <HAL_PCD_SuspendCallback+0x48>)
 80077a2:	f043 0306 	orr.w	r3, r3, #6
 80077a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	e000ed00 	.word	0xe000ed00

080077b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe fcfd 	bl	80061c2 <USBD_LL_Resume>
}
 80077c8:	bf00      	nop
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077e2:	78fa      	ldrb	r2, [r7, #3]
 80077e4:	4611      	mov	r1, r2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fe fd55 	bl	8006296 <USBD_LL_IsoOUTIncomplete>
}
 80077ec:	bf00      	nop
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007806:	78fa      	ldrb	r2, [r7, #3]
 8007808:	4611      	mov	r1, r2
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe fd11 	bl	8006232 <USBD_LL_IsoINIncomplete>
}
 8007810:	bf00      	nop
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe fd67 	bl	80062fa <USBD_LL_DevConnected>
}
 800782c:	bf00      	nop
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007842:	4618      	mov	r0, r3
 8007844:	f7fe fd64 	bl	8006310 <USBD_LL_DevDisconnected>
}
 8007848:	bf00      	nop
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d13c      	bne.n	80078da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007860:	4a20      	ldr	r2, [pc, #128]	@ (80078e4 <USBD_LL_Init+0x94>)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a1e      	ldr	r2, [pc, #120]	@ (80078e4 <USBD_LL_Init+0x94>)
 800786c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007870:	4b1c      	ldr	r3, [pc, #112]	@ (80078e4 <USBD_LL_Init+0x94>)
 8007872:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007876:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007878:	4b1a      	ldr	r3, [pc, #104]	@ (80078e4 <USBD_LL_Init+0x94>)
 800787a:	2204      	movs	r2, #4
 800787c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800787e:	4b19      	ldr	r3, [pc, #100]	@ (80078e4 <USBD_LL_Init+0x94>)
 8007880:	2202      	movs	r2, #2
 8007882:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007884:	4b17      	ldr	r3, [pc, #92]	@ (80078e4 <USBD_LL_Init+0x94>)
 8007886:	2200      	movs	r2, #0
 8007888:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800788a:	4b16      	ldr	r3, [pc, #88]	@ (80078e4 <USBD_LL_Init+0x94>)
 800788c:	2202      	movs	r2, #2
 800788e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007890:	4b14      	ldr	r3, [pc, #80]	@ (80078e4 <USBD_LL_Init+0x94>)
 8007892:	2200      	movs	r2, #0
 8007894:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007896:	4b13      	ldr	r3, [pc, #76]	@ (80078e4 <USBD_LL_Init+0x94>)
 8007898:	2200      	movs	r2, #0
 800789a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800789c:	4b11      	ldr	r3, [pc, #68]	@ (80078e4 <USBD_LL_Init+0x94>)
 800789e:	2200      	movs	r2, #0
 80078a0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80078a2:	4b10      	ldr	r3, [pc, #64]	@ (80078e4 <USBD_LL_Init+0x94>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80078a8:	4b0e      	ldr	r3, [pc, #56]	@ (80078e4 <USBD_LL_Init+0x94>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80078ae:	480d      	ldr	r0, [pc, #52]	@ (80078e4 <USBD_LL_Init+0x94>)
 80078b0:	f7fa fac9 	bl	8001e46 <HAL_PCD_Init>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80078ba:	f7f9 fde5 	bl	8001488 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80078be:	2180      	movs	r1, #128	@ 0x80
 80078c0:	4808      	ldr	r0, [pc, #32]	@ (80078e4 <USBD_LL_Init+0x94>)
 80078c2:	f7fb fcf4 	bl	80032ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80078c6:	2240      	movs	r2, #64	@ 0x40
 80078c8:	2100      	movs	r1, #0
 80078ca:	4806      	ldr	r0, [pc, #24]	@ (80078e4 <USBD_LL_Init+0x94>)
 80078cc:	f7fb fca8 	bl	8003220 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80078d0:	2280      	movs	r2, #128	@ 0x80
 80078d2:	2101      	movs	r1, #1
 80078d4:	4803      	ldr	r0, [pc, #12]	@ (80078e4 <USBD_LL_Init+0x94>)
 80078d6:	f7fb fca3 	bl	8003220 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	200017c8 	.word	0x200017c8

080078e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fa fbb0 	bl	8002064 <HAL_PCD_Start>
 8007904:	4603      	mov	r3, r0
 8007906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	4618      	mov	r0, r3
 800790c:	f000 f942 	bl	8007b94 <USBD_Get_USB_Status>
 8007910:	4603      	mov	r3, r0
 8007912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007914:	7bbb      	ldrb	r3, [r7, #14]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	4608      	mov	r0, r1
 8007928:	4611      	mov	r1, r2
 800792a:	461a      	mov	r2, r3
 800792c:	4603      	mov	r3, r0
 800792e:	70fb      	strb	r3, [r7, #3]
 8007930:	460b      	mov	r3, r1
 8007932:	70bb      	strb	r3, [r7, #2]
 8007934:	4613      	mov	r3, r2
 8007936:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007946:	78bb      	ldrb	r3, [r7, #2]
 8007948:	883a      	ldrh	r2, [r7, #0]
 800794a:	78f9      	ldrb	r1, [r7, #3]
 800794c:	f7fb f884 	bl	8002a58 <HAL_PCD_EP_Open>
 8007950:	4603      	mov	r3, r0
 8007952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	4618      	mov	r0, r3
 8007958:	f000 f91c 	bl	8007b94 <USBD_Get_USB_Status>
 800795c:	4603      	mov	r3, r0
 800795e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007960:	7bbb      	ldrb	r3, [r7, #14]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	460b      	mov	r3, r1
 8007974:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007984:	78fa      	ldrb	r2, [r7, #3]
 8007986:	4611      	mov	r1, r2
 8007988:	4618      	mov	r0, r3
 800798a:	f7fb f8cd 	bl	8002b28 <HAL_PCD_EP_Close>
 800798e:	4603      	mov	r3, r0
 8007990:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	4618      	mov	r0, r3
 8007996:	f000 f8fd 	bl	8007b94 <USBD_Get_USB_Status>
 800799a:	4603      	mov	r3, r0
 800799c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800799e:	7bbb      	ldrb	r3, [r7, #14]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079c2:	78fa      	ldrb	r2, [r7, #3]
 80079c4:	4611      	mov	r1, r2
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fb f985 	bl	8002cd6 <HAL_PCD_EP_SetStall>
 80079cc:	4603      	mov	r3, r0
 80079ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 f8de 	bl	8007b94 <USBD_Get_USB_Status>
 80079d8:	4603      	mov	r3, r0
 80079da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b084      	sub	sp, #16
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a00:	78fa      	ldrb	r2, [r7, #3]
 8007a02:	4611      	mov	r1, r2
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fb f9c9 	bl	8002d9c <HAL_PCD_EP_ClrStall>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 f8bf 	bl	8007b94 <USBD_Get_USB_Status>
 8007a16:	4603      	mov	r3, r0
 8007a18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	da0b      	bge.n	8007a58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a46:	68f9      	ldr	r1, [r7, #12]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	4413      	add	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	440b      	add	r3, r1
 8007a52:	3316      	adds	r3, #22
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	e00b      	b.n	8007a70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a58:	78fb      	ldrb	r3, [r7, #3]
 8007a5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a5e:	68f9      	ldr	r1, [r7, #12]
 8007a60:	4613      	mov	r3, r2
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	440b      	add	r3, r1
 8007a6a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007a6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a96:	78fa      	ldrb	r2, [r7, #3]
 8007a98:	4611      	mov	r1, r2
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fa ffb8 	bl	8002a10 <HAL_PCD_SetAddress>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 f874 	bl	8007b94 <USBD_Get_USB_Status>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b086      	sub	sp, #24
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ad8:	7af9      	ldrb	r1, [r7, #11]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	f7fb f8c0 	bl	8002c62 <HAL_PCD_EP_Transmit>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 f853 	bl	8007b94 <USBD_Get_USB_Status>
 8007aee:	4603      	mov	r3, r0
 8007af0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007af2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3718      	adds	r7, #24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	603b      	str	r3, [r7, #0]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007b1a:	7af9      	ldrb	r1, [r7, #11]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	f7fb f84c 	bl	8002bbc <HAL_PCD_EP_Receive>
 8007b24:	4603      	mov	r3, r0
 8007b26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 f832 	bl	8007b94 <USBD_Get_USB_Status>
 8007b30:	4603      	mov	r3, r0
 8007b32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b34:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b082      	sub	sp, #8
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b50:	78fa      	ldrb	r2, [r7, #3]
 8007b52:	4611      	mov	r1, r2
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fb f86c 	bl	8002c32 <HAL_PCD_EP_GetRxCount>
 8007b5a:	4603      	mov	r3, r0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b6c:	4b03      	ldr	r3, [pc, #12]	@ (8007b7c <USBD_static_malloc+0x18>)
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	20001cac 	.word	0x20001cac

08007b80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]

}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d817      	bhi.n	8007bd8 <USBD_Get_USB_Status+0x44>
 8007ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb0 <USBD_Get_USB_Status+0x1c>)
 8007baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bae:	bf00      	nop
 8007bb0:	08007bc1 	.word	0x08007bc1
 8007bb4:	08007bc7 	.word	0x08007bc7
 8007bb8:	08007bcd 	.word	0x08007bcd
 8007bbc:	08007bd3 	.word	0x08007bd3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc4:	e00b      	b.n	8007bde <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	73fb      	strb	r3, [r7, #15]
    break;
 8007bca:	e008      	b.n	8007bde <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd0:	e005      	b.n	8007bde <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd6:	e002      	b.n	8007bde <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	73fb      	strb	r3, [r7, #15]
    break;
 8007bdc:	bf00      	nop
  }
  return usb_status;
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <__cvt>:
 8007bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf0:	ec57 6b10 	vmov	r6, r7, d0
 8007bf4:	2f00      	cmp	r7, #0
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	463b      	mov	r3, r7
 8007bfc:	bfbb      	ittet	lt
 8007bfe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c02:	461f      	movlt	r7, r3
 8007c04:	2300      	movge	r3, #0
 8007c06:	232d      	movlt	r3, #45	@ 0x2d
 8007c08:	700b      	strb	r3, [r1, #0]
 8007c0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c0c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c10:	4691      	mov	r9, r2
 8007c12:	f023 0820 	bic.w	r8, r3, #32
 8007c16:	bfbc      	itt	lt
 8007c18:	4632      	movlt	r2, r6
 8007c1a:	4616      	movlt	r6, r2
 8007c1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c20:	d005      	beq.n	8007c2e <__cvt+0x42>
 8007c22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c26:	d100      	bne.n	8007c2a <__cvt+0x3e>
 8007c28:	3401      	adds	r4, #1
 8007c2a:	2102      	movs	r1, #2
 8007c2c:	e000      	b.n	8007c30 <__cvt+0x44>
 8007c2e:	2103      	movs	r1, #3
 8007c30:	ab03      	add	r3, sp, #12
 8007c32:	9301      	str	r3, [sp, #4]
 8007c34:	ab02      	add	r3, sp, #8
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	ec47 6b10 	vmov	d0, r6, r7
 8007c3c:	4653      	mov	r3, sl
 8007c3e:	4622      	mov	r2, r4
 8007c40:	f000 fe5a 	bl	80088f8 <_dtoa_r>
 8007c44:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c48:	4605      	mov	r5, r0
 8007c4a:	d119      	bne.n	8007c80 <__cvt+0x94>
 8007c4c:	f019 0f01 	tst.w	r9, #1
 8007c50:	d00e      	beq.n	8007c70 <__cvt+0x84>
 8007c52:	eb00 0904 	add.w	r9, r0, r4
 8007c56:	2200      	movs	r2, #0
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	4639      	mov	r1, r7
 8007c5e:	f7f8 ff33 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c62:	b108      	cbz	r0, 8007c68 <__cvt+0x7c>
 8007c64:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c68:	2230      	movs	r2, #48	@ 0x30
 8007c6a:	9b03      	ldr	r3, [sp, #12]
 8007c6c:	454b      	cmp	r3, r9
 8007c6e:	d31e      	bcc.n	8007cae <__cvt+0xc2>
 8007c70:	9b03      	ldr	r3, [sp, #12]
 8007c72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c74:	1b5b      	subs	r3, r3, r5
 8007c76:	4628      	mov	r0, r5
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	b004      	add	sp, #16
 8007c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c84:	eb00 0904 	add.w	r9, r0, r4
 8007c88:	d1e5      	bne.n	8007c56 <__cvt+0x6a>
 8007c8a:	7803      	ldrb	r3, [r0, #0]
 8007c8c:	2b30      	cmp	r3, #48	@ 0x30
 8007c8e:	d10a      	bne.n	8007ca6 <__cvt+0xba>
 8007c90:	2200      	movs	r2, #0
 8007c92:	2300      	movs	r3, #0
 8007c94:	4630      	mov	r0, r6
 8007c96:	4639      	mov	r1, r7
 8007c98:	f7f8 ff16 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c9c:	b918      	cbnz	r0, 8007ca6 <__cvt+0xba>
 8007c9e:	f1c4 0401 	rsb	r4, r4, #1
 8007ca2:	f8ca 4000 	str.w	r4, [sl]
 8007ca6:	f8da 3000 	ldr.w	r3, [sl]
 8007caa:	4499      	add	r9, r3
 8007cac:	e7d3      	b.n	8007c56 <__cvt+0x6a>
 8007cae:	1c59      	adds	r1, r3, #1
 8007cb0:	9103      	str	r1, [sp, #12]
 8007cb2:	701a      	strb	r2, [r3, #0]
 8007cb4:	e7d9      	b.n	8007c6a <__cvt+0x7e>

08007cb6 <__exponent>:
 8007cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cb8:	2900      	cmp	r1, #0
 8007cba:	bfba      	itte	lt
 8007cbc:	4249      	neglt	r1, r1
 8007cbe:	232d      	movlt	r3, #45	@ 0x2d
 8007cc0:	232b      	movge	r3, #43	@ 0x2b
 8007cc2:	2909      	cmp	r1, #9
 8007cc4:	7002      	strb	r2, [r0, #0]
 8007cc6:	7043      	strb	r3, [r0, #1]
 8007cc8:	dd29      	ble.n	8007d1e <__exponent+0x68>
 8007cca:	f10d 0307 	add.w	r3, sp, #7
 8007cce:	461d      	mov	r5, r3
 8007cd0:	270a      	movs	r7, #10
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	fbb1 f6f7 	udiv	r6, r1, r7
 8007cd8:	fb07 1416 	mls	r4, r7, r6, r1
 8007cdc:	3430      	adds	r4, #48	@ 0x30
 8007cde:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	2c63      	cmp	r4, #99	@ 0x63
 8007ce6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007cea:	4631      	mov	r1, r6
 8007cec:	dcf1      	bgt.n	8007cd2 <__exponent+0x1c>
 8007cee:	3130      	adds	r1, #48	@ 0x30
 8007cf0:	1e94      	subs	r4, r2, #2
 8007cf2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007cf6:	1c41      	adds	r1, r0, #1
 8007cf8:	4623      	mov	r3, r4
 8007cfa:	42ab      	cmp	r3, r5
 8007cfc:	d30a      	bcc.n	8007d14 <__exponent+0x5e>
 8007cfe:	f10d 0309 	add.w	r3, sp, #9
 8007d02:	1a9b      	subs	r3, r3, r2
 8007d04:	42ac      	cmp	r4, r5
 8007d06:	bf88      	it	hi
 8007d08:	2300      	movhi	r3, #0
 8007d0a:	3302      	adds	r3, #2
 8007d0c:	4403      	add	r3, r0
 8007d0e:	1a18      	subs	r0, r3, r0
 8007d10:	b003      	add	sp, #12
 8007d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d14:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d18:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d1c:	e7ed      	b.n	8007cfa <__exponent+0x44>
 8007d1e:	2330      	movs	r3, #48	@ 0x30
 8007d20:	3130      	adds	r1, #48	@ 0x30
 8007d22:	7083      	strb	r3, [r0, #2]
 8007d24:	70c1      	strb	r1, [r0, #3]
 8007d26:	1d03      	adds	r3, r0, #4
 8007d28:	e7f1      	b.n	8007d0e <__exponent+0x58>
	...

08007d2c <_printf_float>:
 8007d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d30:	b08d      	sub	sp, #52	@ 0x34
 8007d32:	460c      	mov	r4, r1
 8007d34:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d38:	4616      	mov	r6, r2
 8007d3a:	461f      	mov	r7, r3
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	f000 fcdb 	bl	80086f8 <_localeconv_r>
 8007d42:	6803      	ldr	r3, [r0, #0]
 8007d44:	9304      	str	r3, [sp, #16]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7f8 fa92 	bl	8000270 <strlen>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d50:	f8d8 3000 	ldr.w	r3, [r8]
 8007d54:	9005      	str	r0, [sp, #20]
 8007d56:	3307      	adds	r3, #7
 8007d58:	f023 0307 	bic.w	r3, r3, #7
 8007d5c:	f103 0208 	add.w	r2, r3, #8
 8007d60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d64:	f8d4 b000 	ldr.w	fp, [r4]
 8007d68:	f8c8 2000 	str.w	r2, [r8]
 8007d6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d74:	9307      	str	r3, [sp, #28]
 8007d76:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d82:	4b9c      	ldr	r3, [pc, #624]	@ (8007ff4 <_printf_float+0x2c8>)
 8007d84:	f04f 32ff 	mov.w	r2, #4294967295
 8007d88:	f7f8 fed0 	bl	8000b2c <__aeabi_dcmpun>
 8007d8c:	bb70      	cbnz	r0, 8007dec <_printf_float+0xc0>
 8007d8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d92:	4b98      	ldr	r3, [pc, #608]	@ (8007ff4 <_printf_float+0x2c8>)
 8007d94:	f04f 32ff 	mov.w	r2, #4294967295
 8007d98:	f7f8 feaa 	bl	8000af0 <__aeabi_dcmple>
 8007d9c:	bb30      	cbnz	r0, 8007dec <_printf_float+0xc0>
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2300      	movs	r3, #0
 8007da2:	4640      	mov	r0, r8
 8007da4:	4649      	mov	r1, r9
 8007da6:	f7f8 fe99 	bl	8000adc <__aeabi_dcmplt>
 8007daa:	b110      	cbz	r0, 8007db2 <_printf_float+0x86>
 8007dac:	232d      	movs	r3, #45	@ 0x2d
 8007dae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007db2:	4a91      	ldr	r2, [pc, #580]	@ (8007ff8 <_printf_float+0x2cc>)
 8007db4:	4b91      	ldr	r3, [pc, #580]	@ (8007ffc <_printf_float+0x2d0>)
 8007db6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007dba:	bf94      	ite	ls
 8007dbc:	4690      	movls	r8, r2
 8007dbe:	4698      	movhi	r8, r3
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	6123      	str	r3, [r4, #16]
 8007dc4:	f02b 0304 	bic.w	r3, fp, #4
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	f04f 0900 	mov.w	r9, #0
 8007dce:	9700      	str	r7, [sp, #0]
 8007dd0:	4633      	mov	r3, r6
 8007dd2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f000 f9d2 	bl	8008180 <_printf_common>
 8007ddc:	3001      	adds	r0, #1
 8007dde:	f040 808d 	bne.w	8007efc <_printf_float+0x1d0>
 8007de2:	f04f 30ff 	mov.w	r0, #4294967295
 8007de6:	b00d      	add	sp, #52	@ 0x34
 8007de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dec:	4642      	mov	r2, r8
 8007dee:	464b      	mov	r3, r9
 8007df0:	4640      	mov	r0, r8
 8007df2:	4649      	mov	r1, r9
 8007df4:	f7f8 fe9a 	bl	8000b2c <__aeabi_dcmpun>
 8007df8:	b140      	cbz	r0, 8007e0c <_printf_float+0xe0>
 8007dfa:	464b      	mov	r3, r9
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bfbc      	itt	lt
 8007e00:	232d      	movlt	r3, #45	@ 0x2d
 8007e02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e06:	4a7e      	ldr	r2, [pc, #504]	@ (8008000 <_printf_float+0x2d4>)
 8007e08:	4b7e      	ldr	r3, [pc, #504]	@ (8008004 <_printf_float+0x2d8>)
 8007e0a:	e7d4      	b.n	8007db6 <_printf_float+0x8a>
 8007e0c:	6863      	ldr	r3, [r4, #4]
 8007e0e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e12:	9206      	str	r2, [sp, #24]
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	d13b      	bne.n	8007e90 <_printf_float+0x164>
 8007e18:	2306      	movs	r3, #6
 8007e1a:	6063      	str	r3, [r4, #4]
 8007e1c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e20:	2300      	movs	r3, #0
 8007e22:	6022      	str	r2, [r4, #0]
 8007e24:	9303      	str	r3, [sp, #12]
 8007e26:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e28:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007e2c:	ab09      	add	r3, sp, #36	@ 0x24
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	6861      	ldr	r1, [r4, #4]
 8007e32:	ec49 8b10 	vmov	d0, r8, r9
 8007e36:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f7ff fed6 	bl	8007bec <__cvt>
 8007e40:	9b06      	ldr	r3, [sp, #24]
 8007e42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e44:	2b47      	cmp	r3, #71	@ 0x47
 8007e46:	4680      	mov	r8, r0
 8007e48:	d129      	bne.n	8007e9e <_printf_float+0x172>
 8007e4a:	1cc8      	adds	r0, r1, #3
 8007e4c:	db02      	blt.n	8007e54 <_printf_float+0x128>
 8007e4e:	6863      	ldr	r3, [r4, #4]
 8007e50:	4299      	cmp	r1, r3
 8007e52:	dd41      	ble.n	8007ed8 <_printf_float+0x1ac>
 8007e54:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e58:	fa5f fa8a 	uxtb.w	sl, sl
 8007e5c:	3901      	subs	r1, #1
 8007e5e:	4652      	mov	r2, sl
 8007e60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e64:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e66:	f7ff ff26 	bl	8007cb6 <__exponent>
 8007e6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e6c:	1813      	adds	r3, r2, r0
 8007e6e:	2a01      	cmp	r2, #1
 8007e70:	4681      	mov	r9, r0
 8007e72:	6123      	str	r3, [r4, #16]
 8007e74:	dc02      	bgt.n	8007e7c <_printf_float+0x150>
 8007e76:	6822      	ldr	r2, [r4, #0]
 8007e78:	07d2      	lsls	r2, r2, #31
 8007e7a:	d501      	bpl.n	8007e80 <_printf_float+0x154>
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	6123      	str	r3, [r4, #16]
 8007e80:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0a2      	beq.n	8007dce <_printf_float+0xa2>
 8007e88:	232d      	movs	r3, #45	@ 0x2d
 8007e8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e8e:	e79e      	b.n	8007dce <_printf_float+0xa2>
 8007e90:	9a06      	ldr	r2, [sp, #24]
 8007e92:	2a47      	cmp	r2, #71	@ 0x47
 8007e94:	d1c2      	bne.n	8007e1c <_printf_float+0xf0>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1c0      	bne.n	8007e1c <_printf_float+0xf0>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e7bd      	b.n	8007e1a <_printf_float+0xee>
 8007e9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ea2:	d9db      	bls.n	8007e5c <_printf_float+0x130>
 8007ea4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ea8:	d118      	bne.n	8007edc <_printf_float+0x1b0>
 8007eaa:	2900      	cmp	r1, #0
 8007eac:	6863      	ldr	r3, [r4, #4]
 8007eae:	dd0b      	ble.n	8007ec8 <_printf_float+0x19c>
 8007eb0:	6121      	str	r1, [r4, #16]
 8007eb2:	b913      	cbnz	r3, 8007eba <_printf_float+0x18e>
 8007eb4:	6822      	ldr	r2, [r4, #0]
 8007eb6:	07d0      	lsls	r0, r2, #31
 8007eb8:	d502      	bpl.n	8007ec0 <_printf_float+0x194>
 8007eba:	3301      	adds	r3, #1
 8007ebc:	440b      	add	r3, r1
 8007ebe:	6123      	str	r3, [r4, #16]
 8007ec0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007ec2:	f04f 0900 	mov.w	r9, #0
 8007ec6:	e7db      	b.n	8007e80 <_printf_float+0x154>
 8007ec8:	b913      	cbnz	r3, 8007ed0 <_printf_float+0x1a4>
 8007eca:	6822      	ldr	r2, [r4, #0]
 8007ecc:	07d2      	lsls	r2, r2, #31
 8007ece:	d501      	bpl.n	8007ed4 <_printf_float+0x1a8>
 8007ed0:	3302      	adds	r3, #2
 8007ed2:	e7f4      	b.n	8007ebe <_printf_float+0x192>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e7f2      	b.n	8007ebe <_printf_float+0x192>
 8007ed8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ede:	4299      	cmp	r1, r3
 8007ee0:	db05      	blt.n	8007eee <_printf_float+0x1c2>
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	6121      	str	r1, [r4, #16]
 8007ee6:	07d8      	lsls	r0, r3, #31
 8007ee8:	d5ea      	bpl.n	8007ec0 <_printf_float+0x194>
 8007eea:	1c4b      	adds	r3, r1, #1
 8007eec:	e7e7      	b.n	8007ebe <_printf_float+0x192>
 8007eee:	2900      	cmp	r1, #0
 8007ef0:	bfd4      	ite	le
 8007ef2:	f1c1 0202 	rsble	r2, r1, #2
 8007ef6:	2201      	movgt	r2, #1
 8007ef8:	4413      	add	r3, r2
 8007efa:	e7e0      	b.n	8007ebe <_printf_float+0x192>
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	055a      	lsls	r2, r3, #21
 8007f00:	d407      	bmi.n	8007f12 <_printf_float+0x1e6>
 8007f02:	6923      	ldr	r3, [r4, #16]
 8007f04:	4642      	mov	r2, r8
 8007f06:	4631      	mov	r1, r6
 8007f08:	4628      	mov	r0, r5
 8007f0a:	47b8      	blx	r7
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d12b      	bne.n	8007f68 <_printf_float+0x23c>
 8007f10:	e767      	b.n	8007de2 <_printf_float+0xb6>
 8007f12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f16:	f240 80dd 	bls.w	80080d4 <_printf_float+0x3a8>
 8007f1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f1e:	2200      	movs	r2, #0
 8007f20:	2300      	movs	r3, #0
 8007f22:	f7f8 fdd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d033      	beq.n	8007f92 <_printf_float+0x266>
 8007f2a:	4a37      	ldr	r2, [pc, #220]	@ (8008008 <_printf_float+0x2dc>)
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	4631      	mov	r1, r6
 8007f30:	4628      	mov	r0, r5
 8007f32:	47b8      	blx	r7
 8007f34:	3001      	adds	r0, #1
 8007f36:	f43f af54 	beq.w	8007de2 <_printf_float+0xb6>
 8007f3a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f3e:	4543      	cmp	r3, r8
 8007f40:	db02      	blt.n	8007f48 <_printf_float+0x21c>
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	07d8      	lsls	r0, r3, #31
 8007f46:	d50f      	bpl.n	8007f68 <_printf_float+0x23c>
 8007f48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f4c:	4631      	mov	r1, r6
 8007f4e:	4628      	mov	r0, r5
 8007f50:	47b8      	blx	r7
 8007f52:	3001      	adds	r0, #1
 8007f54:	f43f af45 	beq.w	8007de2 <_printf_float+0xb6>
 8007f58:	f04f 0900 	mov.w	r9, #0
 8007f5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f60:	f104 0a1a 	add.w	sl, r4, #26
 8007f64:	45c8      	cmp	r8, r9
 8007f66:	dc09      	bgt.n	8007f7c <_printf_float+0x250>
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	079b      	lsls	r3, r3, #30
 8007f6c:	f100 8103 	bmi.w	8008176 <_printf_float+0x44a>
 8007f70:	68e0      	ldr	r0, [r4, #12]
 8007f72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f74:	4298      	cmp	r0, r3
 8007f76:	bfb8      	it	lt
 8007f78:	4618      	movlt	r0, r3
 8007f7a:	e734      	b.n	8007de6 <_printf_float+0xba>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	4652      	mov	r2, sl
 8007f80:	4631      	mov	r1, r6
 8007f82:	4628      	mov	r0, r5
 8007f84:	47b8      	blx	r7
 8007f86:	3001      	adds	r0, #1
 8007f88:	f43f af2b 	beq.w	8007de2 <_printf_float+0xb6>
 8007f8c:	f109 0901 	add.w	r9, r9, #1
 8007f90:	e7e8      	b.n	8007f64 <_printf_float+0x238>
 8007f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	dc39      	bgt.n	800800c <_printf_float+0x2e0>
 8007f98:	4a1b      	ldr	r2, [pc, #108]	@ (8008008 <_printf_float+0x2dc>)
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b8      	blx	r7
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	f43f af1d 	beq.w	8007de2 <_printf_float+0xb6>
 8007fa8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007fac:	ea59 0303 	orrs.w	r3, r9, r3
 8007fb0:	d102      	bne.n	8007fb8 <_printf_float+0x28c>
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	07d9      	lsls	r1, r3, #31
 8007fb6:	d5d7      	bpl.n	8007f68 <_printf_float+0x23c>
 8007fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	47b8      	blx	r7
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	f43f af0d 	beq.w	8007de2 <_printf_float+0xb6>
 8007fc8:	f04f 0a00 	mov.w	sl, #0
 8007fcc:	f104 0b1a 	add.w	fp, r4, #26
 8007fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fd2:	425b      	negs	r3, r3
 8007fd4:	4553      	cmp	r3, sl
 8007fd6:	dc01      	bgt.n	8007fdc <_printf_float+0x2b0>
 8007fd8:	464b      	mov	r3, r9
 8007fda:	e793      	b.n	8007f04 <_printf_float+0x1d8>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	465a      	mov	r2, fp
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	47b8      	blx	r7
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	f43f aefb 	beq.w	8007de2 <_printf_float+0xb6>
 8007fec:	f10a 0a01 	add.w	sl, sl, #1
 8007ff0:	e7ee      	b.n	8007fd0 <_printf_float+0x2a4>
 8007ff2:	bf00      	nop
 8007ff4:	7fefffff 	.word	0x7fefffff
 8007ff8:	0800a920 	.word	0x0800a920
 8007ffc:	0800a924 	.word	0x0800a924
 8008000:	0800a928 	.word	0x0800a928
 8008004:	0800a92c 	.word	0x0800a92c
 8008008:	0800a930 	.word	0x0800a930
 800800c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800800e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008012:	4553      	cmp	r3, sl
 8008014:	bfa8      	it	ge
 8008016:	4653      	movge	r3, sl
 8008018:	2b00      	cmp	r3, #0
 800801a:	4699      	mov	r9, r3
 800801c:	dc36      	bgt.n	800808c <_printf_float+0x360>
 800801e:	f04f 0b00 	mov.w	fp, #0
 8008022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008026:	f104 021a 	add.w	r2, r4, #26
 800802a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800802c:	9306      	str	r3, [sp, #24]
 800802e:	eba3 0309 	sub.w	r3, r3, r9
 8008032:	455b      	cmp	r3, fp
 8008034:	dc31      	bgt.n	800809a <_printf_float+0x36e>
 8008036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008038:	459a      	cmp	sl, r3
 800803a:	dc3a      	bgt.n	80080b2 <_printf_float+0x386>
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	07da      	lsls	r2, r3, #31
 8008040:	d437      	bmi.n	80080b2 <_printf_float+0x386>
 8008042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008044:	ebaa 0903 	sub.w	r9, sl, r3
 8008048:	9b06      	ldr	r3, [sp, #24]
 800804a:	ebaa 0303 	sub.w	r3, sl, r3
 800804e:	4599      	cmp	r9, r3
 8008050:	bfa8      	it	ge
 8008052:	4699      	movge	r9, r3
 8008054:	f1b9 0f00 	cmp.w	r9, #0
 8008058:	dc33      	bgt.n	80080c2 <_printf_float+0x396>
 800805a:	f04f 0800 	mov.w	r8, #0
 800805e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008062:	f104 0b1a 	add.w	fp, r4, #26
 8008066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008068:	ebaa 0303 	sub.w	r3, sl, r3
 800806c:	eba3 0309 	sub.w	r3, r3, r9
 8008070:	4543      	cmp	r3, r8
 8008072:	f77f af79 	ble.w	8007f68 <_printf_float+0x23c>
 8008076:	2301      	movs	r3, #1
 8008078:	465a      	mov	r2, fp
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	47b8      	blx	r7
 8008080:	3001      	adds	r0, #1
 8008082:	f43f aeae 	beq.w	8007de2 <_printf_float+0xb6>
 8008086:	f108 0801 	add.w	r8, r8, #1
 800808a:	e7ec      	b.n	8008066 <_printf_float+0x33a>
 800808c:	4642      	mov	r2, r8
 800808e:	4631      	mov	r1, r6
 8008090:	4628      	mov	r0, r5
 8008092:	47b8      	blx	r7
 8008094:	3001      	adds	r0, #1
 8008096:	d1c2      	bne.n	800801e <_printf_float+0x2f2>
 8008098:	e6a3      	b.n	8007de2 <_printf_float+0xb6>
 800809a:	2301      	movs	r3, #1
 800809c:	4631      	mov	r1, r6
 800809e:	4628      	mov	r0, r5
 80080a0:	9206      	str	r2, [sp, #24]
 80080a2:	47b8      	blx	r7
 80080a4:	3001      	adds	r0, #1
 80080a6:	f43f ae9c 	beq.w	8007de2 <_printf_float+0xb6>
 80080aa:	9a06      	ldr	r2, [sp, #24]
 80080ac:	f10b 0b01 	add.w	fp, fp, #1
 80080b0:	e7bb      	b.n	800802a <_printf_float+0x2fe>
 80080b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080b6:	4631      	mov	r1, r6
 80080b8:	4628      	mov	r0, r5
 80080ba:	47b8      	blx	r7
 80080bc:	3001      	adds	r0, #1
 80080be:	d1c0      	bne.n	8008042 <_printf_float+0x316>
 80080c0:	e68f      	b.n	8007de2 <_printf_float+0xb6>
 80080c2:	9a06      	ldr	r2, [sp, #24]
 80080c4:	464b      	mov	r3, r9
 80080c6:	4442      	add	r2, r8
 80080c8:	4631      	mov	r1, r6
 80080ca:	4628      	mov	r0, r5
 80080cc:	47b8      	blx	r7
 80080ce:	3001      	adds	r0, #1
 80080d0:	d1c3      	bne.n	800805a <_printf_float+0x32e>
 80080d2:	e686      	b.n	8007de2 <_printf_float+0xb6>
 80080d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80080d8:	f1ba 0f01 	cmp.w	sl, #1
 80080dc:	dc01      	bgt.n	80080e2 <_printf_float+0x3b6>
 80080de:	07db      	lsls	r3, r3, #31
 80080e0:	d536      	bpl.n	8008150 <_printf_float+0x424>
 80080e2:	2301      	movs	r3, #1
 80080e4:	4642      	mov	r2, r8
 80080e6:	4631      	mov	r1, r6
 80080e8:	4628      	mov	r0, r5
 80080ea:	47b8      	blx	r7
 80080ec:	3001      	adds	r0, #1
 80080ee:	f43f ae78 	beq.w	8007de2 <_printf_float+0xb6>
 80080f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080f6:	4631      	mov	r1, r6
 80080f8:	4628      	mov	r0, r5
 80080fa:	47b8      	blx	r7
 80080fc:	3001      	adds	r0, #1
 80080fe:	f43f ae70 	beq.w	8007de2 <_printf_float+0xb6>
 8008102:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008106:	2200      	movs	r2, #0
 8008108:	2300      	movs	r3, #0
 800810a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800810e:	f7f8 fcdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008112:	b9c0      	cbnz	r0, 8008146 <_printf_float+0x41a>
 8008114:	4653      	mov	r3, sl
 8008116:	f108 0201 	add.w	r2, r8, #1
 800811a:	4631      	mov	r1, r6
 800811c:	4628      	mov	r0, r5
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	d10c      	bne.n	800813e <_printf_float+0x412>
 8008124:	e65d      	b.n	8007de2 <_printf_float+0xb6>
 8008126:	2301      	movs	r3, #1
 8008128:	465a      	mov	r2, fp
 800812a:	4631      	mov	r1, r6
 800812c:	4628      	mov	r0, r5
 800812e:	47b8      	blx	r7
 8008130:	3001      	adds	r0, #1
 8008132:	f43f ae56 	beq.w	8007de2 <_printf_float+0xb6>
 8008136:	f108 0801 	add.w	r8, r8, #1
 800813a:	45d0      	cmp	r8, sl
 800813c:	dbf3      	blt.n	8008126 <_printf_float+0x3fa>
 800813e:	464b      	mov	r3, r9
 8008140:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008144:	e6df      	b.n	8007f06 <_printf_float+0x1da>
 8008146:	f04f 0800 	mov.w	r8, #0
 800814a:	f104 0b1a 	add.w	fp, r4, #26
 800814e:	e7f4      	b.n	800813a <_printf_float+0x40e>
 8008150:	2301      	movs	r3, #1
 8008152:	4642      	mov	r2, r8
 8008154:	e7e1      	b.n	800811a <_printf_float+0x3ee>
 8008156:	2301      	movs	r3, #1
 8008158:	464a      	mov	r2, r9
 800815a:	4631      	mov	r1, r6
 800815c:	4628      	mov	r0, r5
 800815e:	47b8      	blx	r7
 8008160:	3001      	adds	r0, #1
 8008162:	f43f ae3e 	beq.w	8007de2 <_printf_float+0xb6>
 8008166:	f108 0801 	add.w	r8, r8, #1
 800816a:	68e3      	ldr	r3, [r4, #12]
 800816c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800816e:	1a5b      	subs	r3, r3, r1
 8008170:	4543      	cmp	r3, r8
 8008172:	dcf0      	bgt.n	8008156 <_printf_float+0x42a>
 8008174:	e6fc      	b.n	8007f70 <_printf_float+0x244>
 8008176:	f04f 0800 	mov.w	r8, #0
 800817a:	f104 0919 	add.w	r9, r4, #25
 800817e:	e7f4      	b.n	800816a <_printf_float+0x43e>

08008180 <_printf_common>:
 8008180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008184:	4616      	mov	r6, r2
 8008186:	4698      	mov	r8, r3
 8008188:	688a      	ldr	r2, [r1, #8]
 800818a:	690b      	ldr	r3, [r1, #16]
 800818c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008190:	4293      	cmp	r3, r2
 8008192:	bfb8      	it	lt
 8008194:	4613      	movlt	r3, r2
 8008196:	6033      	str	r3, [r6, #0]
 8008198:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800819c:	4607      	mov	r7, r0
 800819e:	460c      	mov	r4, r1
 80081a0:	b10a      	cbz	r2, 80081a6 <_printf_common+0x26>
 80081a2:	3301      	adds	r3, #1
 80081a4:	6033      	str	r3, [r6, #0]
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	0699      	lsls	r1, r3, #26
 80081aa:	bf42      	ittt	mi
 80081ac:	6833      	ldrmi	r3, [r6, #0]
 80081ae:	3302      	addmi	r3, #2
 80081b0:	6033      	strmi	r3, [r6, #0]
 80081b2:	6825      	ldr	r5, [r4, #0]
 80081b4:	f015 0506 	ands.w	r5, r5, #6
 80081b8:	d106      	bne.n	80081c8 <_printf_common+0x48>
 80081ba:	f104 0a19 	add.w	sl, r4, #25
 80081be:	68e3      	ldr	r3, [r4, #12]
 80081c0:	6832      	ldr	r2, [r6, #0]
 80081c2:	1a9b      	subs	r3, r3, r2
 80081c4:	42ab      	cmp	r3, r5
 80081c6:	dc26      	bgt.n	8008216 <_printf_common+0x96>
 80081c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081cc:	6822      	ldr	r2, [r4, #0]
 80081ce:	3b00      	subs	r3, #0
 80081d0:	bf18      	it	ne
 80081d2:	2301      	movne	r3, #1
 80081d4:	0692      	lsls	r2, r2, #26
 80081d6:	d42b      	bmi.n	8008230 <_printf_common+0xb0>
 80081d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081dc:	4641      	mov	r1, r8
 80081de:	4638      	mov	r0, r7
 80081e0:	47c8      	blx	r9
 80081e2:	3001      	adds	r0, #1
 80081e4:	d01e      	beq.n	8008224 <_printf_common+0xa4>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	6922      	ldr	r2, [r4, #16]
 80081ea:	f003 0306 	and.w	r3, r3, #6
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	bf02      	ittt	eq
 80081f2:	68e5      	ldreq	r5, [r4, #12]
 80081f4:	6833      	ldreq	r3, [r6, #0]
 80081f6:	1aed      	subeq	r5, r5, r3
 80081f8:	68a3      	ldr	r3, [r4, #8]
 80081fa:	bf0c      	ite	eq
 80081fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008200:	2500      	movne	r5, #0
 8008202:	4293      	cmp	r3, r2
 8008204:	bfc4      	itt	gt
 8008206:	1a9b      	subgt	r3, r3, r2
 8008208:	18ed      	addgt	r5, r5, r3
 800820a:	2600      	movs	r6, #0
 800820c:	341a      	adds	r4, #26
 800820e:	42b5      	cmp	r5, r6
 8008210:	d11a      	bne.n	8008248 <_printf_common+0xc8>
 8008212:	2000      	movs	r0, #0
 8008214:	e008      	b.n	8008228 <_printf_common+0xa8>
 8008216:	2301      	movs	r3, #1
 8008218:	4652      	mov	r2, sl
 800821a:	4641      	mov	r1, r8
 800821c:	4638      	mov	r0, r7
 800821e:	47c8      	blx	r9
 8008220:	3001      	adds	r0, #1
 8008222:	d103      	bne.n	800822c <_printf_common+0xac>
 8008224:	f04f 30ff 	mov.w	r0, #4294967295
 8008228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800822c:	3501      	adds	r5, #1
 800822e:	e7c6      	b.n	80081be <_printf_common+0x3e>
 8008230:	18e1      	adds	r1, r4, r3
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	2030      	movs	r0, #48	@ 0x30
 8008236:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800823a:	4422      	add	r2, r4
 800823c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008240:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008244:	3302      	adds	r3, #2
 8008246:	e7c7      	b.n	80081d8 <_printf_common+0x58>
 8008248:	2301      	movs	r3, #1
 800824a:	4622      	mov	r2, r4
 800824c:	4641      	mov	r1, r8
 800824e:	4638      	mov	r0, r7
 8008250:	47c8      	blx	r9
 8008252:	3001      	adds	r0, #1
 8008254:	d0e6      	beq.n	8008224 <_printf_common+0xa4>
 8008256:	3601      	adds	r6, #1
 8008258:	e7d9      	b.n	800820e <_printf_common+0x8e>
	...

0800825c <_printf_i>:
 800825c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008260:	7e0f      	ldrb	r7, [r1, #24]
 8008262:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008264:	2f78      	cmp	r7, #120	@ 0x78
 8008266:	4691      	mov	r9, r2
 8008268:	4680      	mov	r8, r0
 800826a:	460c      	mov	r4, r1
 800826c:	469a      	mov	sl, r3
 800826e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008272:	d807      	bhi.n	8008284 <_printf_i+0x28>
 8008274:	2f62      	cmp	r7, #98	@ 0x62
 8008276:	d80a      	bhi.n	800828e <_printf_i+0x32>
 8008278:	2f00      	cmp	r7, #0
 800827a:	f000 80d2 	beq.w	8008422 <_printf_i+0x1c6>
 800827e:	2f58      	cmp	r7, #88	@ 0x58
 8008280:	f000 80b9 	beq.w	80083f6 <_printf_i+0x19a>
 8008284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008288:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800828c:	e03a      	b.n	8008304 <_printf_i+0xa8>
 800828e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008292:	2b15      	cmp	r3, #21
 8008294:	d8f6      	bhi.n	8008284 <_printf_i+0x28>
 8008296:	a101      	add	r1, pc, #4	@ (adr r1, 800829c <_printf_i+0x40>)
 8008298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800829c:	080082f5 	.word	0x080082f5
 80082a0:	08008309 	.word	0x08008309
 80082a4:	08008285 	.word	0x08008285
 80082a8:	08008285 	.word	0x08008285
 80082ac:	08008285 	.word	0x08008285
 80082b0:	08008285 	.word	0x08008285
 80082b4:	08008309 	.word	0x08008309
 80082b8:	08008285 	.word	0x08008285
 80082bc:	08008285 	.word	0x08008285
 80082c0:	08008285 	.word	0x08008285
 80082c4:	08008285 	.word	0x08008285
 80082c8:	08008409 	.word	0x08008409
 80082cc:	08008333 	.word	0x08008333
 80082d0:	080083c3 	.word	0x080083c3
 80082d4:	08008285 	.word	0x08008285
 80082d8:	08008285 	.word	0x08008285
 80082dc:	0800842b 	.word	0x0800842b
 80082e0:	08008285 	.word	0x08008285
 80082e4:	08008333 	.word	0x08008333
 80082e8:	08008285 	.word	0x08008285
 80082ec:	08008285 	.word	0x08008285
 80082f0:	080083cb 	.word	0x080083cb
 80082f4:	6833      	ldr	r3, [r6, #0]
 80082f6:	1d1a      	adds	r2, r3, #4
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6032      	str	r2, [r6, #0]
 80082fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008300:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008304:	2301      	movs	r3, #1
 8008306:	e09d      	b.n	8008444 <_printf_i+0x1e8>
 8008308:	6833      	ldr	r3, [r6, #0]
 800830a:	6820      	ldr	r0, [r4, #0]
 800830c:	1d19      	adds	r1, r3, #4
 800830e:	6031      	str	r1, [r6, #0]
 8008310:	0606      	lsls	r6, r0, #24
 8008312:	d501      	bpl.n	8008318 <_printf_i+0xbc>
 8008314:	681d      	ldr	r5, [r3, #0]
 8008316:	e003      	b.n	8008320 <_printf_i+0xc4>
 8008318:	0645      	lsls	r5, r0, #25
 800831a:	d5fb      	bpl.n	8008314 <_printf_i+0xb8>
 800831c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008320:	2d00      	cmp	r5, #0
 8008322:	da03      	bge.n	800832c <_printf_i+0xd0>
 8008324:	232d      	movs	r3, #45	@ 0x2d
 8008326:	426d      	negs	r5, r5
 8008328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800832c:	4859      	ldr	r0, [pc, #356]	@ (8008494 <_printf_i+0x238>)
 800832e:	230a      	movs	r3, #10
 8008330:	e011      	b.n	8008356 <_printf_i+0xfa>
 8008332:	6821      	ldr	r1, [r4, #0]
 8008334:	6833      	ldr	r3, [r6, #0]
 8008336:	0608      	lsls	r0, r1, #24
 8008338:	f853 5b04 	ldr.w	r5, [r3], #4
 800833c:	d402      	bmi.n	8008344 <_printf_i+0xe8>
 800833e:	0649      	lsls	r1, r1, #25
 8008340:	bf48      	it	mi
 8008342:	b2ad      	uxthmi	r5, r5
 8008344:	2f6f      	cmp	r7, #111	@ 0x6f
 8008346:	4853      	ldr	r0, [pc, #332]	@ (8008494 <_printf_i+0x238>)
 8008348:	6033      	str	r3, [r6, #0]
 800834a:	bf14      	ite	ne
 800834c:	230a      	movne	r3, #10
 800834e:	2308      	moveq	r3, #8
 8008350:	2100      	movs	r1, #0
 8008352:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008356:	6866      	ldr	r6, [r4, #4]
 8008358:	60a6      	str	r6, [r4, #8]
 800835a:	2e00      	cmp	r6, #0
 800835c:	bfa2      	ittt	ge
 800835e:	6821      	ldrge	r1, [r4, #0]
 8008360:	f021 0104 	bicge.w	r1, r1, #4
 8008364:	6021      	strge	r1, [r4, #0]
 8008366:	b90d      	cbnz	r5, 800836c <_printf_i+0x110>
 8008368:	2e00      	cmp	r6, #0
 800836a:	d04b      	beq.n	8008404 <_printf_i+0x1a8>
 800836c:	4616      	mov	r6, r2
 800836e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008372:	fb03 5711 	mls	r7, r3, r1, r5
 8008376:	5dc7      	ldrb	r7, [r0, r7]
 8008378:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800837c:	462f      	mov	r7, r5
 800837e:	42bb      	cmp	r3, r7
 8008380:	460d      	mov	r5, r1
 8008382:	d9f4      	bls.n	800836e <_printf_i+0x112>
 8008384:	2b08      	cmp	r3, #8
 8008386:	d10b      	bne.n	80083a0 <_printf_i+0x144>
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	07df      	lsls	r7, r3, #31
 800838c:	d508      	bpl.n	80083a0 <_printf_i+0x144>
 800838e:	6923      	ldr	r3, [r4, #16]
 8008390:	6861      	ldr	r1, [r4, #4]
 8008392:	4299      	cmp	r1, r3
 8008394:	bfde      	ittt	le
 8008396:	2330      	movle	r3, #48	@ 0x30
 8008398:	f806 3c01 	strble.w	r3, [r6, #-1]
 800839c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083a0:	1b92      	subs	r2, r2, r6
 80083a2:	6122      	str	r2, [r4, #16]
 80083a4:	f8cd a000 	str.w	sl, [sp]
 80083a8:	464b      	mov	r3, r9
 80083aa:	aa03      	add	r2, sp, #12
 80083ac:	4621      	mov	r1, r4
 80083ae:	4640      	mov	r0, r8
 80083b0:	f7ff fee6 	bl	8008180 <_printf_common>
 80083b4:	3001      	adds	r0, #1
 80083b6:	d14a      	bne.n	800844e <_printf_i+0x1f2>
 80083b8:	f04f 30ff 	mov.w	r0, #4294967295
 80083bc:	b004      	add	sp, #16
 80083be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	f043 0320 	orr.w	r3, r3, #32
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	4833      	ldr	r0, [pc, #204]	@ (8008498 <_printf_i+0x23c>)
 80083cc:	2778      	movs	r7, #120	@ 0x78
 80083ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	6831      	ldr	r1, [r6, #0]
 80083d6:	061f      	lsls	r7, r3, #24
 80083d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80083dc:	d402      	bmi.n	80083e4 <_printf_i+0x188>
 80083de:	065f      	lsls	r7, r3, #25
 80083e0:	bf48      	it	mi
 80083e2:	b2ad      	uxthmi	r5, r5
 80083e4:	6031      	str	r1, [r6, #0]
 80083e6:	07d9      	lsls	r1, r3, #31
 80083e8:	bf44      	itt	mi
 80083ea:	f043 0320 	orrmi.w	r3, r3, #32
 80083ee:	6023      	strmi	r3, [r4, #0]
 80083f0:	b11d      	cbz	r5, 80083fa <_printf_i+0x19e>
 80083f2:	2310      	movs	r3, #16
 80083f4:	e7ac      	b.n	8008350 <_printf_i+0xf4>
 80083f6:	4827      	ldr	r0, [pc, #156]	@ (8008494 <_printf_i+0x238>)
 80083f8:	e7e9      	b.n	80083ce <_printf_i+0x172>
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	f023 0320 	bic.w	r3, r3, #32
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	e7f6      	b.n	80083f2 <_printf_i+0x196>
 8008404:	4616      	mov	r6, r2
 8008406:	e7bd      	b.n	8008384 <_printf_i+0x128>
 8008408:	6833      	ldr	r3, [r6, #0]
 800840a:	6825      	ldr	r5, [r4, #0]
 800840c:	6961      	ldr	r1, [r4, #20]
 800840e:	1d18      	adds	r0, r3, #4
 8008410:	6030      	str	r0, [r6, #0]
 8008412:	062e      	lsls	r6, r5, #24
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	d501      	bpl.n	800841c <_printf_i+0x1c0>
 8008418:	6019      	str	r1, [r3, #0]
 800841a:	e002      	b.n	8008422 <_printf_i+0x1c6>
 800841c:	0668      	lsls	r0, r5, #25
 800841e:	d5fb      	bpl.n	8008418 <_printf_i+0x1bc>
 8008420:	8019      	strh	r1, [r3, #0]
 8008422:	2300      	movs	r3, #0
 8008424:	6123      	str	r3, [r4, #16]
 8008426:	4616      	mov	r6, r2
 8008428:	e7bc      	b.n	80083a4 <_printf_i+0x148>
 800842a:	6833      	ldr	r3, [r6, #0]
 800842c:	1d1a      	adds	r2, r3, #4
 800842e:	6032      	str	r2, [r6, #0]
 8008430:	681e      	ldr	r6, [r3, #0]
 8008432:	6862      	ldr	r2, [r4, #4]
 8008434:	2100      	movs	r1, #0
 8008436:	4630      	mov	r0, r6
 8008438:	f7f7 feca 	bl	80001d0 <memchr>
 800843c:	b108      	cbz	r0, 8008442 <_printf_i+0x1e6>
 800843e:	1b80      	subs	r0, r0, r6
 8008440:	6060      	str	r0, [r4, #4]
 8008442:	6863      	ldr	r3, [r4, #4]
 8008444:	6123      	str	r3, [r4, #16]
 8008446:	2300      	movs	r3, #0
 8008448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800844c:	e7aa      	b.n	80083a4 <_printf_i+0x148>
 800844e:	6923      	ldr	r3, [r4, #16]
 8008450:	4632      	mov	r2, r6
 8008452:	4649      	mov	r1, r9
 8008454:	4640      	mov	r0, r8
 8008456:	47d0      	blx	sl
 8008458:	3001      	adds	r0, #1
 800845a:	d0ad      	beq.n	80083b8 <_printf_i+0x15c>
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	079b      	lsls	r3, r3, #30
 8008460:	d413      	bmi.n	800848a <_printf_i+0x22e>
 8008462:	68e0      	ldr	r0, [r4, #12]
 8008464:	9b03      	ldr	r3, [sp, #12]
 8008466:	4298      	cmp	r0, r3
 8008468:	bfb8      	it	lt
 800846a:	4618      	movlt	r0, r3
 800846c:	e7a6      	b.n	80083bc <_printf_i+0x160>
 800846e:	2301      	movs	r3, #1
 8008470:	4632      	mov	r2, r6
 8008472:	4649      	mov	r1, r9
 8008474:	4640      	mov	r0, r8
 8008476:	47d0      	blx	sl
 8008478:	3001      	adds	r0, #1
 800847a:	d09d      	beq.n	80083b8 <_printf_i+0x15c>
 800847c:	3501      	adds	r5, #1
 800847e:	68e3      	ldr	r3, [r4, #12]
 8008480:	9903      	ldr	r1, [sp, #12]
 8008482:	1a5b      	subs	r3, r3, r1
 8008484:	42ab      	cmp	r3, r5
 8008486:	dcf2      	bgt.n	800846e <_printf_i+0x212>
 8008488:	e7eb      	b.n	8008462 <_printf_i+0x206>
 800848a:	2500      	movs	r5, #0
 800848c:	f104 0619 	add.w	r6, r4, #25
 8008490:	e7f5      	b.n	800847e <_printf_i+0x222>
 8008492:	bf00      	nop
 8008494:	0800a932 	.word	0x0800a932
 8008498:	0800a943 	.word	0x0800a943

0800849c <std>:
 800849c:	2300      	movs	r3, #0
 800849e:	b510      	push	{r4, lr}
 80084a0:	4604      	mov	r4, r0
 80084a2:	e9c0 3300 	strd	r3, r3, [r0]
 80084a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084aa:	6083      	str	r3, [r0, #8]
 80084ac:	8181      	strh	r1, [r0, #12]
 80084ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80084b0:	81c2      	strh	r2, [r0, #14]
 80084b2:	6183      	str	r3, [r0, #24]
 80084b4:	4619      	mov	r1, r3
 80084b6:	2208      	movs	r2, #8
 80084b8:	305c      	adds	r0, #92	@ 0x5c
 80084ba:	f000 f914 	bl	80086e6 <memset>
 80084be:	4b0d      	ldr	r3, [pc, #52]	@ (80084f4 <std+0x58>)
 80084c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80084c2:	4b0d      	ldr	r3, [pc, #52]	@ (80084f8 <std+0x5c>)
 80084c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084c6:	4b0d      	ldr	r3, [pc, #52]	@ (80084fc <std+0x60>)
 80084c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008500 <std+0x64>)
 80084cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80084ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008504 <std+0x68>)
 80084d0:	6224      	str	r4, [r4, #32]
 80084d2:	429c      	cmp	r4, r3
 80084d4:	d006      	beq.n	80084e4 <std+0x48>
 80084d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084da:	4294      	cmp	r4, r2
 80084dc:	d002      	beq.n	80084e4 <std+0x48>
 80084de:	33d0      	adds	r3, #208	@ 0xd0
 80084e0:	429c      	cmp	r4, r3
 80084e2:	d105      	bne.n	80084f0 <std+0x54>
 80084e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ec:	f000 b978 	b.w	80087e0 <__retarget_lock_init_recursive>
 80084f0:	bd10      	pop	{r4, pc}
 80084f2:	bf00      	nop
 80084f4:	08008661 	.word	0x08008661
 80084f8:	08008683 	.word	0x08008683
 80084fc:	080086bb 	.word	0x080086bb
 8008500:	080086df 	.word	0x080086df
 8008504:	20001ecc 	.word	0x20001ecc

08008508 <stdio_exit_handler>:
 8008508:	4a02      	ldr	r2, [pc, #8]	@ (8008514 <stdio_exit_handler+0xc>)
 800850a:	4903      	ldr	r1, [pc, #12]	@ (8008518 <stdio_exit_handler+0x10>)
 800850c:	4803      	ldr	r0, [pc, #12]	@ (800851c <stdio_exit_handler+0x14>)
 800850e:	f000 b869 	b.w	80085e4 <_fwalk_sglue>
 8008512:	bf00      	nop
 8008514:	200000fc 	.word	0x200000fc
 8008518:	0800a13d 	.word	0x0800a13d
 800851c:	2000010c 	.word	0x2000010c

08008520 <cleanup_stdio>:
 8008520:	6841      	ldr	r1, [r0, #4]
 8008522:	4b0c      	ldr	r3, [pc, #48]	@ (8008554 <cleanup_stdio+0x34>)
 8008524:	4299      	cmp	r1, r3
 8008526:	b510      	push	{r4, lr}
 8008528:	4604      	mov	r4, r0
 800852a:	d001      	beq.n	8008530 <cleanup_stdio+0x10>
 800852c:	f001 fe06 	bl	800a13c <_fflush_r>
 8008530:	68a1      	ldr	r1, [r4, #8]
 8008532:	4b09      	ldr	r3, [pc, #36]	@ (8008558 <cleanup_stdio+0x38>)
 8008534:	4299      	cmp	r1, r3
 8008536:	d002      	beq.n	800853e <cleanup_stdio+0x1e>
 8008538:	4620      	mov	r0, r4
 800853a:	f001 fdff 	bl	800a13c <_fflush_r>
 800853e:	68e1      	ldr	r1, [r4, #12]
 8008540:	4b06      	ldr	r3, [pc, #24]	@ (800855c <cleanup_stdio+0x3c>)
 8008542:	4299      	cmp	r1, r3
 8008544:	d004      	beq.n	8008550 <cleanup_stdio+0x30>
 8008546:	4620      	mov	r0, r4
 8008548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800854c:	f001 bdf6 	b.w	800a13c <_fflush_r>
 8008550:	bd10      	pop	{r4, pc}
 8008552:	bf00      	nop
 8008554:	20001ecc 	.word	0x20001ecc
 8008558:	20001f34 	.word	0x20001f34
 800855c:	20001f9c 	.word	0x20001f9c

08008560 <global_stdio_init.part.0>:
 8008560:	b510      	push	{r4, lr}
 8008562:	4b0b      	ldr	r3, [pc, #44]	@ (8008590 <global_stdio_init.part.0+0x30>)
 8008564:	4c0b      	ldr	r4, [pc, #44]	@ (8008594 <global_stdio_init.part.0+0x34>)
 8008566:	4a0c      	ldr	r2, [pc, #48]	@ (8008598 <global_stdio_init.part.0+0x38>)
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	4620      	mov	r0, r4
 800856c:	2200      	movs	r2, #0
 800856e:	2104      	movs	r1, #4
 8008570:	f7ff ff94 	bl	800849c <std>
 8008574:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008578:	2201      	movs	r2, #1
 800857a:	2109      	movs	r1, #9
 800857c:	f7ff ff8e 	bl	800849c <std>
 8008580:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008584:	2202      	movs	r2, #2
 8008586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800858a:	2112      	movs	r1, #18
 800858c:	f7ff bf86 	b.w	800849c <std>
 8008590:	20002004 	.word	0x20002004
 8008594:	20001ecc 	.word	0x20001ecc
 8008598:	08008509 	.word	0x08008509

0800859c <__sfp_lock_acquire>:
 800859c:	4801      	ldr	r0, [pc, #4]	@ (80085a4 <__sfp_lock_acquire+0x8>)
 800859e:	f000 b920 	b.w	80087e2 <__retarget_lock_acquire_recursive>
 80085a2:	bf00      	nop
 80085a4:	2000200d 	.word	0x2000200d

080085a8 <__sfp_lock_release>:
 80085a8:	4801      	ldr	r0, [pc, #4]	@ (80085b0 <__sfp_lock_release+0x8>)
 80085aa:	f000 b91b 	b.w	80087e4 <__retarget_lock_release_recursive>
 80085ae:	bf00      	nop
 80085b0:	2000200d 	.word	0x2000200d

080085b4 <__sinit>:
 80085b4:	b510      	push	{r4, lr}
 80085b6:	4604      	mov	r4, r0
 80085b8:	f7ff fff0 	bl	800859c <__sfp_lock_acquire>
 80085bc:	6a23      	ldr	r3, [r4, #32]
 80085be:	b11b      	cbz	r3, 80085c8 <__sinit+0x14>
 80085c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085c4:	f7ff bff0 	b.w	80085a8 <__sfp_lock_release>
 80085c8:	4b04      	ldr	r3, [pc, #16]	@ (80085dc <__sinit+0x28>)
 80085ca:	6223      	str	r3, [r4, #32]
 80085cc:	4b04      	ldr	r3, [pc, #16]	@ (80085e0 <__sinit+0x2c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1f5      	bne.n	80085c0 <__sinit+0xc>
 80085d4:	f7ff ffc4 	bl	8008560 <global_stdio_init.part.0>
 80085d8:	e7f2      	b.n	80085c0 <__sinit+0xc>
 80085da:	bf00      	nop
 80085dc:	08008521 	.word	0x08008521
 80085e0:	20002004 	.word	0x20002004

080085e4 <_fwalk_sglue>:
 80085e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e8:	4607      	mov	r7, r0
 80085ea:	4688      	mov	r8, r1
 80085ec:	4614      	mov	r4, r2
 80085ee:	2600      	movs	r6, #0
 80085f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085f4:	f1b9 0901 	subs.w	r9, r9, #1
 80085f8:	d505      	bpl.n	8008606 <_fwalk_sglue+0x22>
 80085fa:	6824      	ldr	r4, [r4, #0]
 80085fc:	2c00      	cmp	r4, #0
 80085fe:	d1f7      	bne.n	80085f0 <_fwalk_sglue+0xc>
 8008600:	4630      	mov	r0, r6
 8008602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008606:	89ab      	ldrh	r3, [r5, #12]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d907      	bls.n	800861c <_fwalk_sglue+0x38>
 800860c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008610:	3301      	adds	r3, #1
 8008612:	d003      	beq.n	800861c <_fwalk_sglue+0x38>
 8008614:	4629      	mov	r1, r5
 8008616:	4638      	mov	r0, r7
 8008618:	47c0      	blx	r8
 800861a:	4306      	orrs	r6, r0
 800861c:	3568      	adds	r5, #104	@ 0x68
 800861e:	e7e9      	b.n	80085f4 <_fwalk_sglue+0x10>

08008620 <siprintf>:
 8008620:	b40e      	push	{r1, r2, r3}
 8008622:	b500      	push	{lr}
 8008624:	b09c      	sub	sp, #112	@ 0x70
 8008626:	ab1d      	add	r3, sp, #116	@ 0x74
 8008628:	9002      	str	r0, [sp, #8]
 800862a:	9006      	str	r0, [sp, #24]
 800862c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008630:	4809      	ldr	r0, [pc, #36]	@ (8008658 <siprintf+0x38>)
 8008632:	9107      	str	r1, [sp, #28]
 8008634:	9104      	str	r1, [sp, #16]
 8008636:	4909      	ldr	r1, [pc, #36]	@ (800865c <siprintf+0x3c>)
 8008638:	f853 2b04 	ldr.w	r2, [r3], #4
 800863c:	9105      	str	r1, [sp, #20]
 800863e:	6800      	ldr	r0, [r0, #0]
 8008640:	9301      	str	r3, [sp, #4]
 8008642:	a902      	add	r1, sp, #8
 8008644:	f001 fbfa 	bl	8009e3c <_svfiprintf_r>
 8008648:	9b02      	ldr	r3, [sp, #8]
 800864a:	2200      	movs	r2, #0
 800864c:	701a      	strb	r2, [r3, #0]
 800864e:	b01c      	add	sp, #112	@ 0x70
 8008650:	f85d eb04 	ldr.w	lr, [sp], #4
 8008654:	b003      	add	sp, #12
 8008656:	4770      	bx	lr
 8008658:	20000108 	.word	0x20000108
 800865c:	ffff0208 	.word	0xffff0208

08008660 <__sread>:
 8008660:	b510      	push	{r4, lr}
 8008662:	460c      	mov	r4, r1
 8008664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008668:	f000 f86c 	bl	8008744 <_read_r>
 800866c:	2800      	cmp	r0, #0
 800866e:	bfab      	itete	ge
 8008670:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008672:	89a3      	ldrhlt	r3, [r4, #12]
 8008674:	181b      	addge	r3, r3, r0
 8008676:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800867a:	bfac      	ite	ge
 800867c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800867e:	81a3      	strhlt	r3, [r4, #12]
 8008680:	bd10      	pop	{r4, pc}

08008682 <__swrite>:
 8008682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008686:	461f      	mov	r7, r3
 8008688:	898b      	ldrh	r3, [r1, #12]
 800868a:	05db      	lsls	r3, r3, #23
 800868c:	4605      	mov	r5, r0
 800868e:	460c      	mov	r4, r1
 8008690:	4616      	mov	r6, r2
 8008692:	d505      	bpl.n	80086a0 <__swrite+0x1e>
 8008694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008698:	2302      	movs	r3, #2
 800869a:	2200      	movs	r2, #0
 800869c:	f000 f840 	bl	8008720 <_lseek_r>
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086aa:	81a3      	strh	r3, [r4, #12]
 80086ac:	4632      	mov	r2, r6
 80086ae:	463b      	mov	r3, r7
 80086b0:	4628      	mov	r0, r5
 80086b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086b6:	f000 b857 	b.w	8008768 <_write_r>

080086ba <__sseek>:
 80086ba:	b510      	push	{r4, lr}
 80086bc:	460c      	mov	r4, r1
 80086be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c2:	f000 f82d 	bl	8008720 <_lseek_r>
 80086c6:	1c43      	adds	r3, r0, #1
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	bf15      	itete	ne
 80086cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80086ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80086d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80086d6:	81a3      	strheq	r3, [r4, #12]
 80086d8:	bf18      	it	ne
 80086da:	81a3      	strhne	r3, [r4, #12]
 80086dc:	bd10      	pop	{r4, pc}

080086de <__sclose>:
 80086de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e2:	f000 b80d 	b.w	8008700 <_close_r>

080086e6 <memset>:
 80086e6:	4402      	add	r2, r0
 80086e8:	4603      	mov	r3, r0
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d100      	bne.n	80086f0 <memset+0xa>
 80086ee:	4770      	bx	lr
 80086f0:	f803 1b01 	strb.w	r1, [r3], #1
 80086f4:	e7f9      	b.n	80086ea <memset+0x4>
	...

080086f8 <_localeconv_r>:
 80086f8:	4800      	ldr	r0, [pc, #0]	@ (80086fc <_localeconv_r+0x4>)
 80086fa:	4770      	bx	lr
 80086fc:	20000248 	.word	0x20000248

08008700 <_close_r>:
 8008700:	b538      	push	{r3, r4, r5, lr}
 8008702:	4d06      	ldr	r5, [pc, #24]	@ (800871c <_close_r+0x1c>)
 8008704:	2300      	movs	r3, #0
 8008706:	4604      	mov	r4, r0
 8008708:	4608      	mov	r0, r1
 800870a:	602b      	str	r3, [r5, #0]
 800870c:	f7f8 ff80 	bl	8001610 <_close>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d102      	bne.n	800871a <_close_r+0x1a>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	b103      	cbz	r3, 800871a <_close_r+0x1a>
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	bd38      	pop	{r3, r4, r5, pc}
 800871c:	20002008 	.word	0x20002008

08008720 <_lseek_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4d07      	ldr	r5, [pc, #28]	@ (8008740 <_lseek_r+0x20>)
 8008724:	4604      	mov	r4, r0
 8008726:	4608      	mov	r0, r1
 8008728:	4611      	mov	r1, r2
 800872a:	2200      	movs	r2, #0
 800872c:	602a      	str	r2, [r5, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	f7f8 ff95 	bl	800165e <_lseek>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	d102      	bne.n	800873e <_lseek_r+0x1e>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	b103      	cbz	r3, 800873e <_lseek_r+0x1e>
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	20002008 	.word	0x20002008

08008744 <_read_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	4d07      	ldr	r5, [pc, #28]	@ (8008764 <_read_r+0x20>)
 8008748:	4604      	mov	r4, r0
 800874a:	4608      	mov	r0, r1
 800874c:	4611      	mov	r1, r2
 800874e:	2200      	movs	r2, #0
 8008750:	602a      	str	r2, [r5, #0]
 8008752:	461a      	mov	r2, r3
 8008754:	f7f8 ff23 	bl	800159e <_read>
 8008758:	1c43      	adds	r3, r0, #1
 800875a:	d102      	bne.n	8008762 <_read_r+0x1e>
 800875c:	682b      	ldr	r3, [r5, #0]
 800875e:	b103      	cbz	r3, 8008762 <_read_r+0x1e>
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	20002008 	.word	0x20002008

08008768 <_write_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d07      	ldr	r5, [pc, #28]	@ (8008788 <_write_r+0x20>)
 800876c:	4604      	mov	r4, r0
 800876e:	4608      	mov	r0, r1
 8008770:	4611      	mov	r1, r2
 8008772:	2200      	movs	r2, #0
 8008774:	602a      	str	r2, [r5, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	f7f8 ff2e 	bl	80015d8 <_write>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d102      	bne.n	8008786 <_write_r+0x1e>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	b103      	cbz	r3, 8008786 <_write_r+0x1e>
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	20002008 	.word	0x20002008

0800878c <__errno>:
 800878c:	4b01      	ldr	r3, [pc, #4]	@ (8008794 <__errno+0x8>)
 800878e:	6818      	ldr	r0, [r3, #0]
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	20000108 	.word	0x20000108

08008798 <__libc_init_array>:
 8008798:	b570      	push	{r4, r5, r6, lr}
 800879a:	4d0d      	ldr	r5, [pc, #52]	@ (80087d0 <__libc_init_array+0x38>)
 800879c:	4c0d      	ldr	r4, [pc, #52]	@ (80087d4 <__libc_init_array+0x3c>)
 800879e:	1b64      	subs	r4, r4, r5
 80087a0:	10a4      	asrs	r4, r4, #2
 80087a2:	2600      	movs	r6, #0
 80087a4:	42a6      	cmp	r6, r4
 80087a6:	d109      	bne.n	80087bc <__libc_init_array+0x24>
 80087a8:	4d0b      	ldr	r5, [pc, #44]	@ (80087d8 <__libc_init_array+0x40>)
 80087aa:	4c0c      	ldr	r4, [pc, #48]	@ (80087dc <__libc_init_array+0x44>)
 80087ac:	f002 f864 	bl	800a878 <_init>
 80087b0:	1b64      	subs	r4, r4, r5
 80087b2:	10a4      	asrs	r4, r4, #2
 80087b4:	2600      	movs	r6, #0
 80087b6:	42a6      	cmp	r6, r4
 80087b8:	d105      	bne.n	80087c6 <__libc_init_array+0x2e>
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80087c0:	4798      	blx	r3
 80087c2:	3601      	adds	r6, #1
 80087c4:	e7ee      	b.n	80087a4 <__libc_init_array+0xc>
 80087c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ca:	4798      	blx	r3
 80087cc:	3601      	adds	r6, #1
 80087ce:	e7f2      	b.n	80087b6 <__libc_init_array+0x1e>
 80087d0:	0800ac98 	.word	0x0800ac98
 80087d4:	0800ac98 	.word	0x0800ac98
 80087d8:	0800ac98 	.word	0x0800ac98
 80087dc:	0800ac9c 	.word	0x0800ac9c

080087e0 <__retarget_lock_init_recursive>:
 80087e0:	4770      	bx	lr

080087e2 <__retarget_lock_acquire_recursive>:
 80087e2:	4770      	bx	lr

080087e4 <__retarget_lock_release_recursive>:
 80087e4:	4770      	bx	lr

080087e6 <quorem>:
 80087e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ea:	6903      	ldr	r3, [r0, #16]
 80087ec:	690c      	ldr	r4, [r1, #16]
 80087ee:	42a3      	cmp	r3, r4
 80087f0:	4607      	mov	r7, r0
 80087f2:	db7e      	blt.n	80088f2 <quorem+0x10c>
 80087f4:	3c01      	subs	r4, #1
 80087f6:	f101 0814 	add.w	r8, r1, #20
 80087fa:	00a3      	lsls	r3, r4, #2
 80087fc:	f100 0514 	add.w	r5, r0, #20
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800880c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008810:	3301      	adds	r3, #1
 8008812:	429a      	cmp	r2, r3
 8008814:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008818:	fbb2 f6f3 	udiv	r6, r2, r3
 800881c:	d32e      	bcc.n	800887c <quorem+0x96>
 800881e:	f04f 0a00 	mov.w	sl, #0
 8008822:	46c4      	mov	ip, r8
 8008824:	46ae      	mov	lr, r5
 8008826:	46d3      	mov	fp, sl
 8008828:	f85c 3b04 	ldr.w	r3, [ip], #4
 800882c:	b298      	uxth	r0, r3
 800882e:	fb06 a000 	mla	r0, r6, r0, sl
 8008832:	0c02      	lsrs	r2, r0, #16
 8008834:	0c1b      	lsrs	r3, r3, #16
 8008836:	fb06 2303 	mla	r3, r6, r3, r2
 800883a:	f8de 2000 	ldr.w	r2, [lr]
 800883e:	b280      	uxth	r0, r0
 8008840:	b292      	uxth	r2, r2
 8008842:	1a12      	subs	r2, r2, r0
 8008844:	445a      	add	r2, fp
 8008846:	f8de 0000 	ldr.w	r0, [lr]
 800884a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800884e:	b29b      	uxth	r3, r3
 8008850:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008854:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008858:	b292      	uxth	r2, r2
 800885a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800885e:	45e1      	cmp	r9, ip
 8008860:	f84e 2b04 	str.w	r2, [lr], #4
 8008864:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008868:	d2de      	bcs.n	8008828 <quorem+0x42>
 800886a:	9b00      	ldr	r3, [sp, #0]
 800886c:	58eb      	ldr	r3, [r5, r3]
 800886e:	b92b      	cbnz	r3, 800887c <quorem+0x96>
 8008870:	9b01      	ldr	r3, [sp, #4]
 8008872:	3b04      	subs	r3, #4
 8008874:	429d      	cmp	r5, r3
 8008876:	461a      	mov	r2, r3
 8008878:	d32f      	bcc.n	80088da <quorem+0xf4>
 800887a:	613c      	str	r4, [r7, #16]
 800887c:	4638      	mov	r0, r7
 800887e:	f001 f979 	bl	8009b74 <__mcmp>
 8008882:	2800      	cmp	r0, #0
 8008884:	db25      	blt.n	80088d2 <quorem+0xec>
 8008886:	4629      	mov	r1, r5
 8008888:	2000      	movs	r0, #0
 800888a:	f858 2b04 	ldr.w	r2, [r8], #4
 800888e:	f8d1 c000 	ldr.w	ip, [r1]
 8008892:	fa1f fe82 	uxth.w	lr, r2
 8008896:	fa1f f38c 	uxth.w	r3, ip
 800889a:	eba3 030e 	sub.w	r3, r3, lr
 800889e:	4403      	add	r3, r0
 80088a0:	0c12      	lsrs	r2, r2, #16
 80088a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80088a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088b0:	45c1      	cmp	r9, r8
 80088b2:	f841 3b04 	str.w	r3, [r1], #4
 80088b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80088ba:	d2e6      	bcs.n	800888a <quorem+0xa4>
 80088bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088c4:	b922      	cbnz	r2, 80088d0 <quorem+0xea>
 80088c6:	3b04      	subs	r3, #4
 80088c8:	429d      	cmp	r5, r3
 80088ca:	461a      	mov	r2, r3
 80088cc:	d30b      	bcc.n	80088e6 <quorem+0x100>
 80088ce:	613c      	str	r4, [r7, #16]
 80088d0:	3601      	adds	r6, #1
 80088d2:	4630      	mov	r0, r6
 80088d4:	b003      	add	sp, #12
 80088d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088da:	6812      	ldr	r2, [r2, #0]
 80088dc:	3b04      	subs	r3, #4
 80088de:	2a00      	cmp	r2, #0
 80088e0:	d1cb      	bne.n	800887a <quorem+0x94>
 80088e2:	3c01      	subs	r4, #1
 80088e4:	e7c6      	b.n	8008874 <quorem+0x8e>
 80088e6:	6812      	ldr	r2, [r2, #0]
 80088e8:	3b04      	subs	r3, #4
 80088ea:	2a00      	cmp	r2, #0
 80088ec:	d1ef      	bne.n	80088ce <quorem+0xe8>
 80088ee:	3c01      	subs	r4, #1
 80088f0:	e7ea      	b.n	80088c8 <quorem+0xe2>
 80088f2:	2000      	movs	r0, #0
 80088f4:	e7ee      	b.n	80088d4 <quorem+0xee>
	...

080088f8 <_dtoa_r>:
 80088f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	69c7      	ldr	r7, [r0, #28]
 80088fe:	b099      	sub	sp, #100	@ 0x64
 8008900:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008904:	ec55 4b10 	vmov	r4, r5, d0
 8008908:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800890a:	9109      	str	r1, [sp, #36]	@ 0x24
 800890c:	4683      	mov	fp, r0
 800890e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008910:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008912:	b97f      	cbnz	r7, 8008934 <_dtoa_r+0x3c>
 8008914:	2010      	movs	r0, #16
 8008916:	f000 fdfd 	bl	8009514 <malloc>
 800891a:	4602      	mov	r2, r0
 800891c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008920:	b920      	cbnz	r0, 800892c <_dtoa_r+0x34>
 8008922:	4ba7      	ldr	r3, [pc, #668]	@ (8008bc0 <_dtoa_r+0x2c8>)
 8008924:	21ef      	movs	r1, #239	@ 0xef
 8008926:	48a7      	ldr	r0, [pc, #668]	@ (8008bc4 <_dtoa_r+0x2cc>)
 8008928:	f001 fc68 	bl	800a1fc <__assert_func>
 800892c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008930:	6007      	str	r7, [r0, #0]
 8008932:	60c7      	str	r7, [r0, #12]
 8008934:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008938:	6819      	ldr	r1, [r3, #0]
 800893a:	b159      	cbz	r1, 8008954 <_dtoa_r+0x5c>
 800893c:	685a      	ldr	r2, [r3, #4]
 800893e:	604a      	str	r2, [r1, #4]
 8008940:	2301      	movs	r3, #1
 8008942:	4093      	lsls	r3, r2
 8008944:	608b      	str	r3, [r1, #8]
 8008946:	4658      	mov	r0, fp
 8008948:	f000 feda 	bl	8009700 <_Bfree>
 800894c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008950:	2200      	movs	r2, #0
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	1e2b      	subs	r3, r5, #0
 8008956:	bfb9      	ittee	lt
 8008958:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800895c:	9303      	strlt	r3, [sp, #12]
 800895e:	2300      	movge	r3, #0
 8008960:	6033      	strge	r3, [r6, #0]
 8008962:	9f03      	ldr	r7, [sp, #12]
 8008964:	4b98      	ldr	r3, [pc, #608]	@ (8008bc8 <_dtoa_r+0x2d0>)
 8008966:	bfbc      	itt	lt
 8008968:	2201      	movlt	r2, #1
 800896a:	6032      	strlt	r2, [r6, #0]
 800896c:	43bb      	bics	r3, r7
 800896e:	d112      	bne.n	8008996 <_dtoa_r+0x9e>
 8008970:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008972:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800897c:	4323      	orrs	r3, r4
 800897e:	f000 854d 	beq.w	800941c <_dtoa_r+0xb24>
 8008982:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008984:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008bdc <_dtoa_r+0x2e4>
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 854f 	beq.w	800942c <_dtoa_r+0xb34>
 800898e:	f10a 0303 	add.w	r3, sl, #3
 8008992:	f000 bd49 	b.w	8009428 <_dtoa_r+0xb30>
 8008996:	ed9d 7b02 	vldr	d7, [sp, #8]
 800899a:	2200      	movs	r2, #0
 800899c:	ec51 0b17 	vmov	r0, r1, d7
 80089a0:	2300      	movs	r3, #0
 80089a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80089a6:	f7f8 f88f 	bl	8000ac8 <__aeabi_dcmpeq>
 80089aa:	4680      	mov	r8, r0
 80089ac:	b158      	cbz	r0, 80089c6 <_dtoa_r+0xce>
 80089ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80089b0:	2301      	movs	r3, #1
 80089b2:	6013      	str	r3, [r2, #0]
 80089b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80089b6:	b113      	cbz	r3, 80089be <_dtoa_r+0xc6>
 80089b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80089ba:	4b84      	ldr	r3, [pc, #528]	@ (8008bcc <_dtoa_r+0x2d4>)
 80089bc:	6013      	str	r3, [r2, #0]
 80089be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008be0 <_dtoa_r+0x2e8>
 80089c2:	f000 bd33 	b.w	800942c <_dtoa_r+0xb34>
 80089c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80089ca:	aa16      	add	r2, sp, #88	@ 0x58
 80089cc:	a917      	add	r1, sp, #92	@ 0x5c
 80089ce:	4658      	mov	r0, fp
 80089d0:	f001 f980 	bl	8009cd4 <__d2b>
 80089d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80089d8:	4681      	mov	r9, r0
 80089da:	2e00      	cmp	r6, #0
 80089dc:	d077      	beq.n	8008ace <_dtoa_r+0x1d6>
 80089de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80089e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80089f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80089f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80089f8:	4619      	mov	r1, r3
 80089fa:	2200      	movs	r2, #0
 80089fc:	4b74      	ldr	r3, [pc, #464]	@ (8008bd0 <_dtoa_r+0x2d8>)
 80089fe:	f7f7 fc43 	bl	8000288 <__aeabi_dsub>
 8008a02:	a369      	add	r3, pc, #420	@ (adr r3, 8008ba8 <_dtoa_r+0x2b0>)
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	f7f7 fdf6 	bl	80005f8 <__aeabi_dmul>
 8008a0c:	a368      	add	r3, pc, #416	@ (adr r3, 8008bb0 <_dtoa_r+0x2b8>)
 8008a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a12:	f7f7 fc3b 	bl	800028c <__adddf3>
 8008a16:	4604      	mov	r4, r0
 8008a18:	4630      	mov	r0, r6
 8008a1a:	460d      	mov	r5, r1
 8008a1c:	f7f7 fd82 	bl	8000524 <__aeabi_i2d>
 8008a20:	a365      	add	r3, pc, #404	@ (adr r3, 8008bb8 <_dtoa_r+0x2c0>)
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	f7f7 fde7 	bl	80005f8 <__aeabi_dmul>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4620      	mov	r0, r4
 8008a30:	4629      	mov	r1, r5
 8008a32:	f7f7 fc2b 	bl	800028c <__adddf3>
 8008a36:	4604      	mov	r4, r0
 8008a38:	460d      	mov	r5, r1
 8008a3a:	f7f8 f88d 	bl	8000b58 <__aeabi_d2iz>
 8008a3e:	2200      	movs	r2, #0
 8008a40:	4607      	mov	r7, r0
 8008a42:	2300      	movs	r3, #0
 8008a44:	4620      	mov	r0, r4
 8008a46:	4629      	mov	r1, r5
 8008a48:	f7f8 f848 	bl	8000adc <__aeabi_dcmplt>
 8008a4c:	b140      	cbz	r0, 8008a60 <_dtoa_r+0x168>
 8008a4e:	4638      	mov	r0, r7
 8008a50:	f7f7 fd68 	bl	8000524 <__aeabi_i2d>
 8008a54:	4622      	mov	r2, r4
 8008a56:	462b      	mov	r3, r5
 8008a58:	f7f8 f836 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a5c:	b900      	cbnz	r0, 8008a60 <_dtoa_r+0x168>
 8008a5e:	3f01      	subs	r7, #1
 8008a60:	2f16      	cmp	r7, #22
 8008a62:	d851      	bhi.n	8008b08 <_dtoa_r+0x210>
 8008a64:	4b5b      	ldr	r3, [pc, #364]	@ (8008bd4 <_dtoa_r+0x2dc>)
 8008a66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a72:	f7f8 f833 	bl	8000adc <__aeabi_dcmplt>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d048      	beq.n	8008b0c <_dtoa_r+0x214>
 8008a7a:	3f01      	subs	r7, #1
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008a80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a82:	1b9b      	subs	r3, r3, r6
 8008a84:	1e5a      	subs	r2, r3, #1
 8008a86:	bf44      	itt	mi
 8008a88:	f1c3 0801 	rsbmi	r8, r3, #1
 8008a8c:	2300      	movmi	r3, #0
 8008a8e:	9208      	str	r2, [sp, #32]
 8008a90:	bf54      	ite	pl
 8008a92:	f04f 0800 	movpl.w	r8, #0
 8008a96:	9308      	strmi	r3, [sp, #32]
 8008a98:	2f00      	cmp	r7, #0
 8008a9a:	db39      	blt.n	8008b10 <_dtoa_r+0x218>
 8008a9c:	9b08      	ldr	r3, [sp, #32]
 8008a9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008aa0:	443b      	add	r3, r7
 8008aa2:	9308      	str	r3, [sp, #32]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aaa:	2b09      	cmp	r3, #9
 8008aac:	d864      	bhi.n	8008b78 <_dtoa_r+0x280>
 8008aae:	2b05      	cmp	r3, #5
 8008ab0:	bfc4      	itt	gt
 8008ab2:	3b04      	subgt	r3, #4
 8008ab4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ab8:	f1a3 0302 	sub.w	r3, r3, #2
 8008abc:	bfcc      	ite	gt
 8008abe:	2400      	movgt	r4, #0
 8008ac0:	2401      	movle	r4, #1
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d863      	bhi.n	8008b8e <_dtoa_r+0x296>
 8008ac6:	e8df f003 	tbb	[pc, r3]
 8008aca:	372a      	.short	0x372a
 8008acc:	5535      	.short	0x5535
 8008ace:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008ad2:	441e      	add	r6, r3
 8008ad4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008ad8:	2b20      	cmp	r3, #32
 8008ada:	bfc1      	itttt	gt
 8008adc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008ae0:	409f      	lslgt	r7, r3
 8008ae2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008ae6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008aea:	bfd6      	itet	le
 8008aec:	f1c3 0320 	rsble	r3, r3, #32
 8008af0:	ea47 0003 	orrgt.w	r0, r7, r3
 8008af4:	fa04 f003 	lslle.w	r0, r4, r3
 8008af8:	f7f7 fd04 	bl	8000504 <__aeabi_ui2d>
 8008afc:	2201      	movs	r2, #1
 8008afe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008b02:	3e01      	subs	r6, #1
 8008b04:	9214      	str	r2, [sp, #80]	@ 0x50
 8008b06:	e777      	b.n	80089f8 <_dtoa_r+0x100>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e7b8      	b.n	8008a7e <_dtoa_r+0x186>
 8008b0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008b0e:	e7b7      	b.n	8008a80 <_dtoa_r+0x188>
 8008b10:	427b      	negs	r3, r7
 8008b12:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b14:	2300      	movs	r3, #0
 8008b16:	eba8 0807 	sub.w	r8, r8, r7
 8008b1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b1c:	e7c4      	b.n	8008aa8 <_dtoa_r+0x1b0>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	dc35      	bgt.n	8008b94 <_dtoa_r+0x29c>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	9307      	str	r3, [sp, #28]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b32:	e00b      	b.n	8008b4c <_dtoa_r+0x254>
 8008b34:	2301      	movs	r3, #1
 8008b36:	e7f3      	b.n	8008b20 <_dtoa_r+0x228>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b3e:	18fb      	adds	r3, r7, r3
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	3301      	adds	r3, #1
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	9307      	str	r3, [sp, #28]
 8008b48:	bfb8      	it	lt
 8008b4a:	2301      	movlt	r3, #1
 8008b4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008b50:	2100      	movs	r1, #0
 8008b52:	2204      	movs	r2, #4
 8008b54:	f102 0514 	add.w	r5, r2, #20
 8008b58:	429d      	cmp	r5, r3
 8008b5a:	d91f      	bls.n	8008b9c <_dtoa_r+0x2a4>
 8008b5c:	6041      	str	r1, [r0, #4]
 8008b5e:	4658      	mov	r0, fp
 8008b60:	f000 fd8e 	bl	8009680 <_Balloc>
 8008b64:	4682      	mov	sl, r0
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d13c      	bne.n	8008be4 <_dtoa_r+0x2ec>
 8008b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8008bd8 <_dtoa_r+0x2e0>)
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008b72:	e6d8      	b.n	8008926 <_dtoa_r+0x2e>
 8008b74:	2301      	movs	r3, #1
 8008b76:	e7e0      	b.n	8008b3a <_dtoa_r+0x242>
 8008b78:	2401      	movs	r4, #1
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008b80:	f04f 33ff 	mov.w	r3, #4294967295
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	9307      	str	r3, [sp, #28]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	2312      	movs	r3, #18
 8008b8c:	e7d0      	b.n	8008b30 <_dtoa_r+0x238>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b92:	e7f5      	b.n	8008b80 <_dtoa_r+0x288>
 8008b94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	9307      	str	r3, [sp, #28]
 8008b9a:	e7d7      	b.n	8008b4c <_dtoa_r+0x254>
 8008b9c:	3101      	adds	r1, #1
 8008b9e:	0052      	lsls	r2, r2, #1
 8008ba0:	e7d8      	b.n	8008b54 <_dtoa_r+0x25c>
 8008ba2:	bf00      	nop
 8008ba4:	f3af 8000 	nop.w
 8008ba8:	636f4361 	.word	0x636f4361
 8008bac:	3fd287a7 	.word	0x3fd287a7
 8008bb0:	8b60c8b3 	.word	0x8b60c8b3
 8008bb4:	3fc68a28 	.word	0x3fc68a28
 8008bb8:	509f79fb 	.word	0x509f79fb
 8008bbc:	3fd34413 	.word	0x3fd34413
 8008bc0:	0800a961 	.word	0x0800a961
 8008bc4:	0800a978 	.word	0x0800a978
 8008bc8:	7ff00000 	.word	0x7ff00000
 8008bcc:	0800a931 	.word	0x0800a931
 8008bd0:	3ff80000 	.word	0x3ff80000
 8008bd4:	0800aa70 	.word	0x0800aa70
 8008bd8:	0800a9d0 	.word	0x0800a9d0
 8008bdc:	0800a95d 	.word	0x0800a95d
 8008be0:	0800a930 	.word	0x0800a930
 8008be4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008be8:	6018      	str	r0, [r3, #0]
 8008bea:	9b07      	ldr	r3, [sp, #28]
 8008bec:	2b0e      	cmp	r3, #14
 8008bee:	f200 80a4 	bhi.w	8008d3a <_dtoa_r+0x442>
 8008bf2:	2c00      	cmp	r4, #0
 8008bf4:	f000 80a1 	beq.w	8008d3a <_dtoa_r+0x442>
 8008bf8:	2f00      	cmp	r7, #0
 8008bfa:	dd33      	ble.n	8008c64 <_dtoa_r+0x36c>
 8008bfc:	4bad      	ldr	r3, [pc, #692]	@ (8008eb4 <_dtoa_r+0x5bc>)
 8008bfe:	f007 020f 	and.w	r2, r7, #15
 8008c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c06:	ed93 7b00 	vldr	d7, [r3]
 8008c0a:	05f8      	lsls	r0, r7, #23
 8008c0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008c10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008c14:	d516      	bpl.n	8008c44 <_dtoa_r+0x34c>
 8008c16:	4ba8      	ldr	r3, [pc, #672]	@ (8008eb8 <_dtoa_r+0x5c0>)
 8008c18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c20:	f7f7 fe14 	bl	800084c <__aeabi_ddiv>
 8008c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c28:	f004 040f 	and.w	r4, r4, #15
 8008c2c:	2603      	movs	r6, #3
 8008c2e:	4da2      	ldr	r5, [pc, #648]	@ (8008eb8 <_dtoa_r+0x5c0>)
 8008c30:	b954      	cbnz	r4, 8008c48 <_dtoa_r+0x350>
 8008c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c3a:	f7f7 fe07 	bl	800084c <__aeabi_ddiv>
 8008c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c42:	e028      	b.n	8008c96 <_dtoa_r+0x39e>
 8008c44:	2602      	movs	r6, #2
 8008c46:	e7f2      	b.n	8008c2e <_dtoa_r+0x336>
 8008c48:	07e1      	lsls	r1, r4, #31
 8008c4a:	d508      	bpl.n	8008c5e <_dtoa_r+0x366>
 8008c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c54:	f7f7 fcd0 	bl	80005f8 <__aeabi_dmul>
 8008c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c5c:	3601      	adds	r6, #1
 8008c5e:	1064      	asrs	r4, r4, #1
 8008c60:	3508      	adds	r5, #8
 8008c62:	e7e5      	b.n	8008c30 <_dtoa_r+0x338>
 8008c64:	f000 80d2 	beq.w	8008e0c <_dtoa_r+0x514>
 8008c68:	427c      	negs	r4, r7
 8008c6a:	4b92      	ldr	r3, [pc, #584]	@ (8008eb4 <_dtoa_r+0x5bc>)
 8008c6c:	4d92      	ldr	r5, [pc, #584]	@ (8008eb8 <_dtoa_r+0x5c0>)
 8008c6e:	f004 020f 	and.w	r2, r4, #15
 8008c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c7e:	f7f7 fcbb 	bl	80005f8 <__aeabi_dmul>
 8008c82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c86:	1124      	asrs	r4, r4, #4
 8008c88:	2300      	movs	r3, #0
 8008c8a:	2602      	movs	r6, #2
 8008c8c:	2c00      	cmp	r4, #0
 8008c8e:	f040 80b2 	bne.w	8008df6 <_dtoa_r+0x4fe>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1d3      	bne.n	8008c3e <_dtoa_r+0x346>
 8008c96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 80b7 	beq.w	8008e10 <_dtoa_r+0x518>
 8008ca2:	4b86      	ldr	r3, [pc, #536]	@ (8008ebc <_dtoa_r+0x5c4>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	4629      	mov	r1, r5
 8008caa:	f7f7 ff17 	bl	8000adc <__aeabi_dcmplt>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f000 80ae 	beq.w	8008e10 <_dtoa_r+0x518>
 8008cb4:	9b07      	ldr	r3, [sp, #28]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f000 80aa 	beq.w	8008e10 <_dtoa_r+0x518>
 8008cbc:	9b00      	ldr	r3, [sp, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	dd37      	ble.n	8008d32 <_dtoa_r+0x43a>
 8008cc2:	1e7b      	subs	r3, r7, #1
 8008cc4:	9304      	str	r3, [sp, #16]
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8008ec0 <_dtoa_r+0x5c8>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	4629      	mov	r1, r5
 8008cce:	f7f7 fc93 	bl	80005f8 <__aeabi_dmul>
 8008cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cd6:	9c00      	ldr	r4, [sp, #0]
 8008cd8:	3601      	adds	r6, #1
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f7f7 fc22 	bl	8000524 <__aeabi_i2d>
 8008ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ce4:	f7f7 fc88 	bl	80005f8 <__aeabi_dmul>
 8008ce8:	4b76      	ldr	r3, [pc, #472]	@ (8008ec4 <_dtoa_r+0x5cc>)
 8008cea:	2200      	movs	r2, #0
 8008cec:	f7f7 face 	bl	800028c <__adddf3>
 8008cf0:	4605      	mov	r5, r0
 8008cf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008cf6:	2c00      	cmp	r4, #0
 8008cf8:	f040 808d 	bne.w	8008e16 <_dtoa_r+0x51e>
 8008cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d00:	4b71      	ldr	r3, [pc, #452]	@ (8008ec8 <_dtoa_r+0x5d0>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	f7f7 fac0 	bl	8000288 <__aeabi_dsub>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d10:	462a      	mov	r2, r5
 8008d12:	4633      	mov	r3, r6
 8008d14:	f7f7 ff00 	bl	8000b18 <__aeabi_dcmpgt>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	f040 828b 	bne.w	8009234 <_dtoa_r+0x93c>
 8008d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d22:	462a      	mov	r2, r5
 8008d24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008d28:	f7f7 fed8 	bl	8000adc <__aeabi_dcmplt>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	f040 8128 	bne.w	8008f82 <_dtoa_r+0x68a>
 8008d32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008d36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008d3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f2c0 815a 	blt.w	8008ff6 <_dtoa_r+0x6fe>
 8008d42:	2f0e      	cmp	r7, #14
 8008d44:	f300 8157 	bgt.w	8008ff6 <_dtoa_r+0x6fe>
 8008d48:	4b5a      	ldr	r3, [pc, #360]	@ (8008eb4 <_dtoa_r+0x5bc>)
 8008d4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d4e:	ed93 7b00 	vldr	d7, [r3]
 8008d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	ed8d 7b00 	vstr	d7, [sp]
 8008d5a:	da03      	bge.n	8008d64 <_dtoa_r+0x46c>
 8008d5c:	9b07      	ldr	r3, [sp, #28]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f340 8101 	ble.w	8008f66 <_dtoa_r+0x66e>
 8008d64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008d68:	4656      	mov	r6, sl
 8008d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d6e:	4620      	mov	r0, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	f7f7 fd6b 	bl	800084c <__aeabi_ddiv>
 8008d76:	f7f7 feef 	bl	8000b58 <__aeabi_d2iz>
 8008d7a:	4680      	mov	r8, r0
 8008d7c:	f7f7 fbd2 	bl	8000524 <__aeabi_i2d>
 8008d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d84:	f7f7 fc38 	bl	80005f8 <__aeabi_dmul>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	4629      	mov	r1, r5
 8008d90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008d94:	f7f7 fa78 	bl	8000288 <__aeabi_dsub>
 8008d98:	f806 4b01 	strb.w	r4, [r6], #1
 8008d9c:	9d07      	ldr	r5, [sp, #28]
 8008d9e:	eba6 040a 	sub.w	r4, r6, sl
 8008da2:	42a5      	cmp	r5, r4
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	f040 8117 	bne.w	8008fda <_dtoa_r+0x6e2>
 8008dac:	f7f7 fa6e 	bl	800028c <__adddf3>
 8008db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008db4:	4604      	mov	r4, r0
 8008db6:	460d      	mov	r5, r1
 8008db8:	f7f7 feae 	bl	8000b18 <__aeabi_dcmpgt>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	f040 80f9 	bne.w	8008fb4 <_dtoa_r+0x6bc>
 8008dc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	4629      	mov	r1, r5
 8008dca:	f7f7 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008dce:	b118      	cbz	r0, 8008dd8 <_dtoa_r+0x4e0>
 8008dd0:	f018 0f01 	tst.w	r8, #1
 8008dd4:	f040 80ee 	bne.w	8008fb4 <_dtoa_r+0x6bc>
 8008dd8:	4649      	mov	r1, r9
 8008dda:	4658      	mov	r0, fp
 8008ddc:	f000 fc90 	bl	8009700 <_Bfree>
 8008de0:	2300      	movs	r3, #0
 8008de2:	7033      	strb	r3, [r6, #0]
 8008de4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008de6:	3701      	adds	r7, #1
 8008de8:	601f      	str	r7, [r3, #0]
 8008dea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 831d 	beq.w	800942c <_dtoa_r+0xb34>
 8008df2:	601e      	str	r6, [r3, #0]
 8008df4:	e31a      	b.n	800942c <_dtoa_r+0xb34>
 8008df6:	07e2      	lsls	r2, r4, #31
 8008df8:	d505      	bpl.n	8008e06 <_dtoa_r+0x50e>
 8008dfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008dfe:	f7f7 fbfb 	bl	80005f8 <__aeabi_dmul>
 8008e02:	3601      	adds	r6, #1
 8008e04:	2301      	movs	r3, #1
 8008e06:	1064      	asrs	r4, r4, #1
 8008e08:	3508      	adds	r5, #8
 8008e0a:	e73f      	b.n	8008c8c <_dtoa_r+0x394>
 8008e0c:	2602      	movs	r6, #2
 8008e0e:	e742      	b.n	8008c96 <_dtoa_r+0x39e>
 8008e10:	9c07      	ldr	r4, [sp, #28]
 8008e12:	9704      	str	r7, [sp, #16]
 8008e14:	e761      	b.n	8008cda <_dtoa_r+0x3e2>
 8008e16:	4b27      	ldr	r3, [pc, #156]	@ (8008eb4 <_dtoa_r+0x5bc>)
 8008e18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e22:	4454      	add	r4, sl
 8008e24:	2900      	cmp	r1, #0
 8008e26:	d053      	beq.n	8008ed0 <_dtoa_r+0x5d8>
 8008e28:	4928      	ldr	r1, [pc, #160]	@ (8008ecc <_dtoa_r+0x5d4>)
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	f7f7 fd0e 	bl	800084c <__aeabi_ddiv>
 8008e30:	4633      	mov	r3, r6
 8008e32:	462a      	mov	r2, r5
 8008e34:	f7f7 fa28 	bl	8000288 <__aeabi_dsub>
 8008e38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e3c:	4656      	mov	r6, sl
 8008e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e42:	f7f7 fe89 	bl	8000b58 <__aeabi_d2iz>
 8008e46:	4605      	mov	r5, r0
 8008e48:	f7f7 fb6c 	bl	8000524 <__aeabi_i2d>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e54:	f7f7 fa18 	bl	8000288 <__aeabi_dsub>
 8008e58:	3530      	adds	r5, #48	@ 0x30
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e62:	f806 5b01 	strb.w	r5, [r6], #1
 8008e66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e6a:	f7f7 fe37 	bl	8000adc <__aeabi_dcmplt>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d171      	bne.n	8008f56 <_dtoa_r+0x65e>
 8008e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e76:	4911      	ldr	r1, [pc, #68]	@ (8008ebc <_dtoa_r+0x5c4>)
 8008e78:	2000      	movs	r0, #0
 8008e7a:	f7f7 fa05 	bl	8000288 <__aeabi_dsub>
 8008e7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e82:	f7f7 fe2b 	bl	8000adc <__aeabi_dcmplt>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	f040 8095 	bne.w	8008fb6 <_dtoa_r+0x6be>
 8008e8c:	42a6      	cmp	r6, r4
 8008e8e:	f43f af50 	beq.w	8008d32 <_dtoa_r+0x43a>
 8008e92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e96:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec0 <_dtoa_r+0x5c8>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f7f7 fbad 	bl	80005f8 <__aeabi_dmul>
 8008e9e:	4b08      	ldr	r3, [pc, #32]	@ (8008ec0 <_dtoa_r+0x5c8>)
 8008ea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eaa:	f7f7 fba5 	bl	80005f8 <__aeabi_dmul>
 8008eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eb2:	e7c4      	b.n	8008e3e <_dtoa_r+0x546>
 8008eb4:	0800aa70 	.word	0x0800aa70
 8008eb8:	0800aa48 	.word	0x0800aa48
 8008ebc:	3ff00000 	.word	0x3ff00000
 8008ec0:	40240000 	.word	0x40240000
 8008ec4:	401c0000 	.word	0x401c0000
 8008ec8:	40140000 	.word	0x40140000
 8008ecc:	3fe00000 	.word	0x3fe00000
 8008ed0:	4631      	mov	r1, r6
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f7f7 fb90 	bl	80005f8 <__aeabi_dmul>
 8008ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008edc:	9415      	str	r4, [sp, #84]	@ 0x54
 8008ede:	4656      	mov	r6, sl
 8008ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ee4:	f7f7 fe38 	bl	8000b58 <__aeabi_d2iz>
 8008ee8:	4605      	mov	r5, r0
 8008eea:	f7f7 fb1b 	bl	8000524 <__aeabi_i2d>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ef6:	f7f7 f9c7 	bl	8000288 <__aeabi_dsub>
 8008efa:	3530      	adds	r5, #48	@ 0x30
 8008efc:	f806 5b01 	strb.w	r5, [r6], #1
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	42a6      	cmp	r6, r4
 8008f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f0a:	f04f 0200 	mov.w	r2, #0
 8008f0e:	d124      	bne.n	8008f5a <_dtoa_r+0x662>
 8008f10:	4bac      	ldr	r3, [pc, #688]	@ (80091c4 <_dtoa_r+0x8cc>)
 8008f12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f16:	f7f7 f9b9 	bl	800028c <__adddf3>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f22:	f7f7 fdf9 	bl	8000b18 <__aeabi_dcmpgt>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d145      	bne.n	8008fb6 <_dtoa_r+0x6be>
 8008f2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f2e:	49a5      	ldr	r1, [pc, #660]	@ (80091c4 <_dtoa_r+0x8cc>)
 8008f30:	2000      	movs	r0, #0
 8008f32:	f7f7 f9a9 	bl	8000288 <__aeabi_dsub>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f3e:	f7f7 fdcd 	bl	8000adc <__aeabi_dcmplt>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	f43f aef5 	beq.w	8008d32 <_dtoa_r+0x43a>
 8008f48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008f4a:	1e73      	subs	r3, r6, #1
 8008f4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f52:	2b30      	cmp	r3, #48	@ 0x30
 8008f54:	d0f8      	beq.n	8008f48 <_dtoa_r+0x650>
 8008f56:	9f04      	ldr	r7, [sp, #16]
 8008f58:	e73e      	b.n	8008dd8 <_dtoa_r+0x4e0>
 8008f5a:	4b9b      	ldr	r3, [pc, #620]	@ (80091c8 <_dtoa_r+0x8d0>)
 8008f5c:	f7f7 fb4c 	bl	80005f8 <__aeabi_dmul>
 8008f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f64:	e7bc      	b.n	8008ee0 <_dtoa_r+0x5e8>
 8008f66:	d10c      	bne.n	8008f82 <_dtoa_r+0x68a>
 8008f68:	4b98      	ldr	r3, [pc, #608]	@ (80091cc <_dtoa_r+0x8d4>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f70:	f7f7 fb42 	bl	80005f8 <__aeabi_dmul>
 8008f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f78:	f7f7 fdc4 	bl	8000b04 <__aeabi_dcmpge>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	f000 8157 	beq.w	8009230 <_dtoa_r+0x938>
 8008f82:	2400      	movs	r4, #0
 8008f84:	4625      	mov	r5, r4
 8008f86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f88:	43db      	mvns	r3, r3
 8008f8a:	9304      	str	r3, [sp, #16]
 8008f8c:	4656      	mov	r6, sl
 8008f8e:	2700      	movs	r7, #0
 8008f90:	4621      	mov	r1, r4
 8008f92:	4658      	mov	r0, fp
 8008f94:	f000 fbb4 	bl	8009700 <_Bfree>
 8008f98:	2d00      	cmp	r5, #0
 8008f9a:	d0dc      	beq.n	8008f56 <_dtoa_r+0x65e>
 8008f9c:	b12f      	cbz	r7, 8008faa <_dtoa_r+0x6b2>
 8008f9e:	42af      	cmp	r7, r5
 8008fa0:	d003      	beq.n	8008faa <_dtoa_r+0x6b2>
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	4658      	mov	r0, fp
 8008fa6:	f000 fbab 	bl	8009700 <_Bfree>
 8008faa:	4629      	mov	r1, r5
 8008fac:	4658      	mov	r0, fp
 8008fae:	f000 fba7 	bl	8009700 <_Bfree>
 8008fb2:	e7d0      	b.n	8008f56 <_dtoa_r+0x65e>
 8008fb4:	9704      	str	r7, [sp, #16]
 8008fb6:	4633      	mov	r3, r6
 8008fb8:	461e      	mov	r6, r3
 8008fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fbe:	2a39      	cmp	r2, #57	@ 0x39
 8008fc0:	d107      	bne.n	8008fd2 <_dtoa_r+0x6da>
 8008fc2:	459a      	cmp	sl, r3
 8008fc4:	d1f8      	bne.n	8008fb8 <_dtoa_r+0x6c0>
 8008fc6:	9a04      	ldr	r2, [sp, #16]
 8008fc8:	3201      	adds	r2, #1
 8008fca:	9204      	str	r2, [sp, #16]
 8008fcc:	2230      	movs	r2, #48	@ 0x30
 8008fce:	f88a 2000 	strb.w	r2, [sl]
 8008fd2:	781a      	ldrb	r2, [r3, #0]
 8008fd4:	3201      	adds	r2, #1
 8008fd6:	701a      	strb	r2, [r3, #0]
 8008fd8:	e7bd      	b.n	8008f56 <_dtoa_r+0x65e>
 8008fda:	4b7b      	ldr	r3, [pc, #492]	@ (80091c8 <_dtoa_r+0x8d0>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f7f7 fb0b 	bl	80005f8 <__aeabi_dmul>
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	460d      	mov	r5, r1
 8008fea:	f7f7 fd6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	f43f aebb 	beq.w	8008d6a <_dtoa_r+0x472>
 8008ff4:	e6f0      	b.n	8008dd8 <_dtoa_r+0x4e0>
 8008ff6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ff8:	2a00      	cmp	r2, #0
 8008ffa:	f000 80db 	beq.w	80091b4 <_dtoa_r+0x8bc>
 8008ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009000:	2a01      	cmp	r2, #1
 8009002:	f300 80bf 	bgt.w	8009184 <_dtoa_r+0x88c>
 8009006:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009008:	2a00      	cmp	r2, #0
 800900a:	f000 80b7 	beq.w	800917c <_dtoa_r+0x884>
 800900e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009012:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009014:	4646      	mov	r6, r8
 8009016:	9a08      	ldr	r2, [sp, #32]
 8009018:	2101      	movs	r1, #1
 800901a:	441a      	add	r2, r3
 800901c:	4658      	mov	r0, fp
 800901e:	4498      	add	r8, r3
 8009020:	9208      	str	r2, [sp, #32]
 8009022:	f000 fc21 	bl	8009868 <__i2b>
 8009026:	4605      	mov	r5, r0
 8009028:	b15e      	cbz	r6, 8009042 <_dtoa_r+0x74a>
 800902a:	9b08      	ldr	r3, [sp, #32]
 800902c:	2b00      	cmp	r3, #0
 800902e:	dd08      	ble.n	8009042 <_dtoa_r+0x74a>
 8009030:	42b3      	cmp	r3, r6
 8009032:	9a08      	ldr	r2, [sp, #32]
 8009034:	bfa8      	it	ge
 8009036:	4633      	movge	r3, r6
 8009038:	eba8 0803 	sub.w	r8, r8, r3
 800903c:	1af6      	subs	r6, r6, r3
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	9308      	str	r3, [sp, #32]
 8009042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009044:	b1f3      	cbz	r3, 8009084 <_dtoa_r+0x78c>
 8009046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 80b7 	beq.w	80091bc <_dtoa_r+0x8c4>
 800904e:	b18c      	cbz	r4, 8009074 <_dtoa_r+0x77c>
 8009050:	4629      	mov	r1, r5
 8009052:	4622      	mov	r2, r4
 8009054:	4658      	mov	r0, fp
 8009056:	f000 fcc7 	bl	80099e8 <__pow5mult>
 800905a:	464a      	mov	r2, r9
 800905c:	4601      	mov	r1, r0
 800905e:	4605      	mov	r5, r0
 8009060:	4658      	mov	r0, fp
 8009062:	f000 fc17 	bl	8009894 <__multiply>
 8009066:	4649      	mov	r1, r9
 8009068:	9004      	str	r0, [sp, #16]
 800906a:	4658      	mov	r0, fp
 800906c:	f000 fb48 	bl	8009700 <_Bfree>
 8009070:	9b04      	ldr	r3, [sp, #16]
 8009072:	4699      	mov	r9, r3
 8009074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009076:	1b1a      	subs	r2, r3, r4
 8009078:	d004      	beq.n	8009084 <_dtoa_r+0x78c>
 800907a:	4649      	mov	r1, r9
 800907c:	4658      	mov	r0, fp
 800907e:	f000 fcb3 	bl	80099e8 <__pow5mult>
 8009082:	4681      	mov	r9, r0
 8009084:	2101      	movs	r1, #1
 8009086:	4658      	mov	r0, fp
 8009088:	f000 fbee 	bl	8009868 <__i2b>
 800908c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800908e:	4604      	mov	r4, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 81cf 	beq.w	8009434 <_dtoa_r+0xb3c>
 8009096:	461a      	mov	r2, r3
 8009098:	4601      	mov	r1, r0
 800909a:	4658      	mov	r0, fp
 800909c:	f000 fca4 	bl	80099e8 <__pow5mult>
 80090a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	4604      	mov	r4, r0
 80090a6:	f300 8095 	bgt.w	80091d4 <_dtoa_r+0x8dc>
 80090aa:	9b02      	ldr	r3, [sp, #8]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f040 8087 	bne.w	80091c0 <_dtoa_r+0x8c8>
 80090b2:	9b03      	ldr	r3, [sp, #12]
 80090b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f040 8089 	bne.w	80091d0 <_dtoa_r+0x8d8>
 80090be:	9b03      	ldr	r3, [sp, #12]
 80090c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80090c4:	0d1b      	lsrs	r3, r3, #20
 80090c6:	051b      	lsls	r3, r3, #20
 80090c8:	b12b      	cbz	r3, 80090d6 <_dtoa_r+0x7de>
 80090ca:	9b08      	ldr	r3, [sp, #32]
 80090cc:	3301      	adds	r3, #1
 80090ce:	9308      	str	r3, [sp, #32]
 80090d0:	f108 0801 	add.w	r8, r8, #1
 80090d4:	2301      	movs	r3, #1
 80090d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80090d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 81b0 	beq.w	8009440 <_dtoa_r+0xb48>
 80090e0:	6923      	ldr	r3, [r4, #16]
 80090e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80090e6:	6918      	ldr	r0, [r3, #16]
 80090e8:	f000 fb72 	bl	80097d0 <__hi0bits>
 80090ec:	f1c0 0020 	rsb	r0, r0, #32
 80090f0:	9b08      	ldr	r3, [sp, #32]
 80090f2:	4418      	add	r0, r3
 80090f4:	f010 001f 	ands.w	r0, r0, #31
 80090f8:	d077      	beq.n	80091ea <_dtoa_r+0x8f2>
 80090fa:	f1c0 0320 	rsb	r3, r0, #32
 80090fe:	2b04      	cmp	r3, #4
 8009100:	dd6b      	ble.n	80091da <_dtoa_r+0x8e2>
 8009102:	9b08      	ldr	r3, [sp, #32]
 8009104:	f1c0 001c 	rsb	r0, r0, #28
 8009108:	4403      	add	r3, r0
 800910a:	4480      	add	r8, r0
 800910c:	4406      	add	r6, r0
 800910e:	9308      	str	r3, [sp, #32]
 8009110:	f1b8 0f00 	cmp.w	r8, #0
 8009114:	dd05      	ble.n	8009122 <_dtoa_r+0x82a>
 8009116:	4649      	mov	r1, r9
 8009118:	4642      	mov	r2, r8
 800911a:	4658      	mov	r0, fp
 800911c:	f000 fcbe 	bl	8009a9c <__lshift>
 8009120:	4681      	mov	r9, r0
 8009122:	9b08      	ldr	r3, [sp, #32]
 8009124:	2b00      	cmp	r3, #0
 8009126:	dd05      	ble.n	8009134 <_dtoa_r+0x83c>
 8009128:	4621      	mov	r1, r4
 800912a:	461a      	mov	r2, r3
 800912c:	4658      	mov	r0, fp
 800912e:	f000 fcb5 	bl	8009a9c <__lshift>
 8009132:	4604      	mov	r4, r0
 8009134:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009136:	2b00      	cmp	r3, #0
 8009138:	d059      	beq.n	80091ee <_dtoa_r+0x8f6>
 800913a:	4621      	mov	r1, r4
 800913c:	4648      	mov	r0, r9
 800913e:	f000 fd19 	bl	8009b74 <__mcmp>
 8009142:	2800      	cmp	r0, #0
 8009144:	da53      	bge.n	80091ee <_dtoa_r+0x8f6>
 8009146:	1e7b      	subs	r3, r7, #1
 8009148:	9304      	str	r3, [sp, #16]
 800914a:	4649      	mov	r1, r9
 800914c:	2300      	movs	r3, #0
 800914e:	220a      	movs	r2, #10
 8009150:	4658      	mov	r0, fp
 8009152:	f000 faf7 	bl	8009744 <__multadd>
 8009156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009158:	4681      	mov	r9, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	f000 8172 	beq.w	8009444 <_dtoa_r+0xb4c>
 8009160:	2300      	movs	r3, #0
 8009162:	4629      	mov	r1, r5
 8009164:	220a      	movs	r2, #10
 8009166:	4658      	mov	r0, fp
 8009168:	f000 faec 	bl	8009744 <__multadd>
 800916c:	9b00      	ldr	r3, [sp, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	4605      	mov	r5, r0
 8009172:	dc67      	bgt.n	8009244 <_dtoa_r+0x94c>
 8009174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009176:	2b02      	cmp	r3, #2
 8009178:	dc41      	bgt.n	80091fe <_dtoa_r+0x906>
 800917a:	e063      	b.n	8009244 <_dtoa_r+0x94c>
 800917c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800917e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009182:	e746      	b.n	8009012 <_dtoa_r+0x71a>
 8009184:	9b07      	ldr	r3, [sp, #28]
 8009186:	1e5c      	subs	r4, r3, #1
 8009188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800918a:	42a3      	cmp	r3, r4
 800918c:	bfbf      	itttt	lt
 800918e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009190:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009192:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009194:	1ae3      	sublt	r3, r4, r3
 8009196:	bfb4      	ite	lt
 8009198:	18d2      	addlt	r2, r2, r3
 800919a:	1b1c      	subge	r4, r3, r4
 800919c:	9b07      	ldr	r3, [sp, #28]
 800919e:	bfbc      	itt	lt
 80091a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80091a2:	2400      	movlt	r4, #0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	bfb5      	itete	lt
 80091a8:	eba8 0603 	sublt.w	r6, r8, r3
 80091ac:	9b07      	ldrge	r3, [sp, #28]
 80091ae:	2300      	movlt	r3, #0
 80091b0:	4646      	movge	r6, r8
 80091b2:	e730      	b.n	8009016 <_dtoa_r+0x71e>
 80091b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80091b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80091b8:	4646      	mov	r6, r8
 80091ba:	e735      	b.n	8009028 <_dtoa_r+0x730>
 80091bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091be:	e75c      	b.n	800907a <_dtoa_r+0x782>
 80091c0:	2300      	movs	r3, #0
 80091c2:	e788      	b.n	80090d6 <_dtoa_r+0x7de>
 80091c4:	3fe00000 	.word	0x3fe00000
 80091c8:	40240000 	.word	0x40240000
 80091cc:	40140000 	.word	0x40140000
 80091d0:	9b02      	ldr	r3, [sp, #8]
 80091d2:	e780      	b.n	80090d6 <_dtoa_r+0x7de>
 80091d4:	2300      	movs	r3, #0
 80091d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80091d8:	e782      	b.n	80090e0 <_dtoa_r+0x7e8>
 80091da:	d099      	beq.n	8009110 <_dtoa_r+0x818>
 80091dc:	9a08      	ldr	r2, [sp, #32]
 80091de:	331c      	adds	r3, #28
 80091e0:	441a      	add	r2, r3
 80091e2:	4498      	add	r8, r3
 80091e4:	441e      	add	r6, r3
 80091e6:	9208      	str	r2, [sp, #32]
 80091e8:	e792      	b.n	8009110 <_dtoa_r+0x818>
 80091ea:	4603      	mov	r3, r0
 80091ec:	e7f6      	b.n	80091dc <_dtoa_r+0x8e4>
 80091ee:	9b07      	ldr	r3, [sp, #28]
 80091f0:	9704      	str	r7, [sp, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	dc20      	bgt.n	8009238 <_dtoa_r+0x940>
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	dd1e      	ble.n	800923c <_dtoa_r+0x944>
 80091fe:	9b00      	ldr	r3, [sp, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	f47f aec0 	bne.w	8008f86 <_dtoa_r+0x68e>
 8009206:	4621      	mov	r1, r4
 8009208:	2205      	movs	r2, #5
 800920a:	4658      	mov	r0, fp
 800920c:	f000 fa9a 	bl	8009744 <__multadd>
 8009210:	4601      	mov	r1, r0
 8009212:	4604      	mov	r4, r0
 8009214:	4648      	mov	r0, r9
 8009216:	f000 fcad 	bl	8009b74 <__mcmp>
 800921a:	2800      	cmp	r0, #0
 800921c:	f77f aeb3 	ble.w	8008f86 <_dtoa_r+0x68e>
 8009220:	4656      	mov	r6, sl
 8009222:	2331      	movs	r3, #49	@ 0x31
 8009224:	f806 3b01 	strb.w	r3, [r6], #1
 8009228:	9b04      	ldr	r3, [sp, #16]
 800922a:	3301      	adds	r3, #1
 800922c:	9304      	str	r3, [sp, #16]
 800922e:	e6ae      	b.n	8008f8e <_dtoa_r+0x696>
 8009230:	9c07      	ldr	r4, [sp, #28]
 8009232:	9704      	str	r7, [sp, #16]
 8009234:	4625      	mov	r5, r4
 8009236:	e7f3      	b.n	8009220 <_dtoa_r+0x928>
 8009238:	9b07      	ldr	r3, [sp, #28]
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 8104 	beq.w	800944c <_dtoa_r+0xb54>
 8009244:	2e00      	cmp	r6, #0
 8009246:	dd05      	ble.n	8009254 <_dtoa_r+0x95c>
 8009248:	4629      	mov	r1, r5
 800924a:	4632      	mov	r2, r6
 800924c:	4658      	mov	r0, fp
 800924e:	f000 fc25 	bl	8009a9c <__lshift>
 8009252:	4605      	mov	r5, r0
 8009254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009256:	2b00      	cmp	r3, #0
 8009258:	d05a      	beq.n	8009310 <_dtoa_r+0xa18>
 800925a:	6869      	ldr	r1, [r5, #4]
 800925c:	4658      	mov	r0, fp
 800925e:	f000 fa0f 	bl	8009680 <_Balloc>
 8009262:	4606      	mov	r6, r0
 8009264:	b928      	cbnz	r0, 8009272 <_dtoa_r+0x97a>
 8009266:	4b84      	ldr	r3, [pc, #528]	@ (8009478 <_dtoa_r+0xb80>)
 8009268:	4602      	mov	r2, r0
 800926a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800926e:	f7ff bb5a 	b.w	8008926 <_dtoa_r+0x2e>
 8009272:	692a      	ldr	r2, [r5, #16]
 8009274:	3202      	adds	r2, #2
 8009276:	0092      	lsls	r2, r2, #2
 8009278:	f105 010c 	add.w	r1, r5, #12
 800927c:	300c      	adds	r0, #12
 800927e:	f000 ffaf 	bl	800a1e0 <memcpy>
 8009282:	2201      	movs	r2, #1
 8009284:	4631      	mov	r1, r6
 8009286:	4658      	mov	r0, fp
 8009288:	f000 fc08 	bl	8009a9c <__lshift>
 800928c:	f10a 0301 	add.w	r3, sl, #1
 8009290:	9307      	str	r3, [sp, #28]
 8009292:	9b00      	ldr	r3, [sp, #0]
 8009294:	4453      	add	r3, sl
 8009296:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009298:	9b02      	ldr	r3, [sp, #8]
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	462f      	mov	r7, r5
 80092a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80092a2:	4605      	mov	r5, r0
 80092a4:	9b07      	ldr	r3, [sp, #28]
 80092a6:	4621      	mov	r1, r4
 80092a8:	3b01      	subs	r3, #1
 80092aa:	4648      	mov	r0, r9
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	f7ff fa9a 	bl	80087e6 <quorem>
 80092b2:	4639      	mov	r1, r7
 80092b4:	9002      	str	r0, [sp, #8]
 80092b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80092ba:	4648      	mov	r0, r9
 80092bc:	f000 fc5a 	bl	8009b74 <__mcmp>
 80092c0:	462a      	mov	r2, r5
 80092c2:	9008      	str	r0, [sp, #32]
 80092c4:	4621      	mov	r1, r4
 80092c6:	4658      	mov	r0, fp
 80092c8:	f000 fc70 	bl	8009bac <__mdiff>
 80092cc:	68c2      	ldr	r2, [r0, #12]
 80092ce:	4606      	mov	r6, r0
 80092d0:	bb02      	cbnz	r2, 8009314 <_dtoa_r+0xa1c>
 80092d2:	4601      	mov	r1, r0
 80092d4:	4648      	mov	r0, r9
 80092d6:	f000 fc4d 	bl	8009b74 <__mcmp>
 80092da:	4602      	mov	r2, r0
 80092dc:	4631      	mov	r1, r6
 80092de:	4658      	mov	r0, fp
 80092e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80092e2:	f000 fa0d 	bl	8009700 <_Bfree>
 80092e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092ea:	9e07      	ldr	r6, [sp, #28]
 80092ec:	ea43 0102 	orr.w	r1, r3, r2
 80092f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092f2:	4319      	orrs	r1, r3
 80092f4:	d110      	bne.n	8009318 <_dtoa_r+0xa20>
 80092f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092fa:	d029      	beq.n	8009350 <_dtoa_r+0xa58>
 80092fc:	9b08      	ldr	r3, [sp, #32]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	dd02      	ble.n	8009308 <_dtoa_r+0xa10>
 8009302:	9b02      	ldr	r3, [sp, #8]
 8009304:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009308:	9b00      	ldr	r3, [sp, #0]
 800930a:	f883 8000 	strb.w	r8, [r3]
 800930e:	e63f      	b.n	8008f90 <_dtoa_r+0x698>
 8009310:	4628      	mov	r0, r5
 8009312:	e7bb      	b.n	800928c <_dtoa_r+0x994>
 8009314:	2201      	movs	r2, #1
 8009316:	e7e1      	b.n	80092dc <_dtoa_r+0x9e4>
 8009318:	9b08      	ldr	r3, [sp, #32]
 800931a:	2b00      	cmp	r3, #0
 800931c:	db04      	blt.n	8009328 <_dtoa_r+0xa30>
 800931e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009320:	430b      	orrs	r3, r1
 8009322:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009324:	430b      	orrs	r3, r1
 8009326:	d120      	bne.n	800936a <_dtoa_r+0xa72>
 8009328:	2a00      	cmp	r2, #0
 800932a:	dded      	ble.n	8009308 <_dtoa_r+0xa10>
 800932c:	4649      	mov	r1, r9
 800932e:	2201      	movs	r2, #1
 8009330:	4658      	mov	r0, fp
 8009332:	f000 fbb3 	bl	8009a9c <__lshift>
 8009336:	4621      	mov	r1, r4
 8009338:	4681      	mov	r9, r0
 800933a:	f000 fc1b 	bl	8009b74 <__mcmp>
 800933e:	2800      	cmp	r0, #0
 8009340:	dc03      	bgt.n	800934a <_dtoa_r+0xa52>
 8009342:	d1e1      	bne.n	8009308 <_dtoa_r+0xa10>
 8009344:	f018 0f01 	tst.w	r8, #1
 8009348:	d0de      	beq.n	8009308 <_dtoa_r+0xa10>
 800934a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800934e:	d1d8      	bne.n	8009302 <_dtoa_r+0xa0a>
 8009350:	9a00      	ldr	r2, [sp, #0]
 8009352:	2339      	movs	r3, #57	@ 0x39
 8009354:	7013      	strb	r3, [r2, #0]
 8009356:	4633      	mov	r3, r6
 8009358:	461e      	mov	r6, r3
 800935a:	3b01      	subs	r3, #1
 800935c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009360:	2a39      	cmp	r2, #57	@ 0x39
 8009362:	d052      	beq.n	800940a <_dtoa_r+0xb12>
 8009364:	3201      	adds	r2, #1
 8009366:	701a      	strb	r2, [r3, #0]
 8009368:	e612      	b.n	8008f90 <_dtoa_r+0x698>
 800936a:	2a00      	cmp	r2, #0
 800936c:	dd07      	ble.n	800937e <_dtoa_r+0xa86>
 800936e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009372:	d0ed      	beq.n	8009350 <_dtoa_r+0xa58>
 8009374:	9a00      	ldr	r2, [sp, #0]
 8009376:	f108 0301 	add.w	r3, r8, #1
 800937a:	7013      	strb	r3, [r2, #0]
 800937c:	e608      	b.n	8008f90 <_dtoa_r+0x698>
 800937e:	9b07      	ldr	r3, [sp, #28]
 8009380:	9a07      	ldr	r2, [sp, #28]
 8009382:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009388:	4293      	cmp	r3, r2
 800938a:	d028      	beq.n	80093de <_dtoa_r+0xae6>
 800938c:	4649      	mov	r1, r9
 800938e:	2300      	movs	r3, #0
 8009390:	220a      	movs	r2, #10
 8009392:	4658      	mov	r0, fp
 8009394:	f000 f9d6 	bl	8009744 <__multadd>
 8009398:	42af      	cmp	r7, r5
 800939a:	4681      	mov	r9, r0
 800939c:	f04f 0300 	mov.w	r3, #0
 80093a0:	f04f 020a 	mov.w	r2, #10
 80093a4:	4639      	mov	r1, r7
 80093a6:	4658      	mov	r0, fp
 80093a8:	d107      	bne.n	80093ba <_dtoa_r+0xac2>
 80093aa:	f000 f9cb 	bl	8009744 <__multadd>
 80093ae:	4607      	mov	r7, r0
 80093b0:	4605      	mov	r5, r0
 80093b2:	9b07      	ldr	r3, [sp, #28]
 80093b4:	3301      	adds	r3, #1
 80093b6:	9307      	str	r3, [sp, #28]
 80093b8:	e774      	b.n	80092a4 <_dtoa_r+0x9ac>
 80093ba:	f000 f9c3 	bl	8009744 <__multadd>
 80093be:	4629      	mov	r1, r5
 80093c0:	4607      	mov	r7, r0
 80093c2:	2300      	movs	r3, #0
 80093c4:	220a      	movs	r2, #10
 80093c6:	4658      	mov	r0, fp
 80093c8:	f000 f9bc 	bl	8009744 <__multadd>
 80093cc:	4605      	mov	r5, r0
 80093ce:	e7f0      	b.n	80093b2 <_dtoa_r+0xaba>
 80093d0:	9b00      	ldr	r3, [sp, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	bfcc      	ite	gt
 80093d6:	461e      	movgt	r6, r3
 80093d8:	2601      	movle	r6, #1
 80093da:	4456      	add	r6, sl
 80093dc:	2700      	movs	r7, #0
 80093de:	4649      	mov	r1, r9
 80093e0:	2201      	movs	r2, #1
 80093e2:	4658      	mov	r0, fp
 80093e4:	f000 fb5a 	bl	8009a9c <__lshift>
 80093e8:	4621      	mov	r1, r4
 80093ea:	4681      	mov	r9, r0
 80093ec:	f000 fbc2 	bl	8009b74 <__mcmp>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	dcb0      	bgt.n	8009356 <_dtoa_r+0xa5e>
 80093f4:	d102      	bne.n	80093fc <_dtoa_r+0xb04>
 80093f6:	f018 0f01 	tst.w	r8, #1
 80093fa:	d1ac      	bne.n	8009356 <_dtoa_r+0xa5e>
 80093fc:	4633      	mov	r3, r6
 80093fe:	461e      	mov	r6, r3
 8009400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009404:	2a30      	cmp	r2, #48	@ 0x30
 8009406:	d0fa      	beq.n	80093fe <_dtoa_r+0xb06>
 8009408:	e5c2      	b.n	8008f90 <_dtoa_r+0x698>
 800940a:	459a      	cmp	sl, r3
 800940c:	d1a4      	bne.n	8009358 <_dtoa_r+0xa60>
 800940e:	9b04      	ldr	r3, [sp, #16]
 8009410:	3301      	adds	r3, #1
 8009412:	9304      	str	r3, [sp, #16]
 8009414:	2331      	movs	r3, #49	@ 0x31
 8009416:	f88a 3000 	strb.w	r3, [sl]
 800941a:	e5b9      	b.n	8008f90 <_dtoa_r+0x698>
 800941c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800941e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800947c <_dtoa_r+0xb84>
 8009422:	b11b      	cbz	r3, 800942c <_dtoa_r+0xb34>
 8009424:	f10a 0308 	add.w	r3, sl, #8
 8009428:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	4650      	mov	r0, sl
 800942e:	b019      	add	sp, #100	@ 0x64
 8009430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009436:	2b01      	cmp	r3, #1
 8009438:	f77f ae37 	ble.w	80090aa <_dtoa_r+0x7b2>
 800943c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800943e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009440:	2001      	movs	r0, #1
 8009442:	e655      	b.n	80090f0 <_dtoa_r+0x7f8>
 8009444:	9b00      	ldr	r3, [sp, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	f77f aed6 	ble.w	80091f8 <_dtoa_r+0x900>
 800944c:	4656      	mov	r6, sl
 800944e:	4621      	mov	r1, r4
 8009450:	4648      	mov	r0, r9
 8009452:	f7ff f9c8 	bl	80087e6 <quorem>
 8009456:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800945a:	f806 8b01 	strb.w	r8, [r6], #1
 800945e:	9b00      	ldr	r3, [sp, #0]
 8009460:	eba6 020a 	sub.w	r2, r6, sl
 8009464:	4293      	cmp	r3, r2
 8009466:	ddb3      	ble.n	80093d0 <_dtoa_r+0xad8>
 8009468:	4649      	mov	r1, r9
 800946a:	2300      	movs	r3, #0
 800946c:	220a      	movs	r2, #10
 800946e:	4658      	mov	r0, fp
 8009470:	f000 f968 	bl	8009744 <__multadd>
 8009474:	4681      	mov	r9, r0
 8009476:	e7ea      	b.n	800944e <_dtoa_r+0xb56>
 8009478:	0800a9d0 	.word	0x0800a9d0
 800947c:	0800a954 	.word	0x0800a954

08009480 <_free_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4605      	mov	r5, r0
 8009484:	2900      	cmp	r1, #0
 8009486:	d041      	beq.n	800950c <_free_r+0x8c>
 8009488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800948c:	1f0c      	subs	r4, r1, #4
 800948e:	2b00      	cmp	r3, #0
 8009490:	bfb8      	it	lt
 8009492:	18e4      	addlt	r4, r4, r3
 8009494:	f000 f8e8 	bl	8009668 <__malloc_lock>
 8009498:	4a1d      	ldr	r2, [pc, #116]	@ (8009510 <_free_r+0x90>)
 800949a:	6813      	ldr	r3, [r2, #0]
 800949c:	b933      	cbnz	r3, 80094ac <_free_r+0x2c>
 800949e:	6063      	str	r3, [r4, #4]
 80094a0:	6014      	str	r4, [r2, #0]
 80094a2:	4628      	mov	r0, r5
 80094a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094a8:	f000 b8e4 	b.w	8009674 <__malloc_unlock>
 80094ac:	42a3      	cmp	r3, r4
 80094ae:	d908      	bls.n	80094c2 <_free_r+0x42>
 80094b0:	6820      	ldr	r0, [r4, #0]
 80094b2:	1821      	adds	r1, r4, r0
 80094b4:	428b      	cmp	r3, r1
 80094b6:	bf01      	itttt	eq
 80094b8:	6819      	ldreq	r1, [r3, #0]
 80094ba:	685b      	ldreq	r3, [r3, #4]
 80094bc:	1809      	addeq	r1, r1, r0
 80094be:	6021      	streq	r1, [r4, #0]
 80094c0:	e7ed      	b.n	800949e <_free_r+0x1e>
 80094c2:	461a      	mov	r2, r3
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	b10b      	cbz	r3, 80094cc <_free_r+0x4c>
 80094c8:	42a3      	cmp	r3, r4
 80094ca:	d9fa      	bls.n	80094c2 <_free_r+0x42>
 80094cc:	6811      	ldr	r1, [r2, #0]
 80094ce:	1850      	adds	r0, r2, r1
 80094d0:	42a0      	cmp	r0, r4
 80094d2:	d10b      	bne.n	80094ec <_free_r+0x6c>
 80094d4:	6820      	ldr	r0, [r4, #0]
 80094d6:	4401      	add	r1, r0
 80094d8:	1850      	adds	r0, r2, r1
 80094da:	4283      	cmp	r3, r0
 80094dc:	6011      	str	r1, [r2, #0]
 80094de:	d1e0      	bne.n	80094a2 <_free_r+0x22>
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	6053      	str	r3, [r2, #4]
 80094e6:	4408      	add	r0, r1
 80094e8:	6010      	str	r0, [r2, #0]
 80094ea:	e7da      	b.n	80094a2 <_free_r+0x22>
 80094ec:	d902      	bls.n	80094f4 <_free_r+0x74>
 80094ee:	230c      	movs	r3, #12
 80094f0:	602b      	str	r3, [r5, #0]
 80094f2:	e7d6      	b.n	80094a2 <_free_r+0x22>
 80094f4:	6820      	ldr	r0, [r4, #0]
 80094f6:	1821      	adds	r1, r4, r0
 80094f8:	428b      	cmp	r3, r1
 80094fa:	bf04      	itt	eq
 80094fc:	6819      	ldreq	r1, [r3, #0]
 80094fe:	685b      	ldreq	r3, [r3, #4]
 8009500:	6063      	str	r3, [r4, #4]
 8009502:	bf04      	itt	eq
 8009504:	1809      	addeq	r1, r1, r0
 8009506:	6021      	streq	r1, [r4, #0]
 8009508:	6054      	str	r4, [r2, #4]
 800950a:	e7ca      	b.n	80094a2 <_free_r+0x22>
 800950c:	bd38      	pop	{r3, r4, r5, pc}
 800950e:	bf00      	nop
 8009510:	20002014 	.word	0x20002014

08009514 <malloc>:
 8009514:	4b02      	ldr	r3, [pc, #8]	@ (8009520 <malloc+0xc>)
 8009516:	4601      	mov	r1, r0
 8009518:	6818      	ldr	r0, [r3, #0]
 800951a:	f000 b825 	b.w	8009568 <_malloc_r>
 800951e:	bf00      	nop
 8009520:	20000108 	.word	0x20000108

08009524 <sbrk_aligned>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	4e0f      	ldr	r6, [pc, #60]	@ (8009564 <sbrk_aligned+0x40>)
 8009528:	460c      	mov	r4, r1
 800952a:	6831      	ldr	r1, [r6, #0]
 800952c:	4605      	mov	r5, r0
 800952e:	b911      	cbnz	r1, 8009536 <sbrk_aligned+0x12>
 8009530:	f000 fe46 	bl	800a1c0 <_sbrk_r>
 8009534:	6030      	str	r0, [r6, #0]
 8009536:	4621      	mov	r1, r4
 8009538:	4628      	mov	r0, r5
 800953a:	f000 fe41 	bl	800a1c0 <_sbrk_r>
 800953e:	1c43      	adds	r3, r0, #1
 8009540:	d103      	bne.n	800954a <sbrk_aligned+0x26>
 8009542:	f04f 34ff 	mov.w	r4, #4294967295
 8009546:	4620      	mov	r0, r4
 8009548:	bd70      	pop	{r4, r5, r6, pc}
 800954a:	1cc4      	adds	r4, r0, #3
 800954c:	f024 0403 	bic.w	r4, r4, #3
 8009550:	42a0      	cmp	r0, r4
 8009552:	d0f8      	beq.n	8009546 <sbrk_aligned+0x22>
 8009554:	1a21      	subs	r1, r4, r0
 8009556:	4628      	mov	r0, r5
 8009558:	f000 fe32 	bl	800a1c0 <_sbrk_r>
 800955c:	3001      	adds	r0, #1
 800955e:	d1f2      	bne.n	8009546 <sbrk_aligned+0x22>
 8009560:	e7ef      	b.n	8009542 <sbrk_aligned+0x1e>
 8009562:	bf00      	nop
 8009564:	20002010 	.word	0x20002010

08009568 <_malloc_r>:
 8009568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800956c:	1ccd      	adds	r5, r1, #3
 800956e:	f025 0503 	bic.w	r5, r5, #3
 8009572:	3508      	adds	r5, #8
 8009574:	2d0c      	cmp	r5, #12
 8009576:	bf38      	it	cc
 8009578:	250c      	movcc	r5, #12
 800957a:	2d00      	cmp	r5, #0
 800957c:	4606      	mov	r6, r0
 800957e:	db01      	blt.n	8009584 <_malloc_r+0x1c>
 8009580:	42a9      	cmp	r1, r5
 8009582:	d904      	bls.n	800958e <_malloc_r+0x26>
 8009584:	230c      	movs	r3, #12
 8009586:	6033      	str	r3, [r6, #0]
 8009588:	2000      	movs	r0, #0
 800958a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800958e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009664 <_malloc_r+0xfc>
 8009592:	f000 f869 	bl	8009668 <__malloc_lock>
 8009596:	f8d8 3000 	ldr.w	r3, [r8]
 800959a:	461c      	mov	r4, r3
 800959c:	bb44      	cbnz	r4, 80095f0 <_malloc_r+0x88>
 800959e:	4629      	mov	r1, r5
 80095a0:	4630      	mov	r0, r6
 80095a2:	f7ff ffbf 	bl	8009524 <sbrk_aligned>
 80095a6:	1c43      	adds	r3, r0, #1
 80095a8:	4604      	mov	r4, r0
 80095aa:	d158      	bne.n	800965e <_malloc_r+0xf6>
 80095ac:	f8d8 4000 	ldr.w	r4, [r8]
 80095b0:	4627      	mov	r7, r4
 80095b2:	2f00      	cmp	r7, #0
 80095b4:	d143      	bne.n	800963e <_malloc_r+0xd6>
 80095b6:	2c00      	cmp	r4, #0
 80095b8:	d04b      	beq.n	8009652 <_malloc_r+0xea>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	4639      	mov	r1, r7
 80095be:	4630      	mov	r0, r6
 80095c0:	eb04 0903 	add.w	r9, r4, r3
 80095c4:	f000 fdfc 	bl	800a1c0 <_sbrk_r>
 80095c8:	4581      	cmp	r9, r0
 80095ca:	d142      	bne.n	8009652 <_malloc_r+0xea>
 80095cc:	6821      	ldr	r1, [r4, #0]
 80095ce:	1a6d      	subs	r5, r5, r1
 80095d0:	4629      	mov	r1, r5
 80095d2:	4630      	mov	r0, r6
 80095d4:	f7ff ffa6 	bl	8009524 <sbrk_aligned>
 80095d8:	3001      	adds	r0, #1
 80095da:	d03a      	beq.n	8009652 <_malloc_r+0xea>
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	442b      	add	r3, r5
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	f8d8 3000 	ldr.w	r3, [r8]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	bb62      	cbnz	r2, 8009644 <_malloc_r+0xdc>
 80095ea:	f8c8 7000 	str.w	r7, [r8]
 80095ee:	e00f      	b.n	8009610 <_malloc_r+0xa8>
 80095f0:	6822      	ldr	r2, [r4, #0]
 80095f2:	1b52      	subs	r2, r2, r5
 80095f4:	d420      	bmi.n	8009638 <_malloc_r+0xd0>
 80095f6:	2a0b      	cmp	r2, #11
 80095f8:	d917      	bls.n	800962a <_malloc_r+0xc2>
 80095fa:	1961      	adds	r1, r4, r5
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	6025      	str	r5, [r4, #0]
 8009600:	bf18      	it	ne
 8009602:	6059      	strne	r1, [r3, #4]
 8009604:	6863      	ldr	r3, [r4, #4]
 8009606:	bf08      	it	eq
 8009608:	f8c8 1000 	streq.w	r1, [r8]
 800960c:	5162      	str	r2, [r4, r5]
 800960e:	604b      	str	r3, [r1, #4]
 8009610:	4630      	mov	r0, r6
 8009612:	f000 f82f 	bl	8009674 <__malloc_unlock>
 8009616:	f104 000b 	add.w	r0, r4, #11
 800961a:	1d23      	adds	r3, r4, #4
 800961c:	f020 0007 	bic.w	r0, r0, #7
 8009620:	1ac2      	subs	r2, r0, r3
 8009622:	bf1c      	itt	ne
 8009624:	1a1b      	subne	r3, r3, r0
 8009626:	50a3      	strne	r3, [r4, r2]
 8009628:	e7af      	b.n	800958a <_malloc_r+0x22>
 800962a:	6862      	ldr	r2, [r4, #4]
 800962c:	42a3      	cmp	r3, r4
 800962e:	bf0c      	ite	eq
 8009630:	f8c8 2000 	streq.w	r2, [r8]
 8009634:	605a      	strne	r2, [r3, #4]
 8009636:	e7eb      	b.n	8009610 <_malloc_r+0xa8>
 8009638:	4623      	mov	r3, r4
 800963a:	6864      	ldr	r4, [r4, #4]
 800963c:	e7ae      	b.n	800959c <_malloc_r+0x34>
 800963e:	463c      	mov	r4, r7
 8009640:	687f      	ldr	r7, [r7, #4]
 8009642:	e7b6      	b.n	80095b2 <_malloc_r+0x4a>
 8009644:	461a      	mov	r2, r3
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	42a3      	cmp	r3, r4
 800964a:	d1fb      	bne.n	8009644 <_malloc_r+0xdc>
 800964c:	2300      	movs	r3, #0
 800964e:	6053      	str	r3, [r2, #4]
 8009650:	e7de      	b.n	8009610 <_malloc_r+0xa8>
 8009652:	230c      	movs	r3, #12
 8009654:	6033      	str	r3, [r6, #0]
 8009656:	4630      	mov	r0, r6
 8009658:	f000 f80c 	bl	8009674 <__malloc_unlock>
 800965c:	e794      	b.n	8009588 <_malloc_r+0x20>
 800965e:	6005      	str	r5, [r0, #0]
 8009660:	e7d6      	b.n	8009610 <_malloc_r+0xa8>
 8009662:	bf00      	nop
 8009664:	20002014 	.word	0x20002014

08009668 <__malloc_lock>:
 8009668:	4801      	ldr	r0, [pc, #4]	@ (8009670 <__malloc_lock+0x8>)
 800966a:	f7ff b8ba 	b.w	80087e2 <__retarget_lock_acquire_recursive>
 800966e:	bf00      	nop
 8009670:	2000200c 	.word	0x2000200c

08009674 <__malloc_unlock>:
 8009674:	4801      	ldr	r0, [pc, #4]	@ (800967c <__malloc_unlock+0x8>)
 8009676:	f7ff b8b5 	b.w	80087e4 <__retarget_lock_release_recursive>
 800967a:	bf00      	nop
 800967c:	2000200c 	.word	0x2000200c

08009680 <_Balloc>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	69c6      	ldr	r6, [r0, #28]
 8009684:	4604      	mov	r4, r0
 8009686:	460d      	mov	r5, r1
 8009688:	b976      	cbnz	r6, 80096a8 <_Balloc+0x28>
 800968a:	2010      	movs	r0, #16
 800968c:	f7ff ff42 	bl	8009514 <malloc>
 8009690:	4602      	mov	r2, r0
 8009692:	61e0      	str	r0, [r4, #28]
 8009694:	b920      	cbnz	r0, 80096a0 <_Balloc+0x20>
 8009696:	4b18      	ldr	r3, [pc, #96]	@ (80096f8 <_Balloc+0x78>)
 8009698:	4818      	ldr	r0, [pc, #96]	@ (80096fc <_Balloc+0x7c>)
 800969a:	216b      	movs	r1, #107	@ 0x6b
 800969c:	f000 fdae 	bl	800a1fc <__assert_func>
 80096a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096a4:	6006      	str	r6, [r0, #0]
 80096a6:	60c6      	str	r6, [r0, #12]
 80096a8:	69e6      	ldr	r6, [r4, #28]
 80096aa:	68f3      	ldr	r3, [r6, #12]
 80096ac:	b183      	cbz	r3, 80096d0 <_Balloc+0x50>
 80096ae:	69e3      	ldr	r3, [r4, #28]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096b6:	b9b8      	cbnz	r0, 80096e8 <_Balloc+0x68>
 80096b8:	2101      	movs	r1, #1
 80096ba:	fa01 f605 	lsl.w	r6, r1, r5
 80096be:	1d72      	adds	r2, r6, #5
 80096c0:	0092      	lsls	r2, r2, #2
 80096c2:	4620      	mov	r0, r4
 80096c4:	f000 fdb8 	bl	800a238 <_calloc_r>
 80096c8:	b160      	cbz	r0, 80096e4 <_Balloc+0x64>
 80096ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096ce:	e00e      	b.n	80096ee <_Balloc+0x6e>
 80096d0:	2221      	movs	r2, #33	@ 0x21
 80096d2:	2104      	movs	r1, #4
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 fdaf 	bl	800a238 <_calloc_r>
 80096da:	69e3      	ldr	r3, [r4, #28]
 80096dc:	60f0      	str	r0, [r6, #12]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1e4      	bne.n	80096ae <_Balloc+0x2e>
 80096e4:	2000      	movs	r0, #0
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	6802      	ldr	r2, [r0, #0]
 80096ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096ee:	2300      	movs	r3, #0
 80096f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096f4:	e7f7      	b.n	80096e6 <_Balloc+0x66>
 80096f6:	bf00      	nop
 80096f8:	0800a961 	.word	0x0800a961
 80096fc:	0800a9e1 	.word	0x0800a9e1

08009700 <_Bfree>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	69c6      	ldr	r6, [r0, #28]
 8009704:	4605      	mov	r5, r0
 8009706:	460c      	mov	r4, r1
 8009708:	b976      	cbnz	r6, 8009728 <_Bfree+0x28>
 800970a:	2010      	movs	r0, #16
 800970c:	f7ff ff02 	bl	8009514 <malloc>
 8009710:	4602      	mov	r2, r0
 8009712:	61e8      	str	r0, [r5, #28]
 8009714:	b920      	cbnz	r0, 8009720 <_Bfree+0x20>
 8009716:	4b09      	ldr	r3, [pc, #36]	@ (800973c <_Bfree+0x3c>)
 8009718:	4809      	ldr	r0, [pc, #36]	@ (8009740 <_Bfree+0x40>)
 800971a:	218f      	movs	r1, #143	@ 0x8f
 800971c:	f000 fd6e 	bl	800a1fc <__assert_func>
 8009720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009724:	6006      	str	r6, [r0, #0]
 8009726:	60c6      	str	r6, [r0, #12]
 8009728:	b13c      	cbz	r4, 800973a <_Bfree+0x3a>
 800972a:	69eb      	ldr	r3, [r5, #28]
 800972c:	6862      	ldr	r2, [r4, #4]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009734:	6021      	str	r1, [r4, #0]
 8009736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800973a:	bd70      	pop	{r4, r5, r6, pc}
 800973c:	0800a961 	.word	0x0800a961
 8009740:	0800a9e1 	.word	0x0800a9e1

08009744 <__multadd>:
 8009744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009748:	690d      	ldr	r5, [r1, #16]
 800974a:	4607      	mov	r7, r0
 800974c:	460c      	mov	r4, r1
 800974e:	461e      	mov	r6, r3
 8009750:	f101 0c14 	add.w	ip, r1, #20
 8009754:	2000      	movs	r0, #0
 8009756:	f8dc 3000 	ldr.w	r3, [ip]
 800975a:	b299      	uxth	r1, r3
 800975c:	fb02 6101 	mla	r1, r2, r1, r6
 8009760:	0c1e      	lsrs	r6, r3, #16
 8009762:	0c0b      	lsrs	r3, r1, #16
 8009764:	fb02 3306 	mla	r3, r2, r6, r3
 8009768:	b289      	uxth	r1, r1
 800976a:	3001      	adds	r0, #1
 800976c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009770:	4285      	cmp	r5, r0
 8009772:	f84c 1b04 	str.w	r1, [ip], #4
 8009776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800977a:	dcec      	bgt.n	8009756 <__multadd+0x12>
 800977c:	b30e      	cbz	r6, 80097c2 <__multadd+0x7e>
 800977e:	68a3      	ldr	r3, [r4, #8]
 8009780:	42ab      	cmp	r3, r5
 8009782:	dc19      	bgt.n	80097b8 <__multadd+0x74>
 8009784:	6861      	ldr	r1, [r4, #4]
 8009786:	4638      	mov	r0, r7
 8009788:	3101      	adds	r1, #1
 800978a:	f7ff ff79 	bl	8009680 <_Balloc>
 800978e:	4680      	mov	r8, r0
 8009790:	b928      	cbnz	r0, 800979e <__multadd+0x5a>
 8009792:	4602      	mov	r2, r0
 8009794:	4b0c      	ldr	r3, [pc, #48]	@ (80097c8 <__multadd+0x84>)
 8009796:	480d      	ldr	r0, [pc, #52]	@ (80097cc <__multadd+0x88>)
 8009798:	21ba      	movs	r1, #186	@ 0xba
 800979a:	f000 fd2f 	bl	800a1fc <__assert_func>
 800979e:	6922      	ldr	r2, [r4, #16]
 80097a0:	3202      	adds	r2, #2
 80097a2:	f104 010c 	add.w	r1, r4, #12
 80097a6:	0092      	lsls	r2, r2, #2
 80097a8:	300c      	adds	r0, #12
 80097aa:	f000 fd19 	bl	800a1e0 <memcpy>
 80097ae:	4621      	mov	r1, r4
 80097b0:	4638      	mov	r0, r7
 80097b2:	f7ff ffa5 	bl	8009700 <_Bfree>
 80097b6:	4644      	mov	r4, r8
 80097b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097bc:	3501      	adds	r5, #1
 80097be:	615e      	str	r6, [r3, #20]
 80097c0:	6125      	str	r5, [r4, #16]
 80097c2:	4620      	mov	r0, r4
 80097c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c8:	0800a9d0 	.word	0x0800a9d0
 80097cc:	0800a9e1 	.word	0x0800a9e1

080097d0 <__hi0bits>:
 80097d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80097d4:	4603      	mov	r3, r0
 80097d6:	bf36      	itet	cc
 80097d8:	0403      	lslcc	r3, r0, #16
 80097da:	2000      	movcs	r0, #0
 80097dc:	2010      	movcc	r0, #16
 80097de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097e2:	bf3c      	itt	cc
 80097e4:	021b      	lslcc	r3, r3, #8
 80097e6:	3008      	addcc	r0, #8
 80097e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097ec:	bf3c      	itt	cc
 80097ee:	011b      	lslcc	r3, r3, #4
 80097f0:	3004      	addcc	r0, #4
 80097f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097f6:	bf3c      	itt	cc
 80097f8:	009b      	lslcc	r3, r3, #2
 80097fa:	3002      	addcc	r0, #2
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	db05      	blt.n	800980c <__hi0bits+0x3c>
 8009800:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009804:	f100 0001 	add.w	r0, r0, #1
 8009808:	bf08      	it	eq
 800980a:	2020      	moveq	r0, #32
 800980c:	4770      	bx	lr

0800980e <__lo0bits>:
 800980e:	6803      	ldr	r3, [r0, #0]
 8009810:	4602      	mov	r2, r0
 8009812:	f013 0007 	ands.w	r0, r3, #7
 8009816:	d00b      	beq.n	8009830 <__lo0bits+0x22>
 8009818:	07d9      	lsls	r1, r3, #31
 800981a:	d421      	bmi.n	8009860 <__lo0bits+0x52>
 800981c:	0798      	lsls	r0, r3, #30
 800981e:	bf49      	itett	mi
 8009820:	085b      	lsrmi	r3, r3, #1
 8009822:	089b      	lsrpl	r3, r3, #2
 8009824:	2001      	movmi	r0, #1
 8009826:	6013      	strmi	r3, [r2, #0]
 8009828:	bf5c      	itt	pl
 800982a:	6013      	strpl	r3, [r2, #0]
 800982c:	2002      	movpl	r0, #2
 800982e:	4770      	bx	lr
 8009830:	b299      	uxth	r1, r3
 8009832:	b909      	cbnz	r1, 8009838 <__lo0bits+0x2a>
 8009834:	0c1b      	lsrs	r3, r3, #16
 8009836:	2010      	movs	r0, #16
 8009838:	b2d9      	uxtb	r1, r3
 800983a:	b909      	cbnz	r1, 8009840 <__lo0bits+0x32>
 800983c:	3008      	adds	r0, #8
 800983e:	0a1b      	lsrs	r3, r3, #8
 8009840:	0719      	lsls	r1, r3, #28
 8009842:	bf04      	itt	eq
 8009844:	091b      	lsreq	r3, r3, #4
 8009846:	3004      	addeq	r0, #4
 8009848:	0799      	lsls	r1, r3, #30
 800984a:	bf04      	itt	eq
 800984c:	089b      	lsreq	r3, r3, #2
 800984e:	3002      	addeq	r0, #2
 8009850:	07d9      	lsls	r1, r3, #31
 8009852:	d403      	bmi.n	800985c <__lo0bits+0x4e>
 8009854:	085b      	lsrs	r3, r3, #1
 8009856:	f100 0001 	add.w	r0, r0, #1
 800985a:	d003      	beq.n	8009864 <__lo0bits+0x56>
 800985c:	6013      	str	r3, [r2, #0]
 800985e:	4770      	bx	lr
 8009860:	2000      	movs	r0, #0
 8009862:	4770      	bx	lr
 8009864:	2020      	movs	r0, #32
 8009866:	4770      	bx	lr

08009868 <__i2b>:
 8009868:	b510      	push	{r4, lr}
 800986a:	460c      	mov	r4, r1
 800986c:	2101      	movs	r1, #1
 800986e:	f7ff ff07 	bl	8009680 <_Balloc>
 8009872:	4602      	mov	r2, r0
 8009874:	b928      	cbnz	r0, 8009882 <__i2b+0x1a>
 8009876:	4b05      	ldr	r3, [pc, #20]	@ (800988c <__i2b+0x24>)
 8009878:	4805      	ldr	r0, [pc, #20]	@ (8009890 <__i2b+0x28>)
 800987a:	f240 1145 	movw	r1, #325	@ 0x145
 800987e:	f000 fcbd 	bl	800a1fc <__assert_func>
 8009882:	2301      	movs	r3, #1
 8009884:	6144      	str	r4, [r0, #20]
 8009886:	6103      	str	r3, [r0, #16]
 8009888:	bd10      	pop	{r4, pc}
 800988a:	bf00      	nop
 800988c:	0800a9d0 	.word	0x0800a9d0
 8009890:	0800a9e1 	.word	0x0800a9e1

08009894 <__multiply>:
 8009894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	4614      	mov	r4, r2
 800989a:	690a      	ldr	r2, [r1, #16]
 800989c:	6923      	ldr	r3, [r4, #16]
 800989e:	429a      	cmp	r2, r3
 80098a0:	bfa8      	it	ge
 80098a2:	4623      	movge	r3, r4
 80098a4:	460f      	mov	r7, r1
 80098a6:	bfa4      	itt	ge
 80098a8:	460c      	movge	r4, r1
 80098aa:	461f      	movge	r7, r3
 80098ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80098b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80098b4:	68a3      	ldr	r3, [r4, #8]
 80098b6:	6861      	ldr	r1, [r4, #4]
 80098b8:	eb0a 0609 	add.w	r6, sl, r9
 80098bc:	42b3      	cmp	r3, r6
 80098be:	b085      	sub	sp, #20
 80098c0:	bfb8      	it	lt
 80098c2:	3101      	addlt	r1, #1
 80098c4:	f7ff fedc 	bl	8009680 <_Balloc>
 80098c8:	b930      	cbnz	r0, 80098d8 <__multiply+0x44>
 80098ca:	4602      	mov	r2, r0
 80098cc:	4b44      	ldr	r3, [pc, #272]	@ (80099e0 <__multiply+0x14c>)
 80098ce:	4845      	ldr	r0, [pc, #276]	@ (80099e4 <__multiply+0x150>)
 80098d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80098d4:	f000 fc92 	bl	800a1fc <__assert_func>
 80098d8:	f100 0514 	add.w	r5, r0, #20
 80098dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098e0:	462b      	mov	r3, r5
 80098e2:	2200      	movs	r2, #0
 80098e4:	4543      	cmp	r3, r8
 80098e6:	d321      	bcc.n	800992c <__multiply+0x98>
 80098e8:	f107 0114 	add.w	r1, r7, #20
 80098ec:	f104 0214 	add.w	r2, r4, #20
 80098f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80098f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80098f8:	9302      	str	r3, [sp, #8]
 80098fa:	1b13      	subs	r3, r2, r4
 80098fc:	3b15      	subs	r3, #21
 80098fe:	f023 0303 	bic.w	r3, r3, #3
 8009902:	3304      	adds	r3, #4
 8009904:	f104 0715 	add.w	r7, r4, #21
 8009908:	42ba      	cmp	r2, r7
 800990a:	bf38      	it	cc
 800990c:	2304      	movcc	r3, #4
 800990e:	9301      	str	r3, [sp, #4]
 8009910:	9b02      	ldr	r3, [sp, #8]
 8009912:	9103      	str	r1, [sp, #12]
 8009914:	428b      	cmp	r3, r1
 8009916:	d80c      	bhi.n	8009932 <__multiply+0x9e>
 8009918:	2e00      	cmp	r6, #0
 800991a:	dd03      	ble.n	8009924 <__multiply+0x90>
 800991c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009920:	2b00      	cmp	r3, #0
 8009922:	d05b      	beq.n	80099dc <__multiply+0x148>
 8009924:	6106      	str	r6, [r0, #16]
 8009926:	b005      	add	sp, #20
 8009928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800992c:	f843 2b04 	str.w	r2, [r3], #4
 8009930:	e7d8      	b.n	80098e4 <__multiply+0x50>
 8009932:	f8b1 a000 	ldrh.w	sl, [r1]
 8009936:	f1ba 0f00 	cmp.w	sl, #0
 800993a:	d024      	beq.n	8009986 <__multiply+0xf2>
 800993c:	f104 0e14 	add.w	lr, r4, #20
 8009940:	46a9      	mov	r9, r5
 8009942:	f04f 0c00 	mov.w	ip, #0
 8009946:	f85e 7b04 	ldr.w	r7, [lr], #4
 800994a:	f8d9 3000 	ldr.w	r3, [r9]
 800994e:	fa1f fb87 	uxth.w	fp, r7
 8009952:	b29b      	uxth	r3, r3
 8009954:	fb0a 330b 	mla	r3, sl, fp, r3
 8009958:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800995c:	f8d9 7000 	ldr.w	r7, [r9]
 8009960:	4463      	add	r3, ip
 8009962:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009966:	fb0a c70b 	mla	r7, sl, fp, ip
 800996a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800996e:	b29b      	uxth	r3, r3
 8009970:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009974:	4572      	cmp	r2, lr
 8009976:	f849 3b04 	str.w	r3, [r9], #4
 800997a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800997e:	d8e2      	bhi.n	8009946 <__multiply+0xb2>
 8009980:	9b01      	ldr	r3, [sp, #4]
 8009982:	f845 c003 	str.w	ip, [r5, r3]
 8009986:	9b03      	ldr	r3, [sp, #12]
 8009988:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800998c:	3104      	adds	r1, #4
 800998e:	f1b9 0f00 	cmp.w	r9, #0
 8009992:	d021      	beq.n	80099d8 <__multiply+0x144>
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	f104 0c14 	add.w	ip, r4, #20
 800999a:	46ae      	mov	lr, r5
 800999c:	f04f 0a00 	mov.w	sl, #0
 80099a0:	f8bc b000 	ldrh.w	fp, [ip]
 80099a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80099a8:	fb09 770b 	mla	r7, r9, fp, r7
 80099ac:	4457      	add	r7, sl
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80099b4:	f84e 3b04 	str.w	r3, [lr], #4
 80099b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80099bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099c0:	f8be 3000 	ldrh.w	r3, [lr]
 80099c4:	fb09 330a 	mla	r3, r9, sl, r3
 80099c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80099cc:	4562      	cmp	r2, ip
 80099ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099d2:	d8e5      	bhi.n	80099a0 <__multiply+0x10c>
 80099d4:	9f01      	ldr	r7, [sp, #4]
 80099d6:	51eb      	str	r3, [r5, r7]
 80099d8:	3504      	adds	r5, #4
 80099da:	e799      	b.n	8009910 <__multiply+0x7c>
 80099dc:	3e01      	subs	r6, #1
 80099de:	e79b      	b.n	8009918 <__multiply+0x84>
 80099e0:	0800a9d0 	.word	0x0800a9d0
 80099e4:	0800a9e1 	.word	0x0800a9e1

080099e8 <__pow5mult>:
 80099e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099ec:	4615      	mov	r5, r2
 80099ee:	f012 0203 	ands.w	r2, r2, #3
 80099f2:	4607      	mov	r7, r0
 80099f4:	460e      	mov	r6, r1
 80099f6:	d007      	beq.n	8009a08 <__pow5mult+0x20>
 80099f8:	4c25      	ldr	r4, [pc, #148]	@ (8009a90 <__pow5mult+0xa8>)
 80099fa:	3a01      	subs	r2, #1
 80099fc:	2300      	movs	r3, #0
 80099fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a02:	f7ff fe9f 	bl	8009744 <__multadd>
 8009a06:	4606      	mov	r6, r0
 8009a08:	10ad      	asrs	r5, r5, #2
 8009a0a:	d03d      	beq.n	8009a88 <__pow5mult+0xa0>
 8009a0c:	69fc      	ldr	r4, [r7, #28]
 8009a0e:	b97c      	cbnz	r4, 8009a30 <__pow5mult+0x48>
 8009a10:	2010      	movs	r0, #16
 8009a12:	f7ff fd7f 	bl	8009514 <malloc>
 8009a16:	4602      	mov	r2, r0
 8009a18:	61f8      	str	r0, [r7, #28]
 8009a1a:	b928      	cbnz	r0, 8009a28 <__pow5mult+0x40>
 8009a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8009a94 <__pow5mult+0xac>)
 8009a1e:	481e      	ldr	r0, [pc, #120]	@ (8009a98 <__pow5mult+0xb0>)
 8009a20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009a24:	f000 fbea 	bl	800a1fc <__assert_func>
 8009a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a2c:	6004      	str	r4, [r0, #0]
 8009a2e:	60c4      	str	r4, [r0, #12]
 8009a30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a38:	b94c      	cbnz	r4, 8009a4e <__pow5mult+0x66>
 8009a3a:	f240 2171 	movw	r1, #625	@ 0x271
 8009a3e:	4638      	mov	r0, r7
 8009a40:	f7ff ff12 	bl	8009868 <__i2b>
 8009a44:	2300      	movs	r3, #0
 8009a46:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	6003      	str	r3, [r0, #0]
 8009a4e:	f04f 0900 	mov.w	r9, #0
 8009a52:	07eb      	lsls	r3, r5, #31
 8009a54:	d50a      	bpl.n	8009a6c <__pow5mult+0x84>
 8009a56:	4631      	mov	r1, r6
 8009a58:	4622      	mov	r2, r4
 8009a5a:	4638      	mov	r0, r7
 8009a5c:	f7ff ff1a 	bl	8009894 <__multiply>
 8009a60:	4631      	mov	r1, r6
 8009a62:	4680      	mov	r8, r0
 8009a64:	4638      	mov	r0, r7
 8009a66:	f7ff fe4b 	bl	8009700 <_Bfree>
 8009a6a:	4646      	mov	r6, r8
 8009a6c:	106d      	asrs	r5, r5, #1
 8009a6e:	d00b      	beq.n	8009a88 <__pow5mult+0xa0>
 8009a70:	6820      	ldr	r0, [r4, #0]
 8009a72:	b938      	cbnz	r0, 8009a84 <__pow5mult+0x9c>
 8009a74:	4622      	mov	r2, r4
 8009a76:	4621      	mov	r1, r4
 8009a78:	4638      	mov	r0, r7
 8009a7a:	f7ff ff0b 	bl	8009894 <__multiply>
 8009a7e:	6020      	str	r0, [r4, #0]
 8009a80:	f8c0 9000 	str.w	r9, [r0]
 8009a84:	4604      	mov	r4, r0
 8009a86:	e7e4      	b.n	8009a52 <__pow5mult+0x6a>
 8009a88:	4630      	mov	r0, r6
 8009a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a8e:	bf00      	nop
 8009a90:	0800aa3c 	.word	0x0800aa3c
 8009a94:	0800a961 	.word	0x0800a961
 8009a98:	0800a9e1 	.word	0x0800a9e1

08009a9c <__lshift>:
 8009a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	6849      	ldr	r1, [r1, #4]
 8009aa4:	6923      	ldr	r3, [r4, #16]
 8009aa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009aaa:	68a3      	ldr	r3, [r4, #8]
 8009aac:	4607      	mov	r7, r0
 8009aae:	4691      	mov	r9, r2
 8009ab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ab4:	f108 0601 	add.w	r6, r8, #1
 8009ab8:	42b3      	cmp	r3, r6
 8009aba:	db0b      	blt.n	8009ad4 <__lshift+0x38>
 8009abc:	4638      	mov	r0, r7
 8009abe:	f7ff fddf 	bl	8009680 <_Balloc>
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	b948      	cbnz	r0, 8009ada <__lshift+0x3e>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	4b28      	ldr	r3, [pc, #160]	@ (8009b6c <__lshift+0xd0>)
 8009aca:	4829      	ldr	r0, [pc, #164]	@ (8009b70 <__lshift+0xd4>)
 8009acc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009ad0:	f000 fb94 	bl	800a1fc <__assert_func>
 8009ad4:	3101      	adds	r1, #1
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	e7ee      	b.n	8009ab8 <__lshift+0x1c>
 8009ada:	2300      	movs	r3, #0
 8009adc:	f100 0114 	add.w	r1, r0, #20
 8009ae0:	f100 0210 	add.w	r2, r0, #16
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	4553      	cmp	r3, sl
 8009ae8:	db33      	blt.n	8009b52 <__lshift+0xb6>
 8009aea:	6920      	ldr	r0, [r4, #16]
 8009aec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009af0:	f104 0314 	add.w	r3, r4, #20
 8009af4:	f019 091f 	ands.w	r9, r9, #31
 8009af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009afc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b00:	d02b      	beq.n	8009b5a <__lshift+0xbe>
 8009b02:	f1c9 0e20 	rsb	lr, r9, #32
 8009b06:	468a      	mov	sl, r1
 8009b08:	2200      	movs	r2, #0
 8009b0a:	6818      	ldr	r0, [r3, #0]
 8009b0c:	fa00 f009 	lsl.w	r0, r0, r9
 8009b10:	4310      	orrs	r0, r2
 8009b12:	f84a 0b04 	str.w	r0, [sl], #4
 8009b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b1a:	459c      	cmp	ip, r3
 8009b1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b20:	d8f3      	bhi.n	8009b0a <__lshift+0x6e>
 8009b22:	ebac 0304 	sub.w	r3, ip, r4
 8009b26:	3b15      	subs	r3, #21
 8009b28:	f023 0303 	bic.w	r3, r3, #3
 8009b2c:	3304      	adds	r3, #4
 8009b2e:	f104 0015 	add.w	r0, r4, #21
 8009b32:	4584      	cmp	ip, r0
 8009b34:	bf38      	it	cc
 8009b36:	2304      	movcc	r3, #4
 8009b38:	50ca      	str	r2, [r1, r3]
 8009b3a:	b10a      	cbz	r2, 8009b40 <__lshift+0xa4>
 8009b3c:	f108 0602 	add.w	r6, r8, #2
 8009b40:	3e01      	subs	r6, #1
 8009b42:	4638      	mov	r0, r7
 8009b44:	612e      	str	r6, [r5, #16]
 8009b46:	4621      	mov	r1, r4
 8009b48:	f7ff fdda 	bl	8009700 <_Bfree>
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b52:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b56:	3301      	adds	r3, #1
 8009b58:	e7c5      	b.n	8009ae6 <__lshift+0x4a>
 8009b5a:	3904      	subs	r1, #4
 8009b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b60:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b64:	459c      	cmp	ip, r3
 8009b66:	d8f9      	bhi.n	8009b5c <__lshift+0xc0>
 8009b68:	e7ea      	b.n	8009b40 <__lshift+0xa4>
 8009b6a:	bf00      	nop
 8009b6c:	0800a9d0 	.word	0x0800a9d0
 8009b70:	0800a9e1 	.word	0x0800a9e1

08009b74 <__mcmp>:
 8009b74:	690a      	ldr	r2, [r1, #16]
 8009b76:	4603      	mov	r3, r0
 8009b78:	6900      	ldr	r0, [r0, #16]
 8009b7a:	1a80      	subs	r0, r0, r2
 8009b7c:	b530      	push	{r4, r5, lr}
 8009b7e:	d10e      	bne.n	8009b9e <__mcmp+0x2a>
 8009b80:	3314      	adds	r3, #20
 8009b82:	3114      	adds	r1, #20
 8009b84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b94:	4295      	cmp	r5, r2
 8009b96:	d003      	beq.n	8009ba0 <__mcmp+0x2c>
 8009b98:	d205      	bcs.n	8009ba6 <__mcmp+0x32>
 8009b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9e:	bd30      	pop	{r4, r5, pc}
 8009ba0:	42a3      	cmp	r3, r4
 8009ba2:	d3f3      	bcc.n	8009b8c <__mcmp+0x18>
 8009ba4:	e7fb      	b.n	8009b9e <__mcmp+0x2a>
 8009ba6:	2001      	movs	r0, #1
 8009ba8:	e7f9      	b.n	8009b9e <__mcmp+0x2a>
	...

08009bac <__mdiff>:
 8009bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb0:	4689      	mov	r9, r1
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	4648      	mov	r0, r9
 8009bb8:	4614      	mov	r4, r2
 8009bba:	f7ff ffdb 	bl	8009b74 <__mcmp>
 8009bbe:	1e05      	subs	r5, r0, #0
 8009bc0:	d112      	bne.n	8009be8 <__mdiff+0x3c>
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f7ff fd5b 	bl	8009680 <_Balloc>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	b928      	cbnz	r0, 8009bda <__mdiff+0x2e>
 8009bce:	4b3f      	ldr	r3, [pc, #252]	@ (8009ccc <__mdiff+0x120>)
 8009bd0:	f240 2137 	movw	r1, #567	@ 0x237
 8009bd4:	483e      	ldr	r0, [pc, #248]	@ (8009cd0 <__mdiff+0x124>)
 8009bd6:	f000 fb11 	bl	800a1fc <__assert_func>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009be0:	4610      	mov	r0, r2
 8009be2:	b003      	add	sp, #12
 8009be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be8:	bfbc      	itt	lt
 8009bea:	464b      	movlt	r3, r9
 8009bec:	46a1      	movlt	r9, r4
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009bf4:	bfba      	itte	lt
 8009bf6:	461c      	movlt	r4, r3
 8009bf8:	2501      	movlt	r5, #1
 8009bfa:	2500      	movge	r5, #0
 8009bfc:	f7ff fd40 	bl	8009680 <_Balloc>
 8009c00:	4602      	mov	r2, r0
 8009c02:	b918      	cbnz	r0, 8009c0c <__mdiff+0x60>
 8009c04:	4b31      	ldr	r3, [pc, #196]	@ (8009ccc <__mdiff+0x120>)
 8009c06:	f240 2145 	movw	r1, #581	@ 0x245
 8009c0a:	e7e3      	b.n	8009bd4 <__mdiff+0x28>
 8009c0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009c10:	6926      	ldr	r6, [r4, #16]
 8009c12:	60c5      	str	r5, [r0, #12]
 8009c14:	f109 0310 	add.w	r3, r9, #16
 8009c18:	f109 0514 	add.w	r5, r9, #20
 8009c1c:	f104 0e14 	add.w	lr, r4, #20
 8009c20:	f100 0b14 	add.w	fp, r0, #20
 8009c24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009c28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009c2c:	9301      	str	r3, [sp, #4]
 8009c2e:	46d9      	mov	r9, fp
 8009c30:	f04f 0c00 	mov.w	ip, #0
 8009c34:	9b01      	ldr	r3, [sp, #4]
 8009c36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c3e:	9301      	str	r3, [sp, #4]
 8009c40:	fa1f f38a 	uxth.w	r3, sl
 8009c44:	4619      	mov	r1, r3
 8009c46:	b283      	uxth	r3, r0
 8009c48:	1acb      	subs	r3, r1, r3
 8009c4a:	0c00      	lsrs	r0, r0, #16
 8009c4c:	4463      	add	r3, ip
 8009c4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c5c:	4576      	cmp	r6, lr
 8009c5e:	f849 3b04 	str.w	r3, [r9], #4
 8009c62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c66:	d8e5      	bhi.n	8009c34 <__mdiff+0x88>
 8009c68:	1b33      	subs	r3, r6, r4
 8009c6a:	3b15      	subs	r3, #21
 8009c6c:	f023 0303 	bic.w	r3, r3, #3
 8009c70:	3415      	adds	r4, #21
 8009c72:	3304      	adds	r3, #4
 8009c74:	42a6      	cmp	r6, r4
 8009c76:	bf38      	it	cc
 8009c78:	2304      	movcc	r3, #4
 8009c7a:	441d      	add	r5, r3
 8009c7c:	445b      	add	r3, fp
 8009c7e:	461e      	mov	r6, r3
 8009c80:	462c      	mov	r4, r5
 8009c82:	4544      	cmp	r4, r8
 8009c84:	d30e      	bcc.n	8009ca4 <__mdiff+0xf8>
 8009c86:	f108 0103 	add.w	r1, r8, #3
 8009c8a:	1b49      	subs	r1, r1, r5
 8009c8c:	f021 0103 	bic.w	r1, r1, #3
 8009c90:	3d03      	subs	r5, #3
 8009c92:	45a8      	cmp	r8, r5
 8009c94:	bf38      	it	cc
 8009c96:	2100      	movcc	r1, #0
 8009c98:	440b      	add	r3, r1
 8009c9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c9e:	b191      	cbz	r1, 8009cc6 <__mdiff+0x11a>
 8009ca0:	6117      	str	r7, [r2, #16]
 8009ca2:	e79d      	b.n	8009be0 <__mdiff+0x34>
 8009ca4:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ca8:	46e6      	mov	lr, ip
 8009caa:	0c08      	lsrs	r0, r1, #16
 8009cac:	fa1c fc81 	uxtah	ip, ip, r1
 8009cb0:	4471      	add	r1, lr
 8009cb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009cb6:	b289      	uxth	r1, r1
 8009cb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009cbc:	f846 1b04 	str.w	r1, [r6], #4
 8009cc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009cc4:	e7dd      	b.n	8009c82 <__mdiff+0xd6>
 8009cc6:	3f01      	subs	r7, #1
 8009cc8:	e7e7      	b.n	8009c9a <__mdiff+0xee>
 8009cca:	bf00      	nop
 8009ccc:	0800a9d0 	.word	0x0800a9d0
 8009cd0:	0800a9e1 	.word	0x0800a9e1

08009cd4 <__d2b>:
 8009cd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cd8:	460f      	mov	r7, r1
 8009cda:	2101      	movs	r1, #1
 8009cdc:	ec59 8b10 	vmov	r8, r9, d0
 8009ce0:	4616      	mov	r6, r2
 8009ce2:	f7ff fccd 	bl	8009680 <_Balloc>
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	b930      	cbnz	r0, 8009cf8 <__d2b+0x24>
 8009cea:	4602      	mov	r2, r0
 8009cec:	4b23      	ldr	r3, [pc, #140]	@ (8009d7c <__d2b+0xa8>)
 8009cee:	4824      	ldr	r0, [pc, #144]	@ (8009d80 <__d2b+0xac>)
 8009cf0:	f240 310f 	movw	r1, #783	@ 0x30f
 8009cf4:	f000 fa82 	bl	800a1fc <__assert_func>
 8009cf8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009cfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d00:	b10d      	cbz	r5, 8009d06 <__d2b+0x32>
 8009d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d06:	9301      	str	r3, [sp, #4]
 8009d08:	f1b8 0300 	subs.w	r3, r8, #0
 8009d0c:	d023      	beq.n	8009d56 <__d2b+0x82>
 8009d0e:	4668      	mov	r0, sp
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	f7ff fd7c 	bl	800980e <__lo0bits>
 8009d16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d1a:	b1d0      	cbz	r0, 8009d52 <__d2b+0x7e>
 8009d1c:	f1c0 0320 	rsb	r3, r0, #32
 8009d20:	fa02 f303 	lsl.w	r3, r2, r3
 8009d24:	430b      	orrs	r3, r1
 8009d26:	40c2      	lsrs	r2, r0
 8009d28:	6163      	str	r3, [r4, #20]
 8009d2a:	9201      	str	r2, [sp, #4]
 8009d2c:	9b01      	ldr	r3, [sp, #4]
 8009d2e:	61a3      	str	r3, [r4, #24]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	bf0c      	ite	eq
 8009d34:	2201      	moveq	r2, #1
 8009d36:	2202      	movne	r2, #2
 8009d38:	6122      	str	r2, [r4, #16]
 8009d3a:	b1a5      	cbz	r5, 8009d66 <__d2b+0x92>
 8009d3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009d40:	4405      	add	r5, r0
 8009d42:	603d      	str	r5, [r7, #0]
 8009d44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009d48:	6030      	str	r0, [r6, #0]
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	b003      	add	sp, #12
 8009d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d52:	6161      	str	r1, [r4, #20]
 8009d54:	e7ea      	b.n	8009d2c <__d2b+0x58>
 8009d56:	a801      	add	r0, sp, #4
 8009d58:	f7ff fd59 	bl	800980e <__lo0bits>
 8009d5c:	9b01      	ldr	r3, [sp, #4]
 8009d5e:	6163      	str	r3, [r4, #20]
 8009d60:	3020      	adds	r0, #32
 8009d62:	2201      	movs	r2, #1
 8009d64:	e7e8      	b.n	8009d38 <__d2b+0x64>
 8009d66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009d6e:	6038      	str	r0, [r7, #0]
 8009d70:	6918      	ldr	r0, [r3, #16]
 8009d72:	f7ff fd2d 	bl	80097d0 <__hi0bits>
 8009d76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d7a:	e7e5      	b.n	8009d48 <__d2b+0x74>
 8009d7c:	0800a9d0 	.word	0x0800a9d0
 8009d80:	0800a9e1 	.word	0x0800a9e1

08009d84 <__ssputs_r>:
 8009d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d88:	688e      	ldr	r6, [r1, #8]
 8009d8a:	461f      	mov	r7, r3
 8009d8c:	42be      	cmp	r6, r7
 8009d8e:	680b      	ldr	r3, [r1, #0]
 8009d90:	4682      	mov	sl, r0
 8009d92:	460c      	mov	r4, r1
 8009d94:	4690      	mov	r8, r2
 8009d96:	d82d      	bhi.n	8009df4 <__ssputs_r+0x70>
 8009d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009da0:	d026      	beq.n	8009df0 <__ssputs_r+0x6c>
 8009da2:	6965      	ldr	r5, [r4, #20]
 8009da4:	6909      	ldr	r1, [r1, #16]
 8009da6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009daa:	eba3 0901 	sub.w	r9, r3, r1
 8009dae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009db2:	1c7b      	adds	r3, r7, #1
 8009db4:	444b      	add	r3, r9
 8009db6:	106d      	asrs	r5, r5, #1
 8009db8:	429d      	cmp	r5, r3
 8009dba:	bf38      	it	cc
 8009dbc:	461d      	movcc	r5, r3
 8009dbe:	0553      	lsls	r3, r2, #21
 8009dc0:	d527      	bpl.n	8009e12 <__ssputs_r+0x8e>
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	f7ff fbd0 	bl	8009568 <_malloc_r>
 8009dc8:	4606      	mov	r6, r0
 8009dca:	b360      	cbz	r0, 8009e26 <__ssputs_r+0xa2>
 8009dcc:	6921      	ldr	r1, [r4, #16]
 8009dce:	464a      	mov	r2, r9
 8009dd0:	f000 fa06 	bl	800a1e0 <memcpy>
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dde:	81a3      	strh	r3, [r4, #12]
 8009de0:	6126      	str	r6, [r4, #16]
 8009de2:	6165      	str	r5, [r4, #20]
 8009de4:	444e      	add	r6, r9
 8009de6:	eba5 0509 	sub.w	r5, r5, r9
 8009dea:	6026      	str	r6, [r4, #0]
 8009dec:	60a5      	str	r5, [r4, #8]
 8009dee:	463e      	mov	r6, r7
 8009df0:	42be      	cmp	r6, r7
 8009df2:	d900      	bls.n	8009df6 <__ssputs_r+0x72>
 8009df4:	463e      	mov	r6, r7
 8009df6:	6820      	ldr	r0, [r4, #0]
 8009df8:	4632      	mov	r2, r6
 8009dfa:	4641      	mov	r1, r8
 8009dfc:	f000 f9c6 	bl	800a18c <memmove>
 8009e00:	68a3      	ldr	r3, [r4, #8]
 8009e02:	1b9b      	subs	r3, r3, r6
 8009e04:	60a3      	str	r3, [r4, #8]
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	4433      	add	r3, r6
 8009e0a:	6023      	str	r3, [r4, #0]
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e12:	462a      	mov	r2, r5
 8009e14:	f000 fa36 	bl	800a284 <_realloc_r>
 8009e18:	4606      	mov	r6, r0
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d1e0      	bne.n	8009de0 <__ssputs_r+0x5c>
 8009e1e:	6921      	ldr	r1, [r4, #16]
 8009e20:	4650      	mov	r0, sl
 8009e22:	f7ff fb2d 	bl	8009480 <_free_r>
 8009e26:	230c      	movs	r3, #12
 8009e28:	f8ca 3000 	str.w	r3, [sl]
 8009e2c:	89a3      	ldrh	r3, [r4, #12]
 8009e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e32:	81a3      	strh	r3, [r4, #12]
 8009e34:	f04f 30ff 	mov.w	r0, #4294967295
 8009e38:	e7e9      	b.n	8009e0e <__ssputs_r+0x8a>
	...

08009e3c <_svfiprintf_r>:
 8009e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e40:	4698      	mov	r8, r3
 8009e42:	898b      	ldrh	r3, [r1, #12]
 8009e44:	061b      	lsls	r3, r3, #24
 8009e46:	b09d      	sub	sp, #116	@ 0x74
 8009e48:	4607      	mov	r7, r0
 8009e4a:	460d      	mov	r5, r1
 8009e4c:	4614      	mov	r4, r2
 8009e4e:	d510      	bpl.n	8009e72 <_svfiprintf_r+0x36>
 8009e50:	690b      	ldr	r3, [r1, #16]
 8009e52:	b973      	cbnz	r3, 8009e72 <_svfiprintf_r+0x36>
 8009e54:	2140      	movs	r1, #64	@ 0x40
 8009e56:	f7ff fb87 	bl	8009568 <_malloc_r>
 8009e5a:	6028      	str	r0, [r5, #0]
 8009e5c:	6128      	str	r0, [r5, #16]
 8009e5e:	b930      	cbnz	r0, 8009e6e <_svfiprintf_r+0x32>
 8009e60:	230c      	movs	r3, #12
 8009e62:	603b      	str	r3, [r7, #0]
 8009e64:	f04f 30ff 	mov.w	r0, #4294967295
 8009e68:	b01d      	add	sp, #116	@ 0x74
 8009e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6e:	2340      	movs	r3, #64	@ 0x40
 8009e70:	616b      	str	r3, [r5, #20]
 8009e72:	2300      	movs	r3, #0
 8009e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e76:	2320      	movs	r3, #32
 8009e78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e80:	2330      	movs	r3, #48	@ 0x30
 8009e82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a020 <_svfiprintf_r+0x1e4>
 8009e86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e8a:	f04f 0901 	mov.w	r9, #1
 8009e8e:	4623      	mov	r3, r4
 8009e90:	469a      	mov	sl, r3
 8009e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e96:	b10a      	cbz	r2, 8009e9c <_svfiprintf_r+0x60>
 8009e98:	2a25      	cmp	r2, #37	@ 0x25
 8009e9a:	d1f9      	bne.n	8009e90 <_svfiprintf_r+0x54>
 8009e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8009ea0:	d00b      	beq.n	8009eba <_svfiprintf_r+0x7e>
 8009ea2:	465b      	mov	r3, fp
 8009ea4:	4622      	mov	r2, r4
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	4638      	mov	r0, r7
 8009eaa:	f7ff ff6b 	bl	8009d84 <__ssputs_r>
 8009eae:	3001      	adds	r0, #1
 8009eb0:	f000 80a7 	beq.w	800a002 <_svfiprintf_r+0x1c6>
 8009eb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009eb6:	445a      	add	r2, fp
 8009eb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009eba:	f89a 3000 	ldrb.w	r3, [sl]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 809f 	beq.w	800a002 <_svfiprintf_r+0x1c6>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8009eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ece:	f10a 0a01 	add.w	sl, sl, #1
 8009ed2:	9304      	str	r3, [sp, #16]
 8009ed4:	9307      	str	r3, [sp, #28]
 8009ed6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009eda:	931a      	str	r3, [sp, #104]	@ 0x68
 8009edc:	4654      	mov	r4, sl
 8009ede:	2205      	movs	r2, #5
 8009ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee4:	484e      	ldr	r0, [pc, #312]	@ (800a020 <_svfiprintf_r+0x1e4>)
 8009ee6:	f7f6 f973 	bl	80001d0 <memchr>
 8009eea:	9a04      	ldr	r2, [sp, #16]
 8009eec:	b9d8      	cbnz	r0, 8009f26 <_svfiprintf_r+0xea>
 8009eee:	06d0      	lsls	r0, r2, #27
 8009ef0:	bf44      	itt	mi
 8009ef2:	2320      	movmi	r3, #32
 8009ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ef8:	0711      	lsls	r1, r2, #28
 8009efa:	bf44      	itt	mi
 8009efc:	232b      	movmi	r3, #43	@ 0x2b
 8009efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f02:	f89a 3000 	ldrb.w	r3, [sl]
 8009f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f08:	d015      	beq.n	8009f36 <_svfiprintf_r+0xfa>
 8009f0a:	9a07      	ldr	r2, [sp, #28]
 8009f0c:	4654      	mov	r4, sl
 8009f0e:	2000      	movs	r0, #0
 8009f10:	f04f 0c0a 	mov.w	ip, #10
 8009f14:	4621      	mov	r1, r4
 8009f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f1a:	3b30      	subs	r3, #48	@ 0x30
 8009f1c:	2b09      	cmp	r3, #9
 8009f1e:	d94b      	bls.n	8009fb8 <_svfiprintf_r+0x17c>
 8009f20:	b1b0      	cbz	r0, 8009f50 <_svfiprintf_r+0x114>
 8009f22:	9207      	str	r2, [sp, #28]
 8009f24:	e014      	b.n	8009f50 <_svfiprintf_r+0x114>
 8009f26:	eba0 0308 	sub.w	r3, r0, r8
 8009f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	9304      	str	r3, [sp, #16]
 8009f32:	46a2      	mov	sl, r4
 8009f34:	e7d2      	b.n	8009edc <_svfiprintf_r+0xa0>
 8009f36:	9b03      	ldr	r3, [sp, #12]
 8009f38:	1d19      	adds	r1, r3, #4
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	9103      	str	r1, [sp, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	bfbb      	ittet	lt
 8009f42:	425b      	neglt	r3, r3
 8009f44:	f042 0202 	orrlt.w	r2, r2, #2
 8009f48:	9307      	strge	r3, [sp, #28]
 8009f4a:	9307      	strlt	r3, [sp, #28]
 8009f4c:	bfb8      	it	lt
 8009f4e:	9204      	strlt	r2, [sp, #16]
 8009f50:	7823      	ldrb	r3, [r4, #0]
 8009f52:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f54:	d10a      	bne.n	8009f6c <_svfiprintf_r+0x130>
 8009f56:	7863      	ldrb	r3, [r4, #1]
 8009f58:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f5a:	d132      	bne.n	8009fc2 <_svfiprintf_r+0x186>
 8009f5c:	9b03      	ldr	r3, [sp, #12]
 8009f5e:	1d1a      	adds	r2, r3, #4
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	9203      	str	r2, [sp, #12]
 8009f64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f68:	3402      	adds	r4, #2
 8009f6a:	9305      	str	r3, [sp, #20]
 8009f6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a030 <_svfiprintf_r+0x1f4>
 8009f70:	7821      	ldrb	r1, [r4, #0]
 8009f72:	2203      	movs	r2, #3
 8009f74:	4650      	mov	r0, sl
 8009f76:	f7f6 f92b 	bl	80001d0 <memchr>
 8009f7a:	b138      	cbz	r0, 8009f8c <_svfiprintf_r+0x150>
 8009f7c:	9b04      	ldr	r3, [sp, #16]
 8009f7e:	eba0 000a 	sub.w	r0, r0, sl
 8009f82:	2240      	movs	r2, #64	@ 0x40
 8009f84:	4082      	lsls	r2, r0
 8009f86:	4313      	orrs	r3, r2
 8009f88:	3401      	adds	r4, #1
 8009f8a:	9304      	str	r3, [sp, #16]
 8009f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f90:	4824      	ldr	r0, [pc, #144]	@ (800a024 <_svfiprintf_r+0x1e8>)
 8009f92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f96:	2206      	movs	r2, #6
 8009f98:	f7f6 f91a 	bl	80001d0 <memchr>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d036      	beq.n	800a00e <_svfiprintf_r+0x1d2>
 8009fa0:	4b21      	ldr	r3, [pc, #132]	@ (800a028 <_svfiprintf_r+0x1ec>)
 8009fa2:	bb1b      	cbnz	r3, 8009fec <_svfiprintf_r+0x1b0>
 8009fa4:	9b03      	ldr	r3, [sp, #12]
 8009fa6:	3307      	adds	r3, #7
 8009fa8:	f023 0307 	bic.w	r3, r3, #7
 8009fac:	3308      	adds	r3, #8
 8009fae:	9303      	str	r3, [sp, #12]
 8009fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb2:	4433      	add	r3, r6
 8009fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fb6:	e76a      	b.n	8009e8e <_svfiprintf_r+0x52>
 8009fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fbc:	460c      	mov	r4, r1
 8009fbe:	2001      	movs	r0, #1
 8009fc0:	e7a8      	b.n	8009f14 <_svfiprintf_r+0xd8>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	3401      	adds	r4, #1
 8009fc6:	9305      	str	r3, [sp, #20]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	f04f 0c0a 	mov.w	ip, #10
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fd4:	3a30      	subs	r2, #48	@ 0x30
 8009fd6:	2a09      	cmp	r2, #9
 8009fd8:	d903      	bls.n	8009fe2 <_svfiprintf_r+0x1a6>
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d0c6      	beq.n	8009f6c <_svfiprintf_r+0x130>
 8009fde:	9105      	str	r1, [sp, #20]
 8009fe0:	e7c4      	b.n	8009f6c <_svfiprintf_r+0x130>
 8009fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e7f0      	b.n	8009fce <_svfiprintf_r+0x192>
 8009fec:	ab03      	add	r3, sp, #12
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	462a      	mov	r2, r5
 8009ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800a02c <_svfiprintf_r+0x1f0>)
 8009ff4:	a904      	add	r1, sp, #16
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	f7fd fe98 	bl	8007d2c <_printf_float>
 8009ffc:	1c42      	adds	r2, r0, #1
 8009ffe:	4606      	mov	r6, r0
 800a000:	d1d6      	bne.n	8009fb0 <_svfiprintf_r+0x174>
 800a002:	89ab      	ldrh	r3, [r5, #12]
 800a004:	065b      	lsls	r3, r3, #25
 800a006:	f53f af2d 	bmi.w	8009e64 <_svfiprintf_r+0x28>
 800a00a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a00c:	e72c      	b.n	8009e68 <_svfiprintf_r+0x2c>
 800a00e:	ab03      	add	r3, sp, #12
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	462a      	mov	r2, r5
 800a014:	4b05      	ldr	r3, [pc, #20]	@ (800a02c <_svfiprintf_r+0x1f0>)
 800a016:	a904      	add	r1, sp, #16
 800a018:	4638      	mov	r0, r7
 800a01a:	f7fe f91f 	bl	800825c <_printf_i>
 800a01e:	e7ed      	b.n	8009ffc <_svfiprintf_r+0x1c0>
 800a020:	0800ab38 	.word	0x0800ab38
 800a024:	0800ab42 	.word	0x0800ab42
 800a028:	08007d2d 	.word	0x08007d2d
 800a02c:	08009d85 	.word	0x08009d85
 800a030:	0800ab3e 	.word	0x0800ab3e

0800a034 <__sflush_r>:
 800a034:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a03c:	0716      	lsls	r6, r2, #28
 800a03e:	4605      	mov	r5, r0
 800a040:	460c      	mov	r4, r1
 800a042:	d454      	bmi.n	800a0ee <__sflush_r+0xba>
 800a044:	684b      	ldr	r3, [r1, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	dc02      	bgt.n	800a050 <__sflush_r+0x1c>
 800a04a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	dd48      	ble.n	800a0e2 <__sflush_r+0xae>
 800a050:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a052:	2e00      	cmp	r6, #0
 800a054:	d045      	beq.n	800a0e2 <__sflush_r+0xae>
 800a056:	2300      	movs	r3, #0
 800a058:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a05c:	682f      	ldr	r7, [r5, #0]
 800a05e:	6a21      	ldr	r1, [r4, #32]
 800a060:	602b      	str	r3, [r5, #0]
 800a062:	d030      	beq.n	800a0c6 <__sflush_r+0x92>
 800a064:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a066:	89a3      	ldrh	r3, [r4, #12]
 800a068:	0759      	lsls	r1, r3, #29
 800a06a:	d505      	bpl.n	800a078 <__sflush_r+0x44>
 800a06c:	6863      	ldr	r3, [r4, #4]
 800a06e:	1ad2      	subs	r2, r2, r3
 800a070:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a072:	b10b      	cbz	r3, 800a078 <__sflush_r+0x44>
 800a074:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a076:	1ad2      	subs	r2, r2, r3
 800a078:	2300      	movs	r3, #0
 800a07a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a07c:	6a21      	ldr	r1, [r4, #32]
 800a07e:	4628      	mov	r0, r5
 800a080:	47b0      	blx	r6
 800a082:	1c43      	adds	r3, r0, #1
 800a084:	89a3      	ldrh	r3, [r4, #12]
 800a086:	d106      	bne.n	800a096 <__sflush_r+0x62>
 800a088:	6829      	ldr	r1, [r5, #0]
 800a08a:	291d      	cmp	r1, #29
 800a08c:	d82b      	bhi.n	800a0e6 <__sflush_r+0xb2>
 800a08e:	4a2a      	ldr	r2, [pc, #168]	@ (800a138 <__sflush_r+0x104>)
 800a090:	410a      	asrs	r2, r1
 800a092:	07d6      	lsls	r6, r2, #31
 800a094:	d427      	bmi.n	800a0e6 <__sflush_r+0xb2>
 800a096:	2200      	movs	r2, #0
 800a098:	6062      	str	r2, [r4, #4]
 800a09a:	04d9      	lsls	r1, r3, #19
 800a09c:	6922      	ldr	r2, [r4, #16]
 800a09e:	6022      	str	r2, [r4, #0]
 800a0a0:	d504      	bpl.n	800a0ac <__sflush_r+0x78>
 800a0a2:	1c42      	adds	r2, r0, #1
 800a0a4:	d101      	bne.n	800a0aa <__sflush_r+0x76>
 800a0a6:	682b      	ldr	r3, [r5, #0]
 800a0a8:	b903      	cbnz	r3, 800a0ac <__sflush_r+0x78>
 800a0aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0ae:	602f      	str	r7, [r5, #0]
 800a0b0:	b1b9      	cbz	r1, 800a0e2 <__sflush_r+0xae>
 800a0b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0b6:	4299      	cmp	r1, r3
 800a0b8:	d002      	beq.n	800a0c0 <__sflush_r+0x8c>
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	f7ff f9e0 	bl	8009480 <_free_r>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0c4:	e00d      	b.n	800a0e2 <__sflush_r+0xae>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	47b0      	blx	r6
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	1c50      	adds	r0, r2, #1
 800a0d0:	d1c9      	bne.n	800a066 <__sflush_r+0x32>
 800a0d2:	682b      	ldr	r3, [r5, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d0c6      	beq.n	800a066 <__sflush_r+0x32>
 800a0d8:	2b1d      	cmp	r3, #29
 800a0da:	d001      	beq.n	800a0e0 <__sflush_r+0xac>
 800a0dc:	2b16      	cmp	r3, #22
 800a0de:	d11e      	bne.n	800a11e <__sflush_r+0xea>
 800a0e0:	602f      	str	r7, [r5, #0]
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	e022      	b.n	800a12c <__sflush_r+0xf8>
 800a0e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0ea:	b21b      	sxth	r3, r3
 800a0ec:	e01b      	b.n	800a126 <__sflush_r+0xf2>
 800a0ee:	690f      	ldr	r7, [r1, #16]
 800a0f0:	2f00      	cmp	r7, #0
 800a0f2:	d0f6      	beq.n	800a0e2 <__sflush_r+0xae>
 800a0f4:	0793      	lsls	r3, r2, #30
 800a0f6:	680e      	ldr	r6, [r1, #0]
 800a0f8:	bf08      	it	eq
 800a0fa:	694b      	ldreq	r3, [r1, #20]
 800a0fc:	600f      	str	r7, [r1, #0]
 800a0fe:	bf18      	it	ne
 800a100:	2300      	movne	r3, #0
 800a102:	eba6 0807 	sub.w	r8, r6, r7
 800a106:	608b      	str	r3, [r1, #8]
 800a108:	f1b8 0f00 	cmp.w	r8, #0
 800a10c:	dde9      	ble.n	800a0e2 <__sflush_r+0xae>
 800a10e:	6a21      	ldr	r1, [r4, #32]
 800a110:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a112:	4643      	mov	r3, r8
 800a114:	463a      	mov	r2, r7
 800a116:	4628      	mov	r0, r5
 800a118:	47b0      	blx	r6
 800a11a:	2800      	cmp	r0, #0
 800a11c:	dc08      	bgt.n	800a130 <__sflush_r+0xfc>
 800a11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a126:	81a3      	strh	r3, [r4, #12]
 800a128:	f04f 30ff 	mov.w	r0, #4294967295
 800a12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a130:	4407      	add	r7, r0
 800a132:	eba8 0800 	sub.w	r8, r8, r0
 800a136:	e7e7      	b.n	800a108 <__sflush_r+0xd4>
 800a138:	dfbffffe 	.word	0xdfbffffe

0800a13c <_fflush_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	690b      	ldr	r3, [r1, #16]
 800a140:	4605      	mov	r5, r0
 800a142:	460c      	mov	r4, r1
 800a144:	b913      	cbnz	r3, 800a14c <_fflush_r+0x10>
 800a146:	2500      	movs	r5, #0
 800a148:	4628      	mov	r0, r5
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	b118      	cbz	r0, 800a156 <_fflush_r+0x1a>
 800a14e:	6a03      	ldr	r3, [r0, #32]
 800a150:	b90b      	cbnz	r3, 800a156 <_fflush_r+0x1a>
 800a152:	f7fe fa2f 	bl	80085b4 <__sinit>
 800a156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0f3      	beq.n	800a146 <_fflush_r+0xa>
 800a15e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a160:	07d0      	lsls	r0, r2, #31
 800a162:	d404      	bmi.n	800a16e <_fflush_r+0x32>
 800a164:	0599      	lsls	r1, r3, #22
 800a166:	d402      	bmi.n	800a16e <_fflush_r+0x32>
 800a168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a16a:	f7fe fb3a 	bl	80087e2 <__retarget_lock_acquire_recursive>
 800a16e:	4628      	mov	r0, r5
 800a170:	4621      	mov	r1, r4
 800a172:	f7ff ff5f 	bl	800a034 <__sflush_r>
 800a176:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a178:	07da      	lsls	r2, r3, #31
 800a17a:	4605      	mov	r5, r0
 800a17c:	d4e4      	bmi.n	800a148 <_fflush_r+0xc>
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	059b      	lsls	r3, r3, #22
 800a182:	d4e1      	bmi.n	800a148 <_fflush_r+0xc>
 800a184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a186:	f7fe fb2d 	bl	80087e4 <__retarget_lock_release_recursive>
 800a18a:	e7dd      	b.n	800a148 <_fflush_r+0xc>

0800a18c <memmove>:
 800a18c:	4288      	cmp	r0, r1
 800a18e:	b510      	push	{r4, lr}
 800a190:	eb01 0402 	add.w	r4, r1, r2
 800a194:	d902      	bls.n	800a19c <memmove+0x10>
 800a196:	4284      	cmp	r4, r0
 800a198:	4623      	mov	r3, r4
 800a19a:	d807      	bhi.n	800a1ac <memmove+0x20>
 800a19c:	1e43      	subs	r3, r0, #1
 800a19e:	42a1      	cmp	r1, r4
 800a1a0:	d008      	beq.n	800a1b4 <memmove+0x28>
 800a1a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1aa:	e7f8      	b.n	800a19e <memmove+0x12>
 800a1ac:	4402      	add	r2, r0
 800a1ae:	4601      	mov	r1, r0
 800a1b0:	428a      	cmp	r2, r1
 800a1b2:	d100      	bne.n	800a1b6 <memmove+0x2a>
 800a1b4:	bd10      	pop	{r4, pc}
 800a1b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1be:	e7f7      	b.n	800a1b0 <memmove+0x24>

0800a1c0 <_sbrk_r>:
 800a1c0:	b538      	push	{r3, r4, r5, lr}
 800a1c2:	4d06      	ldr	r5, [pc, #24]	@ (800a1dc <_sbrk_r+0x1c>)
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	602b      	str	r3, [r5, #0]
 800a1cc:	f7f7 fa54 	bl	8001678 <_sbrk>
 800a1d0:	1c43      	adds	r3, r0, #1
 800a1d2:	d102      	bne.n	800a1da <_sbrk_r+0x1a>
 800a1d4:	682b      	ldr	r3, [r5, #0]
 800a1d6:	b103      	cbz	r3, 800a1da <_sbrk_r+0x1a>
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	bd38      	pop	{r3, r4, r5, pc}
 800a1dc:	20002008 	.word	0x20002008

0800a1e0 <memcpy>:
 800a1e0:	440a      	add	r2, r1
 800a1e2:	4291      	cmp	r1, r2
 800a1e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1e8:	d100      	bne.n	800a1ec <memcpy+0xc>
 800a1ea:	4770      	bx	lr
 800a1ec:	b510      	push	{r4, lr}
 800a1ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1f6:	4291      	cmp	r1, r2
 800a1f8:	d1f9      	bne.n	800a1ee <memcpy+0xe>
 800a1fa:	bd10      	pop	{r4, pc}

0800a1fc <__assert_func>:
 800a1fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1fe:	4614      	mov	r4, r2
 800a200:	461a      	mov	r2, r3
 800a202:	4b09      	ldr	r3, [pc, #36]	@ (800a228 <__assert_func+0x2c>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4605      	mov	r5, r0
 800a208:	68d8      	ldr	r0, [r3, #12]
 800a20a:	b954      	cbnz	r4, 800a222 <__assert_func+0x26>
 800a20c:	4b07      	ldr	r3, [pc, #28]	@ (800a22c <__assert_func+0x30>)
 800a20e:	461c      	mov	r4, r3
 800a210:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a214:	9100      	str	r1, [sp, #0]
 800a216:	462b      	mov	r3, r5
 800a218:	4905      	ldr	r1, [pc, #20]	@ (800a230 <__assert_func+0x34>)
 800a21a:	f000 f86f 	bl	800a2fc <fiprintf>
 800a21e:	f000 f87f 	bl	800a320 <abort>
 800a222:	4b04      	ldr	r3, [pc, #16]	@ (800a234 <__assert_func+0x38>)
 800a224:	e7f4      	b.n	800a210 <__assert_func+0x14>
 800a226:	bf00      	nop
 800a228:	20000108 	.word	0x20000108
 800a22c:	0800ab8e 	.word	0x0800ab8e
 800a230:	0800ab60 	.word	0x0800ab60
 800a234:	0800ab53 	.word	0x0800ab53

0800a238 <_calloc_r>:
 800a238:	b570      	push	{r4, r5, r6, lr}
 800a23a:	fba1 5402 	umull	r5, r4, r1, r2
 800a23e:	b93c      	cbnz	r4, 800a250 <_calloc_r+0x18>
 800a240:	4629      	mov	r1, r5
 800a242:	f7ff f991 	bl	8009568 <_malloc_r>
 800a246:	4606      	mov	r6, r0
 800a248:	b928      	cbnz	r0, 800a256 <_calloc_r+0x1e>
 800a24a:	2600      	movs	r6, #0
 800a24c:	4630      	mov	r0, r6
 800a24e:	bd70      	pop	{r4, r5, r6, pc}
 800a250:	220c      	movs	r2, #12
 800a252:	6002      	str	r2, [r0, #0]
 800a254:	e7f9      	b.n	800a24a <_calloc_r+0x12>
 800a256:	462a      	mov	r2, r5
 800a258:	4621      	mov	r1, r4
 800a25a:	f7fe fa44 	bl	80086e6 <memset>
 800a25e:	e7f5      	b.n	800a24c <_calloc_r+0x14>

0800a260 <__ascii_mbtowc>:
 800a260:	b082      	sub	sp, #8
 800a262:	b901      	cbnz	r1, 800a266 <__ascii_mbtowc+0x6>
 800a264:	a901      	add	r1, sp, #4
 800a266:	b142      	cbz	r2, 800a27a <__ascii_mbtowc+0x1a>
 800a268:	b14b      	cbz	r3, 800a27e <__ascii_mbtowc+0x1e>
 800a26a:	7813      	ldrb	r3, [r2, #0]
 800a26c:	600b      	str	r3, [r1, #0]
 800a26e:	7812      	ldrb	r2, [r2, #0]
 800a270:	1e10      	subs	r0, r2, #0
 800a272:	bf18      	it	ne
 800a274:	2001      	movne	r0, #1
 800a276:	b002      	add	sp, #8
 800a278:	4770      	bx	lr
 800a27a:	4610      	mov	r0, r2
 800a27c:	e7fb      	b.n	800a276 <__ascii_mbtowc+0x16>
 800a27e:	f06f 0001 	mvn.w	r0, #1
 800a282:	e7f8      	b.n	800a276 <__ascii_mbtowc+0x16>

0800a284 <_realloc_r>:
 800a284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a288:	4680      	mov	r8, r0
 800a28a:	4615      	mov	r5, r2
 800a28c:	460c      	mov	r4, r1
 800a28e:	b921      	cbnz	r1, 800a29a <_realloc_r+0x16>
 800a290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a294:	4611      	mov	r1, r2
 800a296:	f7ff b967 	b.w	8009568 <_malloc_r>
 800a29a:	b92a      	cbnz	r2, 800a2a8 <_realloc_r+0x24>
 800a29c:	f7ff f8f0 	bl	8009480 <_free_r>
 800a2a0:	2400      	movs	r4, #0
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a8:	f000 f841 	bl	800a32e <_malloc_usable_size_r>
 800a2ac:	4285      	cmp	r5, r0
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	d802      	bhi.n	800a2b8 <_realloc_r+0x34>
 800a2b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a2b6:	d8f4      	bhi.n	800a2a2 <_realloc_r+0x1e>
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	f7ff f954 	bl	8009568 <_malloc_r>
 800a2c0:	4607      	mov	r7, r0
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d0ec      	beq.n	800a2a0 <_realloc_r+0x1c>
 800a2c6:	42b5      	cmp	r5, r6
 800a2c8:	462a      	mov	r2, r5
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	bf28      	it	cs
 800a2ce:	4632      	movcs	r2, r6
 800a2d0:	f7ff ff86 	bl	800a1e0 <memcpy>
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	4640      	mov	r0, r8
 800a2d8:	f7ff f8d2 	bl	8009480 <_free_r>
 800a2dc:	463c      	mov	r4, r7
 800a2de:	e7e0      	b.n	800a2a2 <_realloc_r+0x1e>

0800a2e0 <__ascii_wctomb>:
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	4608      	mov	r0, r1
 800a2e4:	b141      	cbz	r1, 800a2f8 <__ascii_wctomb+0x18>
 800a2e6:	2aff      	cmp	r2, #255	@ 0xff
 800a2e8:	d904      	bls.n	800a2f4 <__ascii_wctomb+0x14>
 800a2ea:	228a      	movs	r2, #138	@ 0x8a
 800a2ec:	601a      	str	r2, [r3, #0]
 800a2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f2:	4770      	bx	lr
 800a2f4:	700a      	strb	r2, [r1, #0]
 800a2f6:	2001      	movs	r0, #1
 800a2f8:	4770      	bx	lr
	...

0800a2fc <fiprintf>:
 800a2fc:	b40e      	push	{r1, r2, r3}
 800a2fe:	b503      	push	{r0, r1, lr}
 800a300:	4601      	mov	r1, r0
 800a302:	ab03      	add	r3, sp, #12
 800a304:	4805      	ldr	r0, [pc, #20]	@ (800a31c <fiprintf+0x20>)
 800a306:	f853 2b04 	ldr.w	r2, [r3], #4
 800a30a:	6800      	ldr	r0, [r0, #0]
 800a30c:	9301      	str	r3, [sp, #4]
 800a30e:	f000 f83f 	bl	800a390 <_vfiprintf_r>
 800a312:	b002      	add	sp, #8
 800a314:	f85d eb04 	ldr.w	lr, [sp], #4
 800a318:	b003      	add	sp, #12
 800a31a:	4770      	bx	lr
 800a31c:	20000108 	.word	0x20000108

0800a320 <abort>:
 800a320:	b508      	push	{r3, lr}
 800a322:	2006      	movs	r0, #6
 800a324:	f000 fa08 	bl	800a738 <raise>
 800a328:	2001      	movs	r0, #1
 800a32a:	f7f7 f92d 	bl	8001588 <_exit>

0800a32e <_malloc_usable_size_r>:
 800a32e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a332:	1f18      	subs	r0, r3, #4
 800a334:	2b00      	cmp	r3, #0
 800a336:	bfbc      	itt	lt
 800a338:	580b      	ldrlt	r3, [r1, r0]
 800a33a:	18c0      	addlt	r0, r0, r3
 800a33c:	4770      	bx	lr

0800a33e <__sfputc_r>:
 800a33e:	6893      	ldr	r3, [r2, #8]
 800a340:	3b01      	subs	r3, #1
 800a342:	2b00      	cmp	r3, #0
 800a344:	b410      	push	{r4}
 800a346:	6093      	str	r3, [r2, #8]
 800a348:	da08      	bge.n	800a35c <__sfputc_r+0x1e>
 800a34a:	6994      	ldr	r4, [r2, #24]
 800a34c:	42a3      	cmp	r3, r4
 800a34e:	db01      	blt.n	800a354 <__sfputc_r+0x16>
 800a350:	290a      	cmp	r1, #10
 800a352:	d103      	bne.n	800a35c <__sfputc_r+0x1e>
 800a354:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a358:	f000 b932 	b.w	800a5c0 <__swbuf_r>
 800a35c:	6813      	ldr	r3, [r2, #0]
 800a35e:	1c58      	adds	r0, r3, #1
 800a360:	6010      	str	r0, [r2, #0]
 800a362:	7019      	strb	r1, [r3, #0]
 800a364:	4608      	mov	r0, r1
 800a366:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <__sfputs_r>:
 800a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36e:	4606      	mov	r6, r0
 800a370:	460f      	mov	r7, r1
 800a372:	4614      	mov	r4, r2
 800a374:	18d5      	adds	r5, r2, r3
 800a376:	42ac      	cmp	r4, r5
 800a378:	d101      	bne.n	800a37e <__sfputs_r+0x12>
 800a37a:	2000      	movs	r0, #0
 800a37c:	e007      	b.n	800a38e <__sfputs_r+0x22>
 800a37e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a382:	463a      	mov	r2, r7
 800a384:	4630      	mov	r0, r6
 800a386:	f7ff ffda 	bl	800a33e <__sfputc_r>
 800a38a:	1c43      	adds	r3, r0, #1
 800a38c:	d1f3      	bne.n	800a376 <__sfputs_r+0xa>
 800a38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a390 <_vfiprintf_r>:
 800a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	460d      	mov	r5, r1
 800a396:	b09d      	sub	sp, #116	@ 0x74
 800a398:	4614      	mov	r4, r2
 800a39a:	4698      	mov	r8, r3
 800a39c:	4606      	mov	r6, r0
 800a39e:	b118      	cbz	r0, 800a3a8 <_vfiprintf_r+0x18>
 800a3a0:	6a03      	ldr	r3, [r0, #32]
 800a3a2:	b90b      	cbnz	r3, 800a3a8 <_vfiprintf_r+0x18>
 800a3a4:	f7fe f906 	bl	80085b4 <__sinit>
 800a3a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3aa:	07d9      	lsls	r1, r3, #31
 800a3ac:	d405      	bmi.n	800a3ba <_vfiprintf_r+0x2a>
 800a3ae:	89ab      	ldrh	r3, [r5, #12]
 800a3b0:	059a      	lsls	r2, r3, #22
 800a3b2:	d402      	bmi.n	800a3ba <_vfiprintf_r+0x2a>
 800a3b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3b6:	f7fe fa14 	bl	80087e2 <__retarget_lock_acquire_recursive>
 800a3ba:	89ab      	ldrh	r3, [r5, #12]
 800a3bc:	071b      	lsls	r3, r3, #28
 800a3be:	d501      	bpl.n	800a3c4 <_vfiprintf_r+0x34>
 800a3c0:	692b      	ldr	r3, [r5, #16]
 800a3c2:	b99b      	cbnz	r3, 800a3ec <_vfiprintf_r+0x5c>
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	f000 f938 	bl	800a63c <__swsetup_r>
 800a3cc:	b170      	cbz	r0, 800a3ec <_vfiprintf_r+0x5c>
 800a3ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3d0:	07dc      	lsls	r4, r3, #31
 800a3d2:	d504      	bpl.n	800a3de <_vfiprintf_r+0x4e>
 800a3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d8:	b01d      	add	sp, #116	@ 0x74
 800a3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3de:	89ab      	ldrh	r3, [r5, #12]
 800a3e0:	0598      	lsls	r0, r3, #22
 800a3e2:	d4f7      	bmi.n	800a3d4 <_vfiprintf_r+0x44>
 800a3e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3e6:	f7fe f9fd 	bl	80087e4 <__retarget_lock_release_recursive>
 800a3ea:	e7f3      	b.n	800a3d4 <_vfiprintf_r+0x44>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3f0:	2320      	movs	r3, #32
 800a3f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3fa:	2330      	movs	r3, #48	@ 0x30
 800a3fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a5ac <_vfiprintf_r+0x21c>
 800a400:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a404:	f04f 0901 	mov.w	r9, #1
 800a408:	4623      	mov	r3, r4
 800a40a:	469a      	mov	sl, r3
 800a40c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a410:	b10a      	cbz	r2, 800a416 <_vfiprintf_r+0x86>
 800a412:	2a25      	cmp	r2, #37	@ 0x25
 800a414:	d1f9      	bne.n	800a40a <_vfiprintf_r+0x7a>
 800a416:	ebba 0b04 	subs.w	fp, sl, r4
 800a41a:	d00b      	beq.n	800a434 <_vfiprintf_r+0xa4>
 800a41c:	465b      	mov	r3, fp
 800a41e:	4622      	mov	r2, r4
 800a420:	4629      	mov	r1, r5
 800a422:	4630      	mov	r0, r6
 800a424:	f7ff ffa2 	bl	800a36c <__sfputs_r>
 800a428:	3001      	adds	r0, #1
 800a42a:	f000 80a7 	beq.w	800a57c <_vfiprintf_r+0x1ec>
 800a42e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a430:	445a      	add	r2, fp
 800a432:	9209      	str	r2, [sp, #36]	@ 0x24
 800a434:	f89a 3000 	ldrb.w	r3, [sl]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	f000 809f 	beq.w	800a57c <_vfiprintf_r+0x1ec>
 800a43e:	2300      	movs	r3, #0
 800a440:	f04f 32ff 	mov.w	r2, #4294967295
 800a444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a448:	f10a 0a01 	add.w	sl, sl, #1
 800a44c:	9304      	str	r3, [sp, #16]
 800a44e:	9307      	str	r3, [sp, #28]
 800a450:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a454:	931a      	str	r3, [sp, #104]	@ 0x68
 800a456:	4654      	mov	r4, sl
 800a458:	2205      	movs	r2, #5
 800a45a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a45e:	4853      	ldr	r0, [pc, #332]	@ (800a5ac <_vfiprintf_r+0x21c>)
 800a460:	f7f5 feb6 	bl	80001d0 <memchr>
 800a464:	9a04      	ldr	r2, [sp, #16]
 800a466:	b9d8      	cbnz	r0, 800a4a0 <_vfiprintf_r+0x110>
 800a468:	06d1      	lsls	r1, r2, #27
 800a46a:	bf44      	itt	mi
 800a46c:	2320      	movmi	r3, #32
 800a46e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a472:	0713      	lsls	r3, r2, #28
 800a474:	bf44      	itt	mi
 800a476:	232b      	movmi	r3, #43	@ 0x2b
 800a478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a47c:	f89a 3000 	ldrb.w	r3, [sl]
 800a480:	2b2a      	cmp	r3, #42	@ 0x2a
 800a482:	d015      	beq.n	800a4b0 <_vfiprintf_r+0x120>
 800a484:	9a07      	ldr	r2, [sp, #28]
 800a486:	4654      	mov	r4, sl
 800a488:	2000      	movs	r0, #0
 800a48a:	f04f 0c0a 	mov.w	ip, #10
 800a48e:	4621      	mov	r1, r4
 800a490:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a494:	3b30      	subs	r3, #48	@ 0x30
 800a496:	2b09      	cmp	r3, #9
 800a498:	d94b      	bls.n	800a532 <_vfiprintf_r+0x1a2>
 800a49a:	b1b0      	cbz	r0, 800a4ca <_vfiprintf_r+0x13a>
 800a49c:	9207      	str	r2, [sp, #28]
 800a49e:	e014      	b.n	800a4ca <_vfiprintf_r+0x13a>
 800a4a0:	eba0 0308 	sub.w	r3, r0, r8
 800a4a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	9304      	str	r3, [sp, #16]
 800a4ac:	46a2      	mov	sl, r4
 800a4ae:	e7d2      	b.n	800a456 <_vfiprintf_r+0xc6>
 800a4b0:	9b03      	ldr	r3, [sp, #12]
 800a4b2:	1d19      	adds	r1, r3, #4
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	9103      	str	r1, [sp, #12]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	bfbb      	ittet	lt
 800a4bc:	425b      	neglt	r3, r3
 800a4be:	f042 0202 	orrlt.w	r2, r2, #2
 800a4c2:	9307      	strge	r3, [sp, #28]
 800a4c4:	9307      	strlt	r3, [sp, #28]
 800a4c6:	bfb8      	it	lt
 800a4c8:	9204      	strlt	r2, [sp, #16]
 800a4ca:	7823      	ldrb	r3, [r4, #0]
 800a4cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4ce:	d10a      	bne.n	800a4e6 <_vfiprintf_r+0x156>
 800a4d0:	7863      	ldrb	r3, [r4, #1]
 800a4d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4d4:	d132      	bne.n	800a53c <_vfiprintf_r+0x1ac>
 800a4d6:	9b03      	ldr	r3, [sp, #12]
 800a4d8:	1d1a      	adds	r2, r3, #4
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	9203      	str	r2, [sp, #12]
 800a4de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4e2:	3402      	adds	r4, #2
 800a4e4:	9305      	str	r3, [sp, #20]
 800a4e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a5bc <_vfiprintf_r+0x22c>
 800a4ea:	7821      	ldrb	r1, [r4, #0]
 800a4ec:	2203      	movs	r2, #3
 800a4ee:	4650      	mov	r0, sl
 800a4f0:	f7f5 fe6e 	bl	80001d0 <memchr>
 800a4f4:	b138      	cbz	r0, 800a506 <_vfiprintf_r+0x176>
 800a4f6:	9b04      	ldr	r3, [sp, #16]
 800a4f8:	eba0 000a 	sub.w	r0, r0, sl
 800a4fc:	2240      	movs	r2, #64	@ 0x40
 800a4fe:	4082      	lsls	r2, r0
 800a500:	4313      	orrs	r3, r2
 800a502:	3401      	adds	r4, #1
 800a504:	9304      	str	r3, [sp, #16]
 800a506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50a:	4829      	ldr	r0, [pc, #164]	@ (800a5b0 <_vfiprintf_r+0x220>)
 800a50c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a510:	2206      	movs	r2, #6
 800a512:	f7f5 fe5d 	bl	80001d0 <memchr>
 800a516:	2800      	cmp	r0, #0
 800a518:	d03f      	beq.n	800a59a <_vfiprintf_r+0x20a>
 800a51a:	4b26      	ldr	r3, [pc, #152]	@ (800a5b4 <_vfiprintf_r+0x224>)
 800a51c:	bb1b      	cbnz	r3, 800a566 <_vfiprintf_r+0x1d6>
 800a51e:	9b03      	ldr	r3, [sp, #12]
 800a520:	3307      	adds	r3, #7
 800a522:	f023 0307 	bic.w	r3, r3, #7
 800a526:	3308      	adds	r3, #8
 800a528:	9303      	str	r3, [sp, #12]
 800a52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a52c:	443b      	add	r3, r7
 800a52e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a530:	e76a      	b.n	800a408 <_vfiprintf_r+0x78>
 800a532:	fb0c 3202 	mla	r2, ip, r2, r3
 800a536:	460c      	mov	r4, r1
 800a538:	2001      	movs	r0, #1
 800a53a:	e7a8      	b.n	800a48e <_vfiprintf_r+0xfe>
 800a53c:	2300      	movs	r3, #0
 800a53e:	3401      	adds	r4, #1
 800a540:	9305      	str	r3, [sp, #20]
 800a542:	4619      	mov	r1, r3
 800a544:	f04f 0c0a 	mov.w	ip, #10
 800a548:	4620      	mov	r0, r4
 800a54a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a54e:	3a30      	subs	r2, #48	@ 0x30
 800a550:	2a09      	cmp	r2, #9
 800a552:	d903      	bls.n	800a55c <_vfiprintf_r+0x1cc>
 800a554:	2b00      	cmp	r3, #0
 800a556:	d0c6      	beq.n	800a4e6 <_vfiprintf_r+0x156>
 800a558:	9105      	str	r1, [sp, #20]
 800a55a:	e7c4      	b.n	800a4e6 <_vfiprintf_r+0x156>
 800a55c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a560:	4604      	mov	r4, r0
 800a562:	2301      	movs	r3, #1
 800a564:	e7f0      	b.n	800a548 <_vfiprintf_r+0x1b8>
 800a566:	ab03      	add	r3, sp, #12
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	462a      	mov	r2, r5
 800a56c:	4b12      	ldr	r3, [pc, #72]	@ (800a5b8 <_vfiprintf_r+0x228>)
 800a56e:	a904      	add	r1, sp, #16
 800a570:	4630      	mov	r0, r6
 800a572:	f7fd fbdb 	bl	8007d2c <_printf_float>
 800a576:	4607      	mov	r7, r0
 800a578:	1c78      	adds	r0, r7, #1
 800a57a:	d1d6      	bne.n	800a52a <_vfiprintf_r+0x19a>
 800a57c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a57e:	07d9      	lsls	r1, r3, #31
 800a580:	d405      	bmi.n	800a58e <_vfiprintf_r+0x1fe>
 800a582:	89ab      	ldrh	r3, [r5, #12]
 800a584:	059a      	lsls	r2, r3, #22
 800a586:	d402      	bmi.n	800a58e <_vfiprintf_r+0x1fe>
 800a588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a58a:	f7fe f92b 	bl	80087e4 <__retarget_lock_release_recursive>
 800a58e:	89ab      	ldrh	r3, [r5, #12]
 800a590:	065b      	lsls	r3, r3, #25
 800a592:	f53f af1f 	bmi.w	800a3d4 <_vfiprintf_r+0x44>
 800a596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a598:	e71e      	b.n	800a3d8 <_vfiprintf_r+0x48>
 800a59a:	ab03      	add	r3, sp, #12
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	462a      	mov	r2, r5
 800a5a0:	4b05      	ldr	r3, [pc, #20]	@ (800a5b8 <_vfiprintf_r+0x228>)
 800a5a2:	a904      	add	r1, sp, #16
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	f7fd fe59 	bl	800825c <_printf_i>
 800a5aa:	e7e4      	b.n	800a576 <_vfiprintf_r+0x1e6>
 800a5ac:	0800ab38 	.word	0x0800ab38
 800a5b0:	0800ab42 	.word	0x0800ab42
 800a5b4:	08007d2d 	.word	0x08007d2d
 800a5b8:	0800a36d 	.word	0x0800a36d
 800a5bc:	0800ab3e 	.word	0x0800ab3e

0800a5c0 <__swbuf_r>:
 800a5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c2:	460e      	mov	r6, r1
 800a5c4:	4614      	mov	r4, r2
 800a5c6:	4605      	mov	r5, r0
 800a5c8:	b118      	cbz	r0, 800a5d2 <__swbuf_r+0x12>
 800a5ca:	6a03      	ldr	r3, [r0, #32]
 800a5cc:	b90b      	cbnz	r3, 800a5d2 <__swbuf_r+0x12>
 800a5ce:	f7fd fff1 	bl	80085b4 <__sinit>
 800a5d2:	69a3      	ldr	r3, [r4, #24]
 800a5d4:	60a3      	str	r3, [r4, #8]
 800a5d6:	89a3      	ldrh	r3, [r4, #12]
 800a5d8:	071a      	lsls	r2, r3, #28
 800a5da:	d501      	bpl.n	800a5e0 <__swbuf_r+0x20>
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	b943      	cbnz	r3, 800a5f2 <__swbuf_r+0x32>
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	f000 f82a 	bl	800a63c <__swsetup_r>
 800a5e8:	b118      	cbz	r0, 800a5f2 <__swbuf_r+0x32>
 800a5ea:	f04f 37ff 	mov.w	r7, #4294967295
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	6922      	ldr	r2, [r4, #16]
 800a5f6:	1a98      	subs	r0, r3, r2
 800a5f8:	6963      	ldr	r3, [r4, #20]
 800a5fa:	b2f6      	uxtb	r6, r6
 800a5fc:	4283      	cmp	r3, r0
 800a5fe:	4637      	mov	r7, r6
 800a600:	dc05      	bgt.n	800a60e <__swbuf_r+0x4e>
 800a602:	4621      	mov	r1, r4
 800a604:	4628      	mov	r0, r5
 800a606:	f7ff fd99 	bl	800a13c <_fflush_r>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	d1ed      	bne.n	800a5ea <__swbuf_r+0x2a>
 800a60e:	68a3      	ldr	r3, [r4, #8]
 800a610:	3b01      	subs	r3, #1
 800a612:	60a3      	str	r3, [r4, #8]
 800a614:	6823      	ldr	r3, [r4, #0]
 800a616:	1c5a      	adds	r2, r3, #1
 800a618:	6022      	str	r2, [r4, #0]
 800a61a:	701e      	strb	r6, [r3, #0]
 800a61c:	6962      	ldr	r2, [r4, #20]
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	429a      	cmp	r2, r3
 800a622:	d004      	beq.n	800a62e <__swbuf_r+0x6e>
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	07db      	lsls	r3, r3, #31
 800a628:	d5e1      	bpl.n	800a5ee <__swbuf_r+0x2e>
 800a62a:	2e0a      	cmp	r6, #10
 800a62c:	d1df      	bne.n	800a5ee <__swbuf_r+0x2e>
 800a62e:	4621      	mov	r1, r4
 800a630:	4628      	mov	r0, r5
 800a632:	f7ff fd83 	bl	800a13c <_fflush_r>
 800a636:	2800      	cmp	r0, #0
 800a638:	d0d9      	beq.n	800a5ee <__swbuf_r+0x2e>
 800a63a:	e7d6      	b.n	800a5ea <__swbuf_r+0x2a>

0800a63c <__swsetup_r>:
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4b29      	ldr	r3, [pc, #164]	@ (800a6e4 <__swsetup_r+0xa8>)
 800a640:	4605      	mov	r5, r0
 800a642:	6818      	ldr	r0, [r3, #0]
 800a644:	460c      	mov	r4, r1
 800a646:	b118      	cbz	r0, 800a650 <__swsetup_r+0x14>
 800a648:	6a03      	ldr	r3, [r0, #32]
 800a64a:	b90b      	cbnz	r3, 800a650 <__swsetup_r+0x14>
 800a64c:	f7fd ffb2 	bl	80085b4 <__sinit>
 800a650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a654:	0719      	lsls	r1, r3, #28
 800a656:	d422      	bmi.n	800a69e <__swsetup_r+0x62>
 800a658:	06da      	lsls	r2, r3, #27
 800a65a:	d407      	bmi.n	800a66c <__swsetup_r+0x30>
 800a65c:	2209      	movs	r2, #9
 800a65e:	602a      	str	r2, [r5, #0]
 800a660:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a664:	81a3      	strh	r3, [r4, #12]
 800a666:	f04f 30ff 	mov.w	r0, #4294967295
 800a66a:	e033      	b.n	800a6d4 <__swsetup_r+0x98>
 800a66c:	0758      	lsls	r0, r3, #29
 800a66e:	d512      	bpl.n	800a696 <__swsetup_r+0x5a>
 800a670:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a672:	b141      	cbz	r1, 800a686 <__swsetup_r+0x4a>
 800a674:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a678:	4299      	cmp	r1, r3
 800a67a:	d002      	beq.n	800a682 <__swsetup_r+0x46>
 800a67c:	4628      	mov	r0, r5
 800a67e:	f7fe feff 	bl	8009480 <_free_r>
 800a682:	2300      	movs	r3, #0
 800a684:	6363      	str	r3, [r4, #52]	@ 0x34
 800a686:	89a3      	ldrh	r3, [r4, #12]
 800a688:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a68c:	81a3      	strh	r3, [r4, #12]
 800a68e:	2300      	movs	r3, #0
 800a690:	6063      	str	r3, [r4, #4]
 800a692:	6923      	ldr	r3, [r4, #16]
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	f043 0308 	orr.w	r3, r3, #8
 800a69c:	81a3      	strh	r3, [r4, #12]
 800a69e:	6923      	ldr	r3, [r4, #16]
 800a6a0:	b94b      	cbnz	r3, 800a6b6 <__swsetup_r+0x7a>
 800a6a2:	89a3      	ldrh	r3, [r4, #12]
 800a6a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a6a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6ac:	d003      	beq.n	800a6b6 <__swsetup_r+0x7a>
 800a6ae:	4621      	mov	r1, r4
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	f000 f883 	bl	800a7bc <__smakebuf_r>
 800a6b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ba:	f013 0201 	ands.w	r2, r3, #1
 800a6be:	d00a      	beq.n	800a6d6 <__swsetup_r+0x9a>
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	60a2      	str	r2, [r4, #8]
 800a6c4:	6962      	ldr	r2, [r4, #20]
 800a6c6:	4252      	negs	r2, r2
 800a6c8:	61a2      	str	r2, [r4, #24]
 800a6ca:	6922      	ldr	r2, [r4, #16]
 800a6cc:	b942      	cbnz	r2, 800a6e0 <__swsetup_r+0xa4>
 800a6ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a6d2:	d1c5      	bne.n	800a660 <__swsetup_r+0x24>
 800a6d4:	bd38      	pop	{r3, r4, r5, pc}
 800a6d6:	0799      	lsls	r1, r3, #30
 800a6d8:	bf58      	it	pl
 800a6da:	6962      	ldrpl	r2, [r4, #20]
 800a6dc:	60a2      	str	r2, [r4, #8]
 800a6de:	e7f4      	b.n	800a6ca <__swsetup_r+0x8e>
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	e7f7      	b.n	800a6d4 <__swsetup_r+0x98>
 800a6e4:	20000108 	.word	0x20000108

0800a6e8 <_raise_r>:
 800a6e8:	291f      	cmp	r1, #31
 800a6ea:	b538      	push	{r3, r4, r5, lr}
 800a6ec:	4605      	mov	r5, r0
 800a6ee:	460c      	mov	r4, r1
 800a6f0:	d904      	bls.n	800a6fc <_raise_r+0x14>
 800a6f2:	2316      	movs	r3, #22
 800a6f4:	6003      	str	r3, [r0, #0]
 800a6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fa:	bd38      	pop	{r3, r4, r5, pc}
 800a6fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a6fe:	b112      	cbz	r2, 800a706 <_raise_r+0x1e>
 800a700:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a704:	b94b      	cbnz	r3, 800a71a <_raise_r+0x32>
 800a706:	4628      	mov	r0, r5
 800a708:	f000 f830 	bl	800a76c <_getpid_r>
 800a70c:	4622      	mov	r2, r4
 800a70e:	4601      	mov	r1, r0
 800a710:	4628      	mov	r0, r5
 800a712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a716:	f000 b817 	b.w	800a748 <_kill_r>
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d00a      	beq.n	800a734 <_raise_r+0x4c>
 800a71e:	1c59      	adds	r1, r3, #1
 800a720:	d103      	bne.n	800a72a <_raise_r+0x42>
 800a722:	2316      	movs	r3, #22
 800a724:	6003      	str	r3, [r0, #0]
 800a726:	2001      	movs	r0, #1
 800a728:	e7e7      	b.n	800a6fa <_raise_r+0x12>
 800a72a:	2100      	movs	r1, #0
 800a72c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a730:	4620      	mov	r0, r4
 800a732:	4798      	blx	r3
 800a734:	2000      	movs	r0, #0
 800a736:	e7e0      	b.n	800a6fa <_raise_r+0x12>

0800a738 <raise>:
 800a738:	4b02      	ldr	r3, [pc, #8]	@ (800a744 <raise+0xc>)
 800a73a:	4601      	mov	r1, r0
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	f7ff bfd3 	b.w	800a6e8 <_raise_r>
 800a742:	bf00      	nop
 800a744:	20000108 	.word	0x20000108

0800a748 <_kill_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4d07      	ldr	r5, [pc, #28]	@ (800a768 <_kill_r+0x20>)
 800a74c:	2300      	movs	r3, #0
 800a74e:	4604      	mov	r4, r0
 800a750:	4608      	mov	r0, r1
 800a752:	4611      	mov	r1, r2
 800a754:	602b      	str	r3, [r5, #0]
 800a756:	f7f6 ff07 	bl	8001568 <_kill>
 800a75a:	1c43      	adds	r3, r0, #1
 800a75c:	d102      	bne.n	800a764 <_kill_r+0x1c>
 800a75e:	682b      	ldr	r3, [r5, #0]
 800a760:	b103      	cbz	r3, 800a764 <_kill_r+0x1c>
 800a762:	6023      	str	r3, [r4, #0]
 800a764:	bd38      	pop	{r3, r4, r5, pc}
 800a766:	bf00      	nop
 800a768:	20002008 	.word	0x20002008

0800a76c <_getpid_r>:
 800a76c:	f7f6 bef4 	b.w	8001558 <_getpid>

0800a770 <__swhatbuf_r>:
 800a770:	b570      	push	{r4, r5, r6, lr}
 800a772:	460c      	mov	r4, r1
 800a774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a778:	2900      	cmp	r1, #0
 800a77a:	b096      	sub	sp, #88	@ 0x58
 800a77c:	4615      	mov	r5, r2
 800a77e:	461e      	mov	r6, r3
 800a780:	da0d      	bge.n	800a79e <__swhatbuf_r+0x2e>
 800a782:	89a3      	ldrh	r3, [r4, #12]
 800a784:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a788:	f04f 0100 	mov.w	r1, #0
 800a78c:	bf14      	ite	ne
 800a78e:	2340      	movne	r3, #64	@ 0x40
 800a790:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a794:	2000      	movs	r0, #0
 800a796:	6031      	str	r1, [r6, #0]
 800a798:	602b      	str	r3, [r5, #0]
 800a79a:	b016      	add	sp, #88	@ 0x58
 800a79c:	bd70      	pop	{r4, r5, r6, pc}
 800a79e:	466a      	mov	r2, sp
 800a7a0:	f000 f848 	bl	800a834 <_fstat_r>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	dbec      	blt.n	800a782 <__swhatbuf_r+0x12>
 800a7a8:	9901      	ldr	r1, [sp, #4]
 800a7aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a7ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a7b2:	4259      	negs	r1, r3
 800a7b4:	4159      	adcs	r1, r3
 800a7b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7ba:	e7eb      	b.n	800a794 <__swhatbuf_r+0x24>

0800a7bc <__smakebuf_r>:
 800a7bc:	898b      	ldrh	r3, [r1, #12]
 800a7be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7c0:	079d      	lsls	r5, r3, #30
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	d507      	bpl.n	800a7d8 <__smakebuf_r+0x1c>
 800a7c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	6123      	str	r3, [r4, #16]
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	6163      	str	r3, [r4, #20]
 800a7d4:	b003      	add	sp, #12
 800a7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7d8:	ab01      	add	r3, sp, #4
 800a7da:	466a      	mov	r2, sp
 800a7dc:	f7ff ffc8 	bl	800a770 <__swhatbuf_r>
 800a7e0:	9f00      	ldr	r7, [sp, #0]
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	4639      	mov	r1, r7
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f7fe febe 	bl	8009568 <_malloc_r>
 800a7ec:	b948      	cbnz	r0, 800a802 <__smakebuf_r+0x46>
 800a7ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7f2:	059a      	lsls	r2, r3, #22
 800a7f4:	d4ee      	bmi.n	800a7d4 <__smakebuf_r+0x18>
 800a7f6:	f023 0303 	bic.w	r3, r3, #3
 800a7fa:	f043 0302 	orr.w	r3, r3, #2
 800a7fe:	81a3      	strh	r3, [r4, #12]
 800a800:	e7e2      	b.n	800a7c8 <__smakebuf_r+0xc>
 800a802:	89a3      	ldrh	r3, [r4, #12]
 800a804:	6020      	str	r0, [r4, #0]
 800a806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a80a:	81a3      	strh	r3, [r4, #12]
 800a80c:	9b01      	ldr	r3, [sp, #4]
 800a80e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a812:	b15b      	cbz	r3, 800a82c <__smakebuf_r+0x70>
 800a814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a818:	4630      	mov	r0, r6
 800a81a:	f000 f81d 	bl	800a858 <_isatty_r>
 800a81e:	b128      	cbz	r0, 800a82c <__smakebuf_r+0x70>
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	f023 0303 	bic.w	r3, r3, #3
 800a826:	f043 0301 	orr.w	r3, r3, #1
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	431d      	orrs	r5, r3
 800a830:	81a5      	strh	r5, [r4, #12]
 800a832:	e7cf      	b.n	800a7d4 <__smakebuf_r+0x18>

0800a834 <_fstat_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	4d07      	ldr	r5, [pc, #28]	@ (800a854 <_fstat_r+0x20>)
 800a838:	2300      	movs	r3, #0
 800a83a:	4604      	mov	r4, r0
 800a83c:	4608      	mov	r0, r1
 800a83e:	4611      	mov	r1, r2
 800a840:	602b      	str	r3, [r5, #0]
 800a842:	f7f6 fef1 	bl	8001628 <_fstat>
 800a846:	1c43      	adds	r3, r0, #1
 800a848:	d102      	bne.n	800a850 <_fstat_r+0x1c>
 800a84a:	682b      	ldr	r3, [r5, #0]
 800a84c:	b103      	cbz	r3, 800a850 <_fstat_r+0x1c>
 800a84e:	6023      	str	r3, [r4, #0]
 800a850:	bd38      	pop	{r3, r4, r5, pc}
 800a852:	bf00      	nop
 800a854:	20002008 	.word	0x20002008

0800a858 <_isatty_r>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	4d06      	ldr	r5, [pc, #24]	@ (800a874 <_isatty_r+0x1c>)
 800a85c:	2300      	movs	r3, #0
 800a85e:	4604      	mov	r4, r0
 800a860:	4608      	mov	r0, r1
 800a862:	602b      	str	r3, [r5, #0]
 800a864:	f7f6 fef0 	bl	8001648 <_isatty>
 800a868:	1c43      	adds	r3, r0, #1
 800a86a:	d102      	bne.n	800a872 <_isatty_r+0x1a>
 800a86c:	682b      	ldr	r3, [r5, #0]
 800a86e:	b103      	cbz	r3, 800a872 <_isatty_r+0x1a>
 800a870:	6023      	str	r3, [r4, #0]
 800a872:	bd38      	pop	{r3, r4, r5, pc}
 800a874:	20002008 	.word	0x20002008

0800a878 <_init>:
 800a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87a:	bf00      	nop
 800a87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87e:	bc08      	pop	{r3}
 800a880:	469e      	mov	lr, r3
 800a882:	4770      	bx	lr

0800a884 <_fini>:
 800a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a886:	bf00      	nop
 800a888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a88a:	bc08      	pop	{r3}
 800a88c:	469e      	mov	lr, r3
 800a88e:	4770      	bx	lr
